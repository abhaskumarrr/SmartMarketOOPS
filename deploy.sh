#!/bin/bash
set -e

# Generate a deployment ID based on timestamp
DEPLOYMENT_ID=$(date +%s)
VERSION="1.0.0"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}Starting deployment with ID: ${DEPLOYMENT_ID}${NC}"

# Create .env file with deployment ID
cat > .env << EOL
# Generated by deploy.sh on $(date)
NEXT_DEPLOYMENT_ID=${DEPLOYMENT_ID}
DEPLOYMENT_ID=${DEPLOYMENT_ID}
VERSION=${VERSION}
EOL

echo -e "${GREEN}Created .env file with deployment variables${NC}"

# Build and tag images with the deployment ID
echo -e "${YELLOW}Building frontend image...${NC}"
docker build -t smartmarket-frontend:${DEPLOYMENT_ID} \
  --build-arg NEXT_DEPLOYMENT_ID=${DEPLOYMENT_ID} \
  --build-arg NEXT_PUBLIC_API_URL=http://localhost:3006 \
  ./frontend

echo -e "${YELLOW}Building backend image...${NC}"
docker build -t smartmarket-backend:${DEPLOYMENT_ID} \
  --build-arg DEPLOYMENT_ID=${DEPLOYMENT_ID} \
  ./backend

# Tag as latest for convenience
docker tag smartmarket-frontend:${DEPLOYMENT_ID} smartmarket-frontend:latest
docker tag smartmarket-backend:${DEPLOYMENT_ID} smartmarket-backend:latest

echo -e "${GREEN}Images built and tagged with deployment ID: ${DEPLOYMENT_ID}${NC}"

# Deploy with zero downtime using production compose file
echo -e "${YELLOW}Deploying with production configuration...${NC}"
DEPLOYMENT_ID=${DEPLOYMENT_ID} VERSION=${VERSION} docker-compose -f docker-compose.prod.yml up -d

# Wait for services to be healthy
echo -e "${YELLOW}Waiting for services to be healthy...${NC}"
attempt=1
max_attempts=10
sleep_time=5

while [ $attempt -le $max_attempts ]; do
  frontend_status=$(docker inspect --format='{{.State.Health.Status}}' smartmarket-frontend 2>/dev/null || echo "container not found")
  backend_status=$(docker inspect --format='{{.State.Health.Status}}' smartmarket-backend 2>/dev/null || echo "container not found")
  
  if [ "$frontend_status" = "healthy" ] && [ "$backend_status" = "healthy" ]; then
    echo -e "${GREEN}All services are healthy!${NC}"
    break
  fi
  
  echo -e "${YELLOW}Attempt $attempt/$max_attempts: Waiting for services to be healthy...${NC}"
  echo -e "Frontend: $frontend_status, Backend: $backend_status"
  
  if [ $attempt -eq $max_attempts ]; then
    echo -e "${RED}Services did not become healthy within the timeout period.${NC}"
    echo -e "${YELLOW}Checking container logs...${NC}"
    docker logs smartmarket-frontend --tail 50
    docker logs smartmarket-backend --tail 50
    exit 1
  fi
  
  attempt=$((attempt+1))
  sleep $sleep_time
done

echo -e "${GREEN}Deployment successful!${NC}"
echo -e "Frontend: http://localhost:3000"
echo -e "Backend: http://localhost:3006"
echo -e "Deployment ID: ${DEPLOYMENT_ID}"

# Cleanup old images (optional)
read -p "Clean up old images? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  echo -e "${YELLOW}Cleaning up old images...${NC}"
  # Keep the latest 3 versions
  docker image ls smartmarket-frontend --format "{{.ID}} {{.Tag}}" | 
    grep -v "latest" | grep -v "${DEPLOYMENT_ID}" | 
    sort -rk2 | tail -n +4 | awk '{print $1}' | 
    xargs -r docker image rm
  
  docker image ls smartmarket-backend --format "{{.ID}} {{.Tag}}" | 
    grep -v "latest" | grep -v "${DEPLOYMENT_ID}" | 
    sort -rk2 | tail -n +4 | awk '{print $1}' | 
    xargs -r docker image rm
    
  echo -e "${GREEN}Cleanup complete${NC}"
fi

echo -e "${GREEN}Deployment process completed!${NC}" 