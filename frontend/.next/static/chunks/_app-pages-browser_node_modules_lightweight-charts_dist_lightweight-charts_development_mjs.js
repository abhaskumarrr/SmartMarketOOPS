"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_lightweight-charts_dist_lightweight-charts_development_mjs"],{

/***/ "(app-pages-browser)/../node_modules/fancy-canvas/canvas-element-bitmap-size.mjs":
/*!*******************************************************************!*\
  !*** ../node_modules/fancy-canvas/canvas-element-bitmap-size.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bindTo: () => (/* binding */ bindTo)\n/* harmony export */ });\n/* harmony import */ var _size_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./size.mjs */ \"(app-pages-browser)/../node_modules/fancy-canvas/size.mjs\");\n/* harmony import */ var _device_pixel_ratio_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./device-pixel-ratio.mjs */ \"(app-pages-browser)/../node_modules/fancy-canvas/device-pixel-ratio.mjs\");\n\n\nvar DevicePixelContentBoxBinding = /** @class */ (function () {\n    function DevicePixelContentBoxBinding(canvasElement, transformBitmapSize, options) {\n        var _a;\n        this._canvasElement = null;\n        this._bitmapSizeChangedListeners = [];\n        this._suggestedBitmapSize = null;\n        this._suggestedBitmapSizeChangedListeners = [];\n        // devicePixelRatio approach\n        this._devicePixelRatioObservable = null;\n        // ResizeObserver approach\n        this._canvasElementResizeObserver = null;\n        this._canvasElement = canvasElement;\n        this._canvasElementClientSize = (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: this._canvasElement.clientWidth,\n            height: this._canvasElement.clientHeight,\n        });\n        this._transformBitmapSize = transformBitmapSize !== null && transformBitmapSize !== void 0 ? transformBitmapSize : (function (size) { return size; });\n        this._allowResizeObserver = (_a = options === null || options === void 0 ? void 0 : options.allowResizeObserver) !== null && _a !== void 0 ? _a : true;\n        this._chooseAndInitObserver();\n        // we MAY leave the constuctor without any bitmap size observation mechanics initialized\n    }\n    DevicePixelContentBoxBinding.prototype.dispose = function () {\n        var _a, _b;\n        if (this._canvasElement === null) {\n            throw new Error('Object is disposed');\n        }\n        (_a = this._canvasElementResizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this._canvasElementResizeObserver = null;\n        (_b = this._devicePixelRatioObservable) === null || _b === void 0 ? void 0 : _b.dispose();\n        this._devicePixelRatioObservable = null;\n        this._suggestedBitmapSizeChangedListeners.length = 0;\n        this._bitmapSizeChangedListeners.length = 0;\n        this._canvasElement = null;\n    };\n    Object.defineProperty(DevicePixelContentBoxBinding.prototype, \"canvasElement\", {\n        get: function () {\n            if (this._canvasElement === null) {\n                throw new Error('Object is disposed');\n            }\n            return this._canvasElement;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DevicePixelContentBoxBinding.prototype, \"canvasElementClientSize\", {\n        get: function () {\n            return this._canvasElementClientSize;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DevicePixelContentBoxBinding.prototype, \"bitmapSize\", {\n        get: function () {\n            return (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: this.canvasElement.width,\n                height: this.canvasElement.height,\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Use this function to change canvas element client size until binding is disposed\n     * @param clientSize New client size for bound HTMLCanvasElement\n     */\n    DevicePixelContentBoxBinding.prototype.resizeCanvasElement = function (clientSize) {\n        this._canvasElementClientSize = (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.size)(clientSize);\n        this.canvasElement.style.width = \"\".concat(this._canvasElementClientSize.width, \"px\");\n        this.canvasElement.style.height = \"\".concat(this._canvasElementClientSize.height, \"px\");\n        this._invalidateBitmapSize();\n    };\n    DevicePixelContentBoxBinding.prototype.subscribeBitmapSizeChanged = function (listener) {\n        this._bitmapSizeChangedListeners.push(listener);\n    };\n    DevicePixelContentBoxBinding.prototype.unsubscribeBitmapSizeChanged = function (listener) {\n        this._bitmapSizeChangedListeners = this._bitmapSizeChangedListeners.filter(function (l) { return l !== listener; });\n    };\n    Object.defineProperty(DevicePixelContentBoxBinding.prototype, \"suggestedBitmapSize\", {\n        get: function () {\n            return this._suggestedBitmapSize;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DevicePixelContentBoxBinding.prototype.subscribeSuggestedBitmapSizeChanged = function (listener) {\n        this._suggestedBitmapSizeChangedListeners.push(listener);\n    };\n    DevicePixelContentBoxBinding.prototype.unsubscribeSuggestedBitmapSizeChanged = function (listener) {\n        this._suggestedBitmapSizeChangedListeners = this._suggestedBitmapSizeChangedListeners.filter(function (l) { return l !== listener; });\n    };\n    DevicePixelContentBoxBinding.prototype.applySuggestedBitmapSize = function () {\n        if (this._suggestedBitmapSize === null) {\n            // nothing to apply\n            return;\n        }\n        var oldSuggestedSize = this._suggestedBitmapSize;\n        this._suggestedBitmapSize = null;\n        this._resizeBitmap(oldSuggestedSize);\n        this._emitSuggestedBitmapSizeChanged(oldSuggestedSize, this._suggestedBitmapSize);\n    };\n    DevicePixelContentBoxBinding.prototype._resizeBitmap = function (newSize) {\n        var oldSize = this.bitmapSize;\n        if ((0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(oldSize, newSize)) {\n            return;\n        }\n        this.canvasElement.width = newSize.width;\n        this.canvasElement.height = newSize.height;\n        this._emitBitmapSizeChanged(oldSize, newSize);\n    };\n    DevicePixelContentBoxBinding.prototype._emitBitmapSizeChanged = function (oldSize, newSize) {\n        var _this = this;\n        this._bitmapSizeChangedListeners.forEach(function (listener) { return listener.call(_this, oldSize, newSize); });\n    };\n    DevicePixelContentBoxBinding.prototype._suggestNewBitmapSize = function (newSize) {\n        var oldSuggestedSize = this._suggestedBitmapSize;\n        var finalNewSize = (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.size)(this._transformBitmapSize(newSize, this._canvasElementClientSize));\n        var newSuggestedSize = (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this.bitmapSize, finalNewSize) ? null : finalNewSize;\n        if (oldSuggestedSize === null && newSuggestedSize === null) {\n            return;\n        }\n        if (oldSuggestedSize !== null && newSuggestedSize !== null\n            && (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(oldSuggestedSize, newSuggestedSize)) {\n            return;\n        }\n        this._suggestedBitmapSize = newSuggestedSize;\n        this._emitSuggestedBitmapSizeChanged(oldSuggestedSize, newSuggestedSize);\n    };\n    DevicePixelContentBoxBinding.prototype._emitSuggestedBitmapSizeChanged = function (oldSize, newSize) {\n        var _this = this;\n        this._suggestedBitmapSizeChangedListeners.forEach(function (listener) { return listener.call(_this, oldSize, newSize); });\n    };\n    DevicePixelContentBoxBinding.prototype._chooseAndInitObserver = function () {\n        var _this = this;\n        if (!this._allowResizeObserver) {\n            this._initDevicePixelRatioObservable();\n            return;\n        }\n        isDevicePixelContentBoxSupported()\n            .then(function (isSupported) {\n            return isSupported ?\n                _this._initResizeObserver() :\n                _this._initDevicePixelRatioObservable();\n        });\n    };\n    // devicePixelRatio approach\n    DevicePixelContentBoxBinding.prototype._initDevicePixelRatioObservable = function () {\n        var _this = this;\n        if (this._canvasElement === null) {\n            // it looks like we are already dead\n            return;\n        }\n        var win = canvasElementWindow(this._canvasElement);\n        if (win === null) {\n            throw new Error('No window is associated with the canvas');\n        }\n        this._devicePixelRatioObservable = (0,_device_pixel_ratio_mjs__WEBPACK_IMPORTED_MODULE_1__.createObservable)(win);\n        this._devicePixelRatioObservable.subscribe(function () { return _this._invalidateBitmapSize(); });\n        this._invalidateBitmapSize();\n    };\n    DevicePixelContentBoxBinding.prototype._invalidateBitmapSize = function () {\n        var _a, _b;\n        if (this._canvasElement === null) {\n            // it looks like we are already dead\n            return;\n        }\n        var win = canvasElementWindow(this._canvasElement);\n        if (win === null) {\n            return;\n        }\n        var ratio = (_b = (_a = this._devicePixelRatioObservable) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : win.devicePixelRatio;\n        var canvasRects = this._canvasElement.getClientRects();\n        var newSize = \n        // eslint-disable-next-line no-negated-condition\n        canvasRects[0] !== undefined ?\n            predictedBitmapSize(canvasRects[0], ratio) :\n            (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: this._canvasElementClientSize.width * ratio,\n                height: this._canvasElementClientSize.height * ratio,\n            });\n        this._suggestNewBitmapSize(newSize);\n    };\n    // ResizeObserver approach\n    DevicePixelContentBoxBinding.prototype._initResizeObserver = function () {\n        var _this = this;\n        if (this._canvasElement === null) {\n            // it looks like we are already dead\n            return;\n        }\n        this._canvasElementResizeObserver = new ResizeObserver(function (entries) {\n            var entry = entries.find(function (entry) { return entry.target === _this._canvasElement; });\n            if (!entry || !entry.devicePixelContentBoxSize || !entry.devicePixelContentBoxSize[0]) {\n                return;\n            }\n            var entrySize = entry.devicePixelContentBoxSize[0];\n            var newSize = (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: entrySize.inlineSize,\n                height: entrySize.blockSize,\n            });\n            _this._suggestNewBitmapSize(newSize);\n        });\n        this._canvasElementResizeObserver.observe(this._canvasElement, { box: 'device-pixel-content-box' });\n    };\n    return DevicePixelContentBoxBinding;\n}());\nfunction bindTo(canvasElement, target) {\n    if (target.type === 'device-pixel-content-box') {\n        return new DevicePixelContentBoxBinding(canvasElement, target.transform, target.options);\n    }\n    throw new Error('Unsupported binding target');\n}\nfunction canvasElementWindow(canvasElement) {\n    // According to DOM Level 2 Core specification, ownerDocument should never be null for HTMLCanvasElement\n    // see https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#node-ownerDoc\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return canvasElement.ownerDocument.defaultView;\n}\nfunction isDevicePixelContentBoxSupported() {\n    return new Promise(function (resolve) {\n        var ro = new ResizeObserver(function (entries) {\n            resolve(entries.every(function (entry) { return 'devicePixelContentBoxSize' in entry; }));\n            ro.disconnect();\n        });\n        ro.observe(document.body, { box: 'device-pixel-content-box' });\n    })\n        .catch(function () { return false; });\n}\nfunction predictedBitmapSize(canvasRect, ratio) {\n    return (0,_size_mjs__WEBPACK_IMPORTED_MODULE_0__.size)({\n        width: Math.round(canvasRect.left * ratio + canvasRect.width * ratio) -\n            Math.round(canvasRect.left * ratio),\n        height: Math.round(canvasRect.top * ratio + canvasRect.height * ratio) -\n            Math.round(canvasRect.top * ratio),\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/fancy-canvas/canvas-element-bitmap-size.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/fancy-canvas/canvas-rendering-target.mjs":
/*!****************************************************************!*\
  !*** ../node_modules/fancy-canvas/canvas-rendering-target.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CanvasRenderingTarget2D: () => (/* binding */ CanvasRenderingTarget2D),\n/* harmony export */   createCanvasRenderingTarget2D: () => (/* binding */ createCanvasRenderingTarget2D),\n/* harmony export */   tryCreateCanvasRenderingTarget2D: () => (/* binding */ tryCreateCanvasRenderingTarget2D)\n/* harmony export */ });\n/**\n * @experimental\n */\nvar CanvasRenderingTarget2D = /** @class */ (function () {\n    function CanvasRenderingTarget2D(context, mediaSize, bitmapSize) {\n        if (mediaSize.width === 0 || mediaSize.height === 0) {\n            throw new TypeError('Rendering target could only be created on a media with positive width and height');\n        }\n        this._mediaSize = mediaSize;\n        // !Number.isInteger(bitmapSize.width) || !Number.isInteger(bitmapSize.height)\n        if (bitmapSize.width === 0 || bitmapSize.height === 0) {\n            throw new TypeError('Rendering target could only be created using a bitmap with positive integer width and height');\n        }\n        this._bitmapSize = bitmapSize;\n        this._context = context;\n    }\n    CanvasRenderingTarget2D.prototype.useMediaCoordinateSpace = function (f) {\n        try {\n            this._context.save();\n            // do not use resetTransform to support old versions of Edge\n            this._context.setTransform(1, 0, 0, 1, 0, 0);\n            this._context.scale(this._horizontalPixelRatio, this._verticalPixelRatio);\n            return f({\n                context: this._context,\n                mediaSize: this._mediaSize,\n            });\n        }\n        finally {\n            this._context.restore();\n        }\n    };\n    CanvasRenderingTarget2D.prototype.useBitmapCoordinateSpace = function (f) {\n        try {\n            this._context.save();\n            // do not use resetTransform to support old versions of Edge\n            this._context.setTransform(1, 0, 0, 1, 0, 0);\n            return f({\n                context: this._context,\n                mediaSize: this._mediaSize,\n                bitmapSize: this._bitmapSize,\n                horizontalPixelRatio: this._horizontalPixelRatio,\n                verticalPixelRatio: this._verticalPixelRatio,\n            });\n        }\n        finally {\n            this._context.restore();\n        }\n    };\n    Object.defineProperty(CanvasRenderingTarget2D.prototype, \"_horizontalPixelRatio\", {\n        get: function () {\n            return this._bitmapSize.width / this._mediaSize.width;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasRenderingTarget2D.prototype, \"_verticalPixelRatio\", {\n        get: function () {\n            return this._bitmapSize.height / this._mediaSize.height;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return CanvasRenderingTarget2D;\n}());\n\n/**\n * @experimental\n */\nfunction createCanvasRenderingTarget2D(binding, contextOptions) {\n    var mediaSize = binding.canvasElementClientSize;\n    var bitmapSize = binding.bitmapSize;\n    var context = binding.canvasElement.getContext('2d', contextOptions);\n    if (context === null) {\n        throw new Error('Could not get 2d drawing context from bound canvas element. Has the canvas already been set to a different context mode?');\n    }\n    return new CanvasRenderingTarget2D(context, mediaSize, bitmapSize);\n}\n/**\n * @experimental\n */\nfunction tryCreateCanvasRenderingTarget2D(binding, contextOptions) {\n    var mediaSize = binding.canvasElementClientSize;\n    if (mediaSize.width === 0 || mediaSize.height === 0) {\n        return null;\n    }\n    var bitmapSize = binding.bitmapSize;\n    if (bitmapSize.width === 0 || bitmapSize.height === 0) {\n        return null;\n    }\n    var context = binding.canvasElement.getContext('2d', contextOptions);\n    if (context === null) {\n        return null;\n    }\n    return new CanvasRenderingTarget2D(context, mediaSize, bitmapSize);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZmFuY3ktY2FudmFzL2NhbnZhcy1yZW5kZXJpbmctdGFyZ2V0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ2tDO0FBQ25DO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FiaGFza3VtYXJyci9Eb2N1bWVudHMvR2l0SHViL1NtYXJ0TWFya2V0T09QUy9ub2RlX21vZHVsZXMvZmFuY3ktY2FudmFzL2NhbnZhcy1yZW5kZXJpbmctdGFyZ2V0Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBleHBlcmltZW50YWxcbiAqL1xudmFyIENhbnZhc1JlbmRlcmluZ1RhcmdldDJEID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhbnZhc1JlbmRlcmluZ1RhcmdldDJEKGNvbnRleHQsIG1lZGlhU2l6ZSwgYml0bWFwU2l6ZSkge1xuICAgICAgICBpZiAobWVkaWFTaXplLndpZHRoID09PSAwIHx8IG1lZGlhU2l6ZS5oZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlbmRlcmluZyB0YXJnZXQgY291bGQgb25seSBiZSBjcmVhdGVkIG9uIGEgbWVkaWEgd2l0aCBwb3NpdGl2ZSB3aWR0aCBhbmQgaGVpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWVkaWFTaXplID0gbWVkaWFTaXplO1xuICAgICAgICAvLyAhTnVtYmVyLmlzSW50ZWdlcihiaXRtYXBTaXplLndpZHRoKSB8fCAhTnVtYmVyLmlzSW50ZWdlcihiaXRtYXBTaXplLmhlaWdodClcbiAgICAgICAgaWYgKGJpdG1hcFNpemUud2lkdGggPT09IDAgfHwgYml0bWFwU2l6ZS5oZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlbmRlcmluZyB0YXJnZXQgY291bGQgb25seSBiZSBjcmVhdGVkIHVzaW5nIGEgYml0bWFwIHdpdGggcG9zaXRpdmUgaW50ZWdlciB3aWR0aCBhbmQgaGVpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYml0bWFwU2l6ZSA9IGJpdG1hcFNpemU7XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbiAgICBDYW52YXNSZW5kZXJpbmdUYXJnZXQyRC5wcm90b3R5cGUudXNlTWVkaWFDb29yZGluYXRlU3BhY2UgPSBmdW5jdGlvbiAoZikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zYXZlKCk7XG4gICAgICAgICAgICAvLyBkbyBub3QgdXNlIHJlc2V0VHJhbnNmb3JtIHRvIHN1cHBvcnQgb2xkIHZlcnNpb25zIG9mIEVkZ2VcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zY2FsZSh0aGlzLl9ob3Jpem9udGFsUGl4ZWxSYXRpbywgdGhpcy5fdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIHJldHVybiBmKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0OiB0aGlzLl9jb250ZXh0LFxuICAgICAgICAgICAgICAgIG1lZGlhU2l6ZTogdGhpcy5fbWVkaWFTaXplLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2FudmFzUmVuZGVyaW5nVGFyZ2V0MkQucHJvdG90eXBlLnVzZUJpdG1hcENvb3JkaW5hdGVTcGFjZSA9IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIC8vIGRvIG5vdCB1c2UgcmVzZXRUcmFuc2Zvcm0gdG8gc3VwcG9ydCBvbGQgdmVyc2lvbnMgb2YgRWRnZVxuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICAgICAgICByZXR1cm4gZih7XG4gICAgICAgICAgICAgICAgY29udGV4dDogdGhpcy5fY29udGV4dCxcbiAgICAgICAgICAgICAgICBtZWRpYVNpemU6IHRoaXMuX21lZGlhU2l6ZSxcbiAgICAgICAgICAgICAgICBiaXRtYXBTaXplOiB0aGlzLl9iaXRtYXBTaXplLFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxQaXhlbFJhdGlvOiB0aGlzLl9ob3Jpem9udGFsUGl4ZWxSYXRpbyxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbFBpeGVsUmF0aW86IHRoaXMuX3ZlcnRpY2FsUGl4ZWxSYXRpbyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW52YXNSZW5kZXJpbmdUYXJnZXQyRC5wcm90b3R5cGUsIFwiX2hvcml6b250YWxQaXhlbFJhdGlvXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYml0bWFwU2l6ZS53aWR0aCAvIHRoaXMuX21lZGlhU2l6ZS53aWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW52YXNSZW5kZXJpbmdUYXJnZXQyRC5wcm90b3R5cGUsIFwiX3ZlcnRpY2FsUGl4ZWxSYXRpb1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JpdG1hcFNpemUuaGVpZ2h0IC8gdGhpcy5fbWVkaWFTaXplLmhlaWdodDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBDYW52YXNSZW5kZXJpbmdUYXJnZXQyRDtcbn0oKSk7XG5leHBvcnQgeyBDYW52YXNSZW5kZXJpbmdUYXJnZXQyRCB9O1xuLyoqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYW52YXNSZW5kZXJpbmdUYXJnZXQyRChiaW5kaW5nLCBjb250ZXh0T3B0aW9ucykge1xuICAgIHZhciBtZWRpYVNpemUgPSBiaW5kaW5nLmNhbnZhc0VsZW1lbnRDbGllbnRTaXplO1xuICAgIHZhciBiaXRtYXBTaXplID0gYmluZGluZy5iaXRtYXBTaXplO1xuICAgIHZhciBjb250ZXh0ID0gYmluZGluZy5jYW52YXNFbGVtZW50LmdldENvbnRleHQoJzJkJywgY29udGV4dE9wdGlvbnMpO1xuICAgIGlmIChjb250ZXh0ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGdldCAyZCBkcmF3aW5nIGNvbnRleHQgZnJvbSBib3VuZCBjYW52YXMgZWxlbWVudC4gSGFzIHRoZSBjYW52YXMgYWxyZWFkeSBiZWVuIHNldCB0byBhIGRpZmZlcmVudCBjb250ZXh0IG1vZGU/Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ2FudmFzUmVuZGVyaW5nVGFyZ2V0MkQoY29udGV4dCwgbWVkaWFTaXplLCBiaXRtYXBTaXplKTtcbn1cbi8qKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ5Q3JlYXRlQ2FudmFzUmVuZGVyaW5nVGFyZ2V0MkQoYmluZGluZywgY29udGV4dE9wdGlvbnMpIHtcbiAgICB2YXIgbWVkaWFTaXplID0gYmluZGluZy5jYW52YXNFbGVtZW50Q2xpZW50U2l6ZTtcbiAgICBpZiAobWVkaWFTaXplLndpZHRoID09PSAwIHx8IG1lZGlhU2l6ZS5oZWlnaHQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBiaXRtYXBTaXplID0gYmluZGluZy5iaXRtYXBTaXplO1xuICAgIGlmIChiaXRtYXBTaXplLndpZHRoID09PSAwIHx8IGJpdG1hcFNpemUuaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgY29udGV4dCA9IGJpbmRpbmcuY2FudmFzRWxlbWVudC5nZXRDb250ZXh0KCcyZCcsIGNvbnRleHRPcHRpb25zKTtcbiAgICBpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDYW52YXNSZW5kZXJpbmdUYXJnZXQyRChjb250ZXh0LCBtZWRpYVNpemUsIGJpdG1hcFNpemUpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/fancy-canvas/canvas-rendering-target.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/fancy-canvas/device-pixel-ratio.mjs":
/*!***********************************************************!*\
  !*** ../node_modules/fancy-canvas/device-pixel-ratio.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createObservable: () => (/* binding */ createObservable)\n/* harmony export */ });\nvar Observable = /** @class */ (function () {\n    function Observable(win) {\n        var _this = this;\n        this._resolutionListener = function () { return _this._onResolutionChanged(); };\n        this._resolutionMediaQueryList = null;\n        this._observers = [];\n        this._window = win;\n        this._installResolutionListener();\n    }\n    Observable.prototype.dispose = function () {\n        this._uninstallResolutionListener();\n        this._window = null;\n    };\n    Object.defineProperty(Observable.prototype, \"value\", {\n        get: function () {\n            return this._window.devicePixelRatio;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Observable.prototype.subscribe = function (next) {\n        var _this = this;\n        var observer = { next: next };\n        this._observers.push(observer);\n        return {\n            unsubscribe: function () {\n                _this._observers = _this._observers.filter(function (o) { return o !== observer; });\n            },\n        };\n    };\n    Observable.prototype._installResolutionListener = function () {\n        if (this._resolutionMediaQueryList !== null) {\n            throw new Error('Resolution listener is already installed');\n        }\n        var dppx = this._window.devicePixelRatio;\n        this._resolutionMediaQueryList = this._window.matchMedia(\"all and (resolution: \".concat(dppx, \"dppx)\"));\n        // IE and some versions of Edge do not support addEventListener/removeEventListener, and we are going to use the deprecated addListener/removeListener\n        this._resolutionMediaQueryList.addListener(this._resolutionListener);\n    };\n    Observable.prototype._uninstallResolutionListener = function () {\n        if (this._resolutionMediaQueryList !== null) {\n            // IE and some versions of Edge do not support addEventListener/removeEventListener, and we are going to use the deprecated addListener/removeListener\n            this._resolutionMediaQueryList.removeListener(this._resolutionListener);\n            this._resolutionMediaQueryList = null;\n        }\n    };\n    Observable.prototype._reinstallResolutionListener = function () {\n        this._uninstallResolutionListener();\n        this._installResolutionListener();\n    };\n    Observable.prototype._onResolutionChanged = function () {\n        var _this = this;\n        this._observers.forEach(function (observer) { return observer.next(_this._window.devicePixelRatio); });\n        this._reinstallResolutionListener();\n    };\n    return Observable;\n}());\nfunction createObservable(win) {\n    return new Observable(win);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZmFuY3ktY2FudmFzL2RldmljZS1waXhlbC1yYXRpby5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSx3QkFBd0I7QUFDbEcsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCx1REFBdUQ7QUFDN0c7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FiaGFza3VtYXJyci9Eb2N1bWVudHMvR2l0SHViL1NtYXJ0TWFya2V0T09QUy9ub2RlX21vZHVsZXMvZmFuY3ktY2FudmFzL2RldmljZS1waXhlbC1yYXRpby5tanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE9ic2VydmFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZSh3aW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fcmVzb2x1dGlvbkxpc3RlbmVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX29uUmVzb2x1dGlvbkNoYW5nZWQoKTsgfTtcbiAgICAgICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhUXVlcnlMaXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzID0gW107XG4gICAgICAgIHRoaXMuX3dpbmRvdyA9IHdpbjtcbiAgICAgICAgdGhpcy5faW5zdGFsbFJlc29sdXRpb25MaXN0ZW5lcigpO1xuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl91bmluc3RhbGxSZXNvbHV0aW9uTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5fd2luZG93ID0gbnVsbDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYnNlcnZhYmxlLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG9ic2VydmVyID0geyBuZXh0OiBuZXh0IH07XG4gICAgICAgIHRoaXMuX29ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX29ic2VydmVycyA9IF90aGlzLl9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICE9PSBvYnNlcnZlcjsgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX2luc3RhbGxSZXNvbHV0aW9uTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXNvbHV0aW9uTWVkaWFRdWVyeUxpc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVzb2x1dGlvbiBsaXN0ZW5lciBpcyBhbHJlYWR5IGluc3RhbGxlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkcHB4ID0gdGhpcy5fd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIHRoaXMuX3Jlc29sdXRpb25NZWRpYVF1ZXJ5TGlzdCA9IHRoaXMuX3dpbmRvdy5tYXRjaE1lZGlhKFwiYWxsIGFuZCAocmVzb2x1dGlvbjogXCIuY29uY2F0KGRwcHgsIFwiZHBweClcIikpO1xuICAgICAgICAvLyBJRSBhbmQgc29tZSB2ZXJzaW9ucyBvZiBFZGdlIGRvIG5vdCBzdXBwb3J0IGFkZEV2ZW50TGlzdGVuZXIvcmVtb3ZlRXZlbnRMaXN0ZW5lciwgYW5kIHdlIGFyZSBnb2luZyB0byB1c2UgdGhlIGRlcHJlY2F0ZWQgYWRkTGlzdGVuZXIvcmVtb3ZlTGlzdGVuZXJcbiAgICAgICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhUXVlcnlMaXN0LmFkZExpc3RlbmVyKHRoaXMuX3Jlc29sdXRpb25MaXN0ZW5lcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdW5pbnN0YWxsUmVzb2x1dGlvbkxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fcmVzb2x1dGlvbk1lZGlhUXVlcnlMaXN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJRSBhbmQgc29tZSB2ZXJzaW9ucyBvZiBFZGdlIGRvIG5vdCBzdXBwb3J0IGFkZEV2ZW50TGlzdGVuZXIvcmVtb3ZlRXZlbnRMaXN0ZW5lciwgYW5kIHdlIGFyZSBnb2luZyB0byB1c2UgdGhlIGRlcHJlY2F0ZWQgYWRkTGlzdGVuZXIvcmVtb3ZlTGlzdGVuZXJcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdXRpb25NZWRpYVF1ZXJ5TGlzdC5yZW1vdmVMaXN0ZW5lcih0aGlzLl9yZXNvbHV0aW9uTGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhUXVlcnlMaXN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3JlaW5zdGFsbFJlc29sdXRpb25MaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdW5pbnN0YWxsUmVzb2x1dGlvbkxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuX2luc3RhbGxSZXNvbHV0aW9uTGlzdGVuZXIoKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9vblJlc29sdXRpb25DaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIG9ic2VydmVyLm5leHQoX3RoaXMuX3dpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTsgfSk7XG4gICAgICAgIHRoaXMuX3JlaW5zdGFsbFJlc29sdXRpb25MaXN0ZW5lcigpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9ic2VydmFibGUod2luKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHdpbik7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/fancy-canvas/device-pixel-ratio.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/fancy-canvas/index.mjs":
/*!**********************************************!*\
  !*** ../node_modules/fancy-canvas/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CanvasRenderingTarget2D: () => (/* reexport safe */ _canvas_rendering_target_mjs__WEBPACK_IMPORTED_MODULE_2__.CanvasRenderingTarget2D),\n/* harmony export */   bindCanvasElementBitmapSizeTo: () => (/* reexport safe */ _canvas_element_bitmap_size_mjs__WEBPACK_IMPORTED_MODULE_1__.bindTo),\n/* harmony export */   createCanvasRenderingTarget2D: () => (/* reexport safe */ _canvas_rendering_target_mjs__WEBPACK_IMPORTED_MODULE_2__.createCanvasRenderingTarget2D),\n/* harmony export */   equalSizes: () => (/* reexport safe */ _size_mjs__WEBPACK_IMPORTED_MODULE_0__.equalSizes),\n/* harmony export */   size: () => (/* reexport safe */ _size_mjs__WEBPACK_IMPORTED_MODULE_0__.size),\n/* harmony export */   tryCreateCanvasRenderingTarget2D: () => (/* reexport safe */ _canvas_rendering_target_mjs__WEBPACK_IMPORTED_MODULE_2__.tryCreateCanvasRenderingTarget2D)\n/* harmony export */ });\n/* harmony import */ var _size_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./size.mjs */ \"(app-pages-browser)/../node_modules/fancy-canvas/size.mjs\");\n/* harmony import */ var _canvas_element_bitmap_size_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas-element-bitmap-size.mjs */ \"(app-pages-browser)/../node_modules/fancy-canvas/canvas-element-bitmap-size.mjs\");\n/* harmony import */ var _canvas_rendering_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas-rendering-target.mjs */ \"(app-pages-browser)/../node_modules/fancy-canvas/canvas-rendering-target.mjs\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZmFuY3ktY2FudmFzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBOEM7QUFDOEM7QUFDOEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hYmhhc2t1bWFycnIvRG9jdW1lbnRzL0dpdEh1Yi9TbWFydE1hcmtldE9PUFMvbm9kZV9tb2R1bGVzL2ZhbmN5LWNhbnZhcy9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgc2l6ZSwgZXF1YWxTaXplcyB9IGZyb20gXCIuL3NpemUubWpzXCI7XG5leHBvcnQgeyBiaW5kVG8gYXMgYmluZENhbnZhc0VsZW1lbnRCaXRtYXBTaXplVG8sIH0gZnJvbSBcIi4vY2FudmFzLWVsZW1lbnQtYml0bWFwLXNpemUubWpzXCI7XG5leHBvcnQgeyBDYW52YXNSZW5kZXJpbmdUYXJnZXQyRCwgY3JlYXRlQ2FudmFzUmVuZGVyaW5nVGFyZ2V0MkQsIHRyeUNyZWF0ZUNhbnZhc1JlbmRlcmluZ1RhcmdldDJELCB9IGZyb20gXCIuL2NhbnZhcy1yZW5kZXJpbmctdGFyZ2V0Lm1qc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/fancy-canvas/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/fancy-canvas/size.mjs":
/*!*********************************************!*\
  !*** ../node_modules/fancy-canvas/size.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equalSizes: () => (/* binding */ equalSizes),\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\nfunction size(_a) {\n    var width = _a.width, height = _a.height;\n    if (width < 0) {\n        throw new Error('Negative width is not allowed for Size');\n    }\n    if (height < 0) {\n        throw new Error('Negative height is not allowed for Size');\n    }\n    return {\n        width: width,\n        height: height,\n    };\n}\nfunction equalSizes(first, second) {\n    return (first.width === second.width) &&\n        (first.height === second.height);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZmFuY3ktY2FudmFzL3NpemUubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2FiaGFza3VtYXJyci9Eb2N1bWVudHMvR2l0SHViL1NtYXJ0TWFya2V0T09QUy9ub2RlX21vZHVsZXMvZmFuY3ktY2FudmFzL3NpemUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBzaXplKF9hKSB7XG4gICAgdmFyIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICBpZiAod2lkdGggPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTmVnYXRpdmUgd2lkdGggaXMgbm90IGFsbG93ZWQgZm9yIFNpemUnKTtcbiAgICB9XG4gICAgaWYgKGhlaWdodCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZWdhdGl2ZSBoZWlnaHQgaXMgbm90IGFsbG93ZWQgZm9yIFNpemUnKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsU2l6ZXMoZmlyc3QsIHNlY29uZCkge1xuICAgIHJldHVybiAoZmlyc3Qud2lkdGggPT09IHNlY29uZC53aWR0aCkgJiZcbiAgICAgICAgKGZpcnN0LmhlaWdodCA9PT0gc2Vjb25kLmhlaWdodCk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/fancy-canvas/size.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/lightweight-charts/dist/lightweight-charts.development.mjs":
/*!**********************************************************************************!*\
  !*** ../node_modules/lightweight-charts/dist/lightweight-charts.development.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AreaSeries: () => (/* binding */ areaSeries),\n/* harmony export */   BarSeries: () => (/* binding */ barSeries),\n/* harmony export */   BaselineSeries: () => (/* binding */ baselineSeries),\n/* harmony export */   CandlestickSeries: () => (/* binding */ candlestickSeries),\n/* harmony export */   ColorType: () => (/* binding */ ColorType),\n/* harmony export */   CrosshairMode: () => (/* binding */ CrosshairMode),\n/* harmony export */   HistogramSeries: () => (/* binding */ histogramSeries),\n/* harmony export */   LastPriceAnimationMode: () => (/* binding */ LastPriceAnimationMode),\n/* harmony export */   LineSeries: () => (/* binding */ lineSeries),\n/* harmony export */   LineStyle: () => (/* binding */ LineStyle),\n/* harmony export */   LineType: () => (/* binding */ LineType),\n/* harmony export */   MismatchDirection: () => (/* binding */ MismatchDirection),\n/* harmony export */   PriceLineSource: () => (/* binding */ PriceLineSource),\n/* harmony export */   PriceScaleMode: () => (/* binding */ PriceScaleMode),\n/* harmony export */   TickMarkType: () => (/* binding */ TickMarkType),\n/* harmony export */   TrackingModeExitMode: () => (/* binding */ TrackingModeExitMode),\n/* harmony export */   createChart: () => (/* binding */ createChart),\n/* harmony export */   createChartEx: () => (/* binding */ createChartEx),\n/* harmony export */   createImageWatermark: () => (/* binding */ createImageWatermark),\n/* harmony export */   createOptionsChart: () => (/* binding */ createOptionsChart),\n/* harmony export */   createSeriesMarkers: () => (/* binding */ createSeriesMarkers),\n/* harmony export */   createTextWatermark: () => (/* binding */ createTextWatermark),\n/* harmony export */   createUpDownMarkers: () => (/* binding */ createUpDownMarkers),\n/* harmony export */   createYieldCurveChart: () => (/* binding */ createYieldCurveChart),\n/* harmony export */   customSeriesDefaultOptions: () => (/* binding */ customSeriesDefaultOptions),\n/* harmony export */   defaultHorzScaleBehavior: () => (/* binding */ defaultHorzScaleBehavior),\n/* harmony export */   isBusinessDay: () => (/* binding */ isBusinessDay),\n/* harmony export */   isUTCTimestamp: () => (/* binding */ isUTCTimestamp),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var fancy_canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fancy-canvas */ \"(app-pages-browser)/../node_modules/fancy-canvas/index.mjs\");\n/*!\n * @license\n * TradingView Lightweight Charts™ v5.0.7\n * Copyright (c) 2025 TradingView, Inc.\n * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0\n */ \nconst customStyleDefaults$1 = {\n    color: '#2196f3'\n};\nconst seriesOptionsDefaults = {\n    title: '',\n    visible: true,\n    lastValueVisible: true,\n    priceLineVisible: true,\n    priceLineSource: 0 /* PriceLineSource.LastBar */ ,\n    priceLineWidth: 1,\n    priceLineColor: '',\n    priceLineStyle: 2 /* LineStyle.Dashed */ ,\n    baseLineVisible: true,\n    baseLineWidth: 1,\n    baseLineColor: '#B2B5BE',\n    baseLineStyle: 0 /* LineStyle.Solid */ ,\n    priceFormat: {\n        type: 'price',\n        precision: 2,\n        minMove: 0.01\n    }\n};\n/**\n * Represents the possible line types.\n */ var LineType;\n(function(LineType) {\n    /**\n     * A line.\n     */ LineType[LineType[\"Simple\"] = 0] = \"Simple\";\n    /**\n     * A stepped line.\n     */ LineType[LineType[\"WithSteps\"] = 1] = \"WithSteps\";\n    /**\n     * A curved line.\n     */ LineType[LineType[\"Curved\"] = 2] = \"Curved\";\n})(LineType || (LineType = {}));\n/**\n * Represents the possible line styles.\n */ var LineStyle;\n(function(LineStyle) {\n    /**\n     * A solid line.\n     */ LineStyle[LineStyle[\"Solid\"] = 0] = \"Solid\";\n    /**\n     * A dotted line.\n     */ LineStyle[LineStyle[\"Dotted\"] = 1] = \"Dotted\";\n    /**\n     * A dashed line.\n     */ LineStyle[LineStyle[\"Dashed\"] = 2] = \"Dashed\";\n    /**\n     * A dashed line with bigger dashes.\n     */ LineStyle[LineStyle[\"LargeDashed\"] = 3] = \"LargeDashed\";\n    /**\n     * A dotted line with more space between dots.\n     */ LineStyle[LineStyle[\"SparseDotted\"] = 4] = \"SparseDotted\";\n})(LineStyle || (LineStyle = {}));\nfunction setLineStyle(ctx, style) {\n    const dashPatterns = {\n        [0 /* LineStyle.Solid */ ]: [],\n        [1 /* LineStyle.Dotted */ ]: [\n            ctx.lineWidth,\n            ctx.lineWidth\n        ],\n        [2 /* LineStyle.Dashed */ ]: [\n            2 * ctx.lineWidth,\n            2 * ctx.lineWidth\n        ],\n        [3 /* LineStyle.LargeDashed */ ]: [\n            6 * ctx.lineWidth,\n            6 * ctx.lineWidth\n        ],\n        [4 /* LineStyle.SparseDotted */ ]: [\n            ctx.lineWidth,\n            4 * ctx.lineWidth\n        ]\n    };\n    const dashPattern = dashPatterns[style];\n    ctx.setLineDash(dashPattern);\n}\nfunction drawHorizontalLine(ctx, y, left, right) {\n    ctx.beginPath();\n    const correction = ctx.lineWidth % 2 ? 0.5 : 0;\n    ctx.moveTo(left, y + correction);\n    ctx.lineTo(right, y + correction);\n    ctx.stroke();\n}\nfunction drawVerticalLine(ctx, x, top, bottom) {\n    ctx.beginPath();\n    const correction = ctx.lineWidth % 2 ? 0.5 : 0;\n    ctx.moveTo(x + correction, top);\n    ctx.lineTo(x + correction, bottom);\n    ctx.stroke();\n}\nfunction strokeInPixel(ctx, drawFunction) {\n    ctx.save();\n    if (ctx.lineWidth % 2) {\n        ctx.translate(0.5, 0.5);\n    }\n    drawFunction();\n    ctx.restore();\n}\n/**\n * Checks an assertion. Throws if the assertion is failed.\n *\n * @param condition - Result of the assertion evaluation\n * @param message - Text to include in the exception message\n */ function assert(condition, message) {\n    if (!condition) {\n        throw new Error('Assertion failed' + (message ? ': ' + message : ''));\n    }\n}\nfunction ensureDefined(value) {\n    if (value === undefined) {\n        throw new Error('Value is undefined');\n    }\n    return value;\n}\nfunction ensureNotNull(value) {\n    if (value === null) {\n        throw new Error('Value is null');\n    }\n    return value;\n}\nfunction ensure(value) {\n    return ensureNotNull(ensureDefined(value));\n}\n/**\n * Compile time check for never\n */ function ensureNever(value) {}\nclass Delegate {\n    _internal_subscribe(callback, linkedObject, singleshot) {\n        const listener = {\n            _internal_callback: callback,\n            _internal_linkedObject: linkedObject,\n            _internal_singleshot: singleshot === true\n        };\n        this._private__listeners.push(listener);\n    }\n    _internal_unsubscribe(callback) {\n        const index = this._private__listeners.findIndex((listener)=>callback === listener._internal_callback);\n        if (index > -1) {\n            this._private__listeners.splice(index, 1);\n        }\n    }\n    _internal_unsubscribeAll(linkedObject) {\n        this._private__listeners = this._private__listeners.filter((listener)=>listener._internal_linkedObject !== linkedObject);\n    }\n    _internal_fire(param1, param2, param3) {\n        const listenersSnapshot = [\n            ...this._private__listeners\n        ];\n        this._private__listeners = this._private__listeners.filter((listener)=>!listener._internal_singleshot);\n        listenersSnapshot.forEach((listener)=>listener._internal_callback(param1, param2, param3));\n    }\n    _internal_hasListeners() {\n        return this._private__listeners.length > 0;\n    }\n    _internal_destroy() {\n        this._private__listeners = [];\n    }\n    constructor(){\n        this._private__listeners = [];\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction merge(dst) {\n    for(var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        sources[_key - 1] = arguments[_key];\n    }\n    for (const src of sources){\n        // eslint-disable-next-line no-restricted-syntax\n        for(const i in src){\n            if (src[i] === undefined || !Object.prototype.hasOwnProperty.call(src, i) || [\n                '__proto__',\n                'constructor',\n                'prototype'\n            ].includes(i)) {\n                continue;\n            }\n            if ('object' !== typeof src[i] || dst[i] === undefined || Array.isArray(src[i])) {\n                dst[i] = src[i];\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                merge(dst[i], src[i]);\n            }\n        }\n    }\n    return dst;\n}\nfunction isNumber(value) {\n    return typeof value === 'number' && isFinite(value);\n}\nfunction isInteger(value) {\n    return typeof value === 'number' && value % 1 === 0;\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isBoolean(value) {\n    return typeof value === 'boolean';\n}\nfunction clone(object) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const o = object;\n    if (!o || 'object' !== typeof o) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return o;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let c;\n    if (Array.isArray(o)) {\n        c = [];\n    } else {\n        c = {};\n    }\n    let p;\n    let v;\n    // eslint-disable-next-line no-restricted-syntax\n    for(p in o){\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,no-prototype-builtins\n        if (o.hasOwnProperty(p)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            v = o[p];\n            if (v && 'object' === typeof v) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                c[p] = clone(v);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                c[p] = v;\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return c;\n}\nfunction notNull(t) {\n    return t !== null;\n}\nfunction undefinedIfNull(t) {\n    return t === null ? undefined : t;\n}\n/**\n * Default font family.\n * Must be used to generate font string when font is not specified.\n */ const defaultFontFamily = \"-apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif\";\n/**\n * Generates a font string, which can be used to set in canvas' font property.\n * If no family provided, {@link defaultFontFamily} will be used.\n *\n * @param size - Font size in pixels.\n * @param family - Optional font family.\n * @param style - Optional font style.\n * @returns The font string.\n */ function makeFont(size, family, style) {\n    if (style !== undefined) {\n        style = \"\".concat(style, \" \");\n    } else {\n        style = '';\n    }\n    if (family === undefined) {\n        family = defaultFontFamily;\n    }\n    return \"\".concat(style).concat(size, \"px \").concat(family);\n}\nclass PriceAxisRendererOptionsProvider {\n    _internal_options() {\n        const rendererOptions = this._private__rendererOptions;\n        const currentFontSize = this._private__fontSize();\n        const currentFontFamily = this._private__fontFamily();\n        if (rendererOptions._internal_fontSize !== currentFontSize || rendererOptions._internal_fontFamily !== currentFontFamily) {\n            rendererOptions._internal_fontSize = currentFontSize;\n            rendererOptions._internal_fontFamily = currentFontFamily;\n            rendererOptions._internal_font = makeFont(currentFontSize, currentFontFamily);\n            rendererOptions._internal_paddingTop = 2.5 / 12 * currentFontSize; // 2.5 px for 12px font\n            rendererOptions._internal_paddingBottom = rendererOptions._internal_paddingTop;\n            rendererOptions._internal_paddingInner = currentFontSize / 12 * rendererOptions._internal_tickLength;\n            rendererOptions._internal_paddingOuter = currentFontSize / 12 * rendererOptions._internal_tickLength;\n            rendererOptions._internal_baselineOffset = 0;\n        }\n        rendererOptions._internal_color = this._private__textColor();\n        rendererOptions._internal_paneBackgroundColor = this._private__paneBackgroundColor();\n        return this._private__rendererOptions;\n    }\n    _private__textColor() {\n        return this._private__chartModel._internal_options()['layout'].textColor;\n    }\n    _private__paneBackgroundColor() {\n        return this._private__chartModel._internal_backgroundTopColor();\n    }\n    _private__fontSize() {\n        return this._private__chartModel._internal_options()['layout'].fontSize;\n    }\n    _private__fontFamily() {\n        return this._private__chartModel._internal_options()['layout'].fontFamily;\n    }\n    constructor(chartModel){\n        this._private__rendererOptions = {\n            _internal_borderSize: 1 /* RendererConstants.BorderSize */ ,\n            _internal_tickLength: 5 /* RendererConstants.TickLength */ ,\n            _internal_fontSize: NaN,\n            _internal_font: '',\n            _internal_fontFamily: '',\n            _internal_color: '',\n            _internal_paneBackgroundColor: '',\n            _internal_paddingBottom: 0,\n            _internal_paddingInner: 0,\n            _internal_paddingOuter: 0,\n            _internal_paddingTop: 0,\n            _internal_baselineOffset: 0\n        };\n        this._private__chartModel = chartModel;\n    }\n}\nfunction normalizeRgbComponent(component) {\n    if (component < 0) {\n        return 0;\n    }\n    if (component > 255) {\n        return 255;\n    }\n    // NaN values are treated as 0\n    return Math.round(component) || 0;\n}\nfunction normalizeAlphaComponent(component) {\n    if (component <= 0 || component > 1) {\n        return Math.min(Math.max(component, 0), 1);\n    }\n    // limit the precision of all numbers to at most 4 digits in fractional part\n    return Math.round(component * 10000) / 10000;\n}\nfunction rgbaToGrayscale(rgbValue) {\n    // Originally, the NTSC RGB to YUV formula\n    // perfected by @eugene-korobko's black magic\n    const redComponentGrayscaleWeight = 0.199;\n    const greenComponentGrayscaleWeight = 0.687;\n    const blueComponentGrayscaleWeight = 0.114;\n    return redComponentGrayscaleWeight * rgbValue[0] + greenComponentGrayscaleWeight * rgbValue[1] + blueComponentGrayscaleWeight * rgbValue[2];\n}\n/**\n * For colors which fall within the sRGB space, the browser can\n * be used to convert the color string into a rgb /rgba string.\n *\n * For other colors, it will be returned as specified (i.e. for\n * newer formats like display-p3)\n *\n * See: https://www.w3.org/TR/css-color-4/#serializing-sRGB-values\n */ function getRgbStringViaBrowser(color) {\n    const element = document.createElement('div');\n    element.style.display = 'none';\n    // We append to the body as it is the most reliable way to get a color reading\n    // appending to the chart container or similar element can result in the following\n    // getComputedStyle returning empty strings on each check.\n    document.body.appendChild(element);\n    element.style.color = color;\n    const computed = window.getComputedStyle(element).color;\n    document.body.removeChild(element);\n    return computed;\n}\nclass ColorParser {\n    /**\n     * We fallback to RGBA here since supporting alpha transformations\n     * on wider color gamuts would currently be a lot of extra code\n     * for very little benefit due to actual usage.\n     */ _internal_applyAlpha(color, alpha) {\n        // special case optimization\n        if (color === 'transparent') {\n            return color;\n        }\n        const originRgba = this._private__parseColor(color);\n        const originAlpha = originRgba[3];\n        return \"rgba(\".concat(originRgba[0], \", \").concat(originRgba[1], \", \").concat(originRgba[2], \", \").concat(alpha * originAlpha, \")\");\n    }\n    _internal_generateContrastColors(background) {\n        const rgba = this._private__parseColor(background);\n        return {\n            _internal_background: \"rgb(\".concat(rgba[0], \", \").concat(rgba[1], \", \").concat(rgba[2], \")\"),\n            _internal_foreground: rgbaToGrayscale(rgba) > 160 ? 'black' : 'white'\n        };\n    }\n    _internal_colorStringToGrayscale(background) {\n        return rgbaToGrayscale(this._private__parseColor(background));\n    }\n    _internal_gradientColorAtPercent(topColor, bottomColor, percent) {\n        const [topR, topG, topB, topA] = this._private__parseColor(topColor);\n        const [bottomR, bottomG, bottomB, bottomA] = this._private__parseColor(bottomColor);\n        const resultRgba = [\n            normalizeRgbComponent(topR + percent * (bottomR - topR)),\n            normalizeRgbComponent(topG + percent * (bottomG - topG)),\n            normalizeRgbComponent(topB + percent * (bottomB - topB)),\n            normalizeAlphaComponent(topA + percent * (bottomA - topA))\n        ];\n        return \"rgba(\".concat(resultRgba[0], \", \").concat(resultRgba[1], \", \").concat(resultRgba[2], \", \").concat(resultRgba[3], \")\");\n    }\n    _private__parseColor(color) {\n        const cached = this._private__rgbaCache.get(color);\n        if (cached) {\n            return cached;\n        }\n        const computed = getRgbStringViaBrowser(color);\n        const match = computed.match(/^rgba?\\s*\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d*\\.?\\d+))?\\)$/);\n        if (!match) {\n            if (this._private__customParsers.length) {\n                for (const parser of this._private__customParsers){\n                    const result = parser(color);\n                    if (result) {\n                        this._private__rgbaCache.set(color, result);\n                        return result;\n                    }\n                }\n            }\n            throw new Error(\"Failed to parse color: \".concat(color));\n        }\n        const rgba = [\n            parseInt(match[1], 10),\n            parseInt(match[2], 10),\n            parseInt(match[3], 10),\n            match[4] ? parseFloat(match[4]) : 1\n        ];\n        this._private__rgbaCache.set(color, rgba);\n        return rgba;\n    }\n    constructor(customParsers, initialCache){\n        this._private__rgbaCache = new Map();\n        this._private__customParsers = customParsers;\n        if (initialCache) {\n            this._private__rgbaCache = initialCache;\n        }\n    }\n}\nclass CompositeRenderer {\n    _internal_setRenderers(renderers) {\n        this._private__renderers = renderers;\n    }\n    _internal_draw(target, isHovered, hitTestData) {\n        this._private__renderers.forEach((r)=>{\n            r._internal_draw(target, isHovered, hitTestData);\n        });\n    }\n    constructor(){\n        this._private__renderers = [];\n    }\n}\nclass BitmapCoordinatesPaneRenderer {\n    _internal_draw(target, isHovered, hitTestData) {\n        target.useBitmapCoordinateSpace((scope)=>this._internal__drawImpl(scope, isHovered, hitTestData));\n    }\n}\nclass PaneRendererMarks extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._internal__data = data;\n    }\n    _internal__drawImpl(param) {\n        let { context: ctx, horizontalPixelRatio, verticalPixelRatio } = param;\n        if (this._internal__data === null || this._internal__data._internal_visibleRange === null) {\n            return;\n        }\n        const visibleRange = this._internal__data._internal_visibleRange;\n        const data = this._internal__data;\n        const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n        const correction = tickWidth % 2 / 2;\n        const draw = (radiusMedia)=>{\n            ctx.beginPath();\n            for(let i = visibleRange.to - 1; i >= visibleRange.from; --i){\n                const point = data._internal_items[i];\n                const centerX = Math.round(point._internal_x * horizontalPixelRatio) + correction; // correct x coordinate only\n                const centerY = point._internal_y * verticalPixelRatio;\n                const radius = radiusMedia * verticalPixelRatio + correction;\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n            }\n            ctx.fill();\n        };\n        if (data._internal_lineWidth > 0) {\n            ctx.fillStyle = data._internal_backColor;\n            draw(data._internal_radius + data._internal_lineWidth);\n        }\n        ctx.fillStyle = data._internal_lineColor;\n        draw(data._internal_radius);\n    }\n    constructor(){\n        super(...arguments);\n        this._internal__data = null;\n    }\n}\nfunction createEmptyMarkerData() {\n    return {\n        _internal_items: [\n            {\n                _internal_x: 0,\n                _internal_y: 0,\n                _internal_time: 0,\n                _internal_price: 0\n            }\n        ],\n        _internal_lineColor: '',\n        _internal_backColor: '',\n        _internal_radius: 0,\n        _internal_lineWidth: 0,\n        _internal_visibleRange: null\n    };\n}\nconst rangeForSinglePoint = {\n    from: 0,\n    to: 1\n};\nclass CrosshairMarksPaneView {\n    _internal_update(updateType) {\n        this._private__createMarkerRenderersIfNeeded();\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n        }\n        return this._private__compositeRenderer;\n    }\n    _private__createMarkerRenderersIfNeeded() {\n        const serieses = this._private__pane._internal_orderedSources();\n        if (serieses.length !== this._private__markersRenderers.length) {\n            this._private__markersData = serieses.map(createEmptyMarkerData);\n            this._private__markersRenderers = this._private__markersData.map((data)=>{\n                const res = new PaneRendererMarks();\n                res._internal_setData(data);\n                return res;\n            });\n            this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);\n        }\n    }\n    _private__updateImpl() {\n        const forceHidden = this._private__crosshair._internal_options().mode === 2 /* CrosshairMode.Hidden */  || !this._private__crosshair._internal_visible();\n        const serieses = this._private__pane._internal_orderedSeries();\n        const timePointIndex = this._private__crosshair._internal_appliedIndex();\n        const timeScale = this._private__chartModel._internal_timeScale();\n        this._private__createMarkerRenderersIfNeeded();\n        serieses.forEach((s, index)=>{\n            const data = this._private__markersData[index];\n            const seriesData = s._internal_markerDataAtIndex(timePointIndex);\n            const firstValue = s._internal_firstValue();\n            if (forceHidden || seriesData === null || !s._internal_visible() || firstValue === null) {\n                data._internal_visibleRange = null;\n                return;\n            }\n            data._internal_lineColor = seriesData._internal_backgroundColor;\n            data._internal_radius = seriesData._internal_radius;\n            data._internal_lineWidth = seriesData._internal_borderWidth;\n            data._internal_items[0]._internal_price = seriesData._internal_price;\n            data._internal_items[0]._internal_y = s._internal_priceScale()._internal_priceToCoordinate(seriesData._internal_price, firstValue._internal_value);\n            var _seriesData__internal_borderColor;\n            data._internal_backColor = (_seriesData__internal_borderColor = seriesData._internal_borderColor) !== null && _seriesData__internal_borderColor !== void 0 ? _seriesData__internal_borderColor : this._private__chartModel._internal_backgroundColorAtYPercentFromTop(data._internal_items[0]._internal_y / s._internal_priceScale()._internal_height());\n            data._internal_items[0]._internal_time = timePointIndex;\n            data._internal_items[0]._internal_x = timeScale._internal_indexToCoordinate(timePointIndex);\n            data._internal_visibleRange = rangeForSinglePoint;\n        });\n    }\n    constructor(chartModel, crosshair, pane){\n        this._private__compositeRenderer = new CompositeRenderer();\n        this._private__markersRenderers = [];\n        this._private__markersData = [];\n        this._private__invalidated = true;\n        this._private__chartModel = chartModel;\n        this._private__crosshair = crosshair;\n        this._private__pane = pane;\n        this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);\n    }\n}\nclass CrosshairRenderer extends BitmapCoordinatesPaneRenderer {\n    _internal__drawImpl(param) {\n        let { context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio } = param;\n        if (this._private__data === null) {\n            return;\n        }\n        const vertLinesVisible = this._private__data._internal_vertLine._internal_visible;\n        const horzLinesVisible = this._private__data._internal_horzLine._internal_visible;\n        if (!vertLinesVisible && !horzLinesVisible) {\n            return;\n        }\n        const x = Math.round(this._private__data._internal_x * horizontalPixelRatio);\n        const y = Math.round(this._private__data._internal_y * verticalPixelRatio);\n        ctx.lineCap = 'butt';\n        if (vertLinesVisible && x >= 0) {\n            ctx.lineWidth = Math.floor(this._private__data._internal_vertLine._internal_lineWidth * horizontalPixelRatio);\n            ctx.strokeStyle = this._private__data._internal_vertLine._internal_color;\n            ctx.fillStyle = this._private__data._internal_vertLine._internal_color;\n            setLineStyle(ctx, this._private__data._internal_vertLine._internal_lineStyle);\n            drawVerticalLine(ctx, x, 0, bitmapSize.height);\n        }\n        if (horzLinesVisible && y >= 0) {\n            ctx.lineWidth = Math.floor(this._private__data._internal_horzLine._internal_lineWidth * verticalPixelRatio);\n            ctx.strokeStyle = this._private__data._internal_horzLine._internal_color;\n            ctx.fillStyle = this._private__data._internal_horzLine._internal_color;\n            setLineStyle(ctx, this._private__data._internal_horzLine._internal_lineStyle);\n            drawHorizontalLine(ctx, y, 0, bitmapSize.width);\n        }\n    }\n    constructor(data){\n        super();\n        this._private__data = data;\n    }\n}\nclass CrosshairPaneView {\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer(pane) {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n        }\n        return this._private__renderer;\n    }\n    _private__updateImpl() {\n        const visible = this._private__source._internal_visible();\n        const crosshairOptions = this._private__pane._internal_model()._internal_options().crosshair;\n        const data = this._private__rendererData;\n        if (crosshairOptions.mode === 2 /* CrosshairMode.Hidden */ ) {\n            data._internal_horzLine._internal_visible = false;\n            data._internal_vertLine._internal_visible = false;\n            return;\n        }\n        data._internal_horzLine._internal_visible = visible && this._private__source._internal_horzLineVisible(this._private__pane);\n        data._internal_vertLine._internal_visible = visible && this._private__source._internal_vertLineVisible();\n        data._internal_horzLine._internal_lineWidth = crosshairOptions.horzLine.width;\n        data._internal_horzLine._internal_lineStyle = crosshairOptions.horzLine.style;\n        data._internal_horzLine._internal_color = crosshairOptions.horzLine.color;\n        data._internal_vertLine._internal_lineWidth = crosshairOptions.vertLine.width;\n        data._internal_vertLine._internal_lineStyle = crosshairOptions.vertLine.style;\n        data._internal_vertLine._internal_color = crosshairOptions.vertLine.color;\n        data._internal_x = this._private__source._internal_appliedX();\n        data._internal_y = this._private__source._internal_appliedY();\n    }\n    constructor(source, pane){\n        this._private__invalidated = true;\n        this._private__rendererData = {\n            _internal_vertLine: {\n                _internal_lineWidth: 1,\n                _internal_lineStyle: 0,\n                _internal_color: '',\n                _internal_visible: false\n            },\n            _internal_horzLine: {\n                _internal_lineWidth: 1,\n                _internal_lineStyle: 0,\n                _internal_color: '',\n                _internal_visible: false\n            },\n            _internal_x: 0,\n            _internal_y: 0\n        };\n        this._private__renderer = new CrosshairRenderer(this._private__rendererData);\n        this._private__source = source;\n        this._private__pane = pane;\n    }\n}\n/**\n * Fills rectangle's inner border (so, all the filled area is limited by the [x, x + width]*[y, y + height] region)\n * ```\n * (x, y)\n * O***********************|*****\n * |        border         |  ^\n * |   *****************   |  |\n * |   |               |   |  |\n * | b |               | b |  h\n * | o |               | o |  e\n * | r |               | r |  i\n * | d |               | d |  g\n * | e |               | e |  h\n * | r |               | r |  t\n * |   |               |   |  |\n * |   *****************   |  |\n * |        border         |  v\n * |***********************|*****\n * |                       |\n * |<------- width ------->|\n * ```\n *\n * @param ctx - Context to draw on\n * @param x - Left side of the target rectangle\n * @param y - Top side of the target rectangle\n * @param width - Width of the target rectangle\n * @param height - Height of the target rectangle\n * @param borderWidth - Width of border to fill, must be less than width and height of the target rectangle\n */ function fillRectInnerBorder(ctx, x, y, width, height, borderWidth) {\n    // horizontal (top and bottom) edges\n    ctx.fillRect(x + borderWidth, y, width - borderWidth * 2, borderWidth);\n    ctx.fillRect(x + borderWidth, y + height - borderWidth, width - borderWidth * 2, borderWidth);\n    // vertical (left and right) edges\n    ctx.fillRect(x, y, borderWidth, height);\n    ctx.fillRect(x + width - borderWidth, y, borderWidth, height);\n}\nfunction clearRect(ctx, x, y, w, h, clearColor) {\n    ctx.save();\n    ctx.globalCompositeOperation = 'copy';\n    ctx.fillStyle = clearColor;\n    ctx.fillRect(x, y, w, h);\n    ctx.restore();\n}\nfunction changeBorderRadius(borderRadius, offset) {\n    return borderRadius.map((x)=>x === 0 ? x : x + offset);\n}\nfunction drawRoundRect(// eslint:disable-next-line:max-params\nctx, x, y, w, h, radii) {\n    /**\n     * As of May 2023, all of the major browsers now support ctx.roundRect() so we should\n     * be able to switch to the native version soon.\n     */ ctx.beginPath();\n    if (ctx.roundRect) {\n        ctx.roundRect(x, y, w, h, radii);\n        return;\n    }\n    /*\n     * Deprecate the rest in v5.\n     */ ctx.lineTo(x + w - radii[1], y);\n    if (radii[1] !== 0) {\n        ctx.arcTo(x + w, y, x + w, y + radii[1], radii[1]);\n    }\n    ctx.lineTo(x + w, y + h - radii[2]);\n    if (radii[2] !== 0) {\n        ctx.arcTo(x + w, y + h, x + w - radii[2], y + h, radii[2]);\n    }\n    ctx.lineTo(x + radii[3], y + h);\n    if (radii[3] !== 0) {\n        ctx.arcTo(x, y + h, x, y + h - radii[3], radii[3]);\n    }\n    ctx.lineTo(x, y + radii[0]);\n    if (radii[0] !== 0) {\n        ctx.arcTo(x, y, x + radii[0], y, radii[0]);\n    }\n}\n/**\n * Draws a rounded rect with a border.\n *\n * This function assumes that the colors will be solid, without\n * any alpha. (This allows us to fix a rendering artefact.)\n *\n * @param outerBorderRadius - The radius of the border (outer edge)\n */ // eslint-disable-next-line max-params\nfunction drawRoundRectWithBorder(ctx, left, top, width, height, backgroundColor) {\n    let borderWidth = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : 0, outerBorderRadius = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : [\n        0,\n        0,\n        0,\n        0\n    ], borderColor = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : '';\n    ctx.save();\n    if (!borderWidth || !borderColor || borderColor === backgroundColor) {\n        drawRoundRect(ctx, left, top, width, height, outerBorderRadius);\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n        return;\n    }\n    const halfBorderWidth = borderWidth / 2;\n    const radii = changeBorderRadius(outerBorderRadius, -halfBorderWidth);\n    drawRoundRect(ctx, left + halfBorderWidth, top + halfBorderWidth, width - borderWidth, height - borderWidth, radii);\n    if (backgroundColor !== 'transparent') {\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n    }\n    if (borderColor !== 'transparent') {\n        ctx.lineWidth = borderWidth;\n        ctx.strokeStyle = borderColor;\n        ctx.closePath();\n        ctx.stroke();\n    }\n    ctx.restore();\n}\n// eslint-disable-next-line max-params\nfunction clearRectWithGradient(ctx, x, y, w, h, topColor, bottomColor) {\n    ctx.save();\n    ctx.globalCompositeOperation = 'copy';\n    const gradient = ctx.createLinearGradient(0, 0, 0, h);\n    gradient.addColorStop(0, topColor);\n    gradient.addColorStop(1, bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(x, y, w, h);\n    ctx.restore();\n}\nclass PriceAxisViewRenderer {\n    _internal_setData(data, commonData) {\n        this._private__data = data;\n        this._private__commonData = commonData;\n    }\n    _internal_height(rendererOptions, useSecondLine) {\n        if (!this._private__data._internal_visible) {\n            return 0;\n        }\n        return rendererOptions._internal_fontSize + rendererOptions._internal_paddingTop + rendererOptions._internal_paddingBottom;\n    }\n    _internal_draw(target, rendererOptions, textWidthCache, align) {\n        if (!this._private__data._internal_visible || this._private__data._internal_text.length === 0) {\n            return;\n        }\n        const textColor = this._private__data._internal_color;\n        const backgroundColor = this._private__commonData._internal_background;\n        const geometry = target.useBitmapCoordinateSpace({\n            \"useBitmapCoordinateSpace[geometry]\": (scope)=>{\n                const ctx = scope.context;\n                ctx.font = rendererOptions._internal_font;\n                const geom = this._private__calculateGeometry(scope, rendererOptions, textWidthCache, align);\n                const gb = geom._internal_bitmap;\n                /*\n             draw label. backgroundColor will always be a solid color (no alpha) [see generateContrastColors in color.ts].\n             Therefore we can draw the rounded label using simplified code (drawRoundRectWithBorder) that doesn't need to ensure the background and the border don't overlap.\n            */ if (geom._internal_alignRight) {\n                    drawRoundRectWithBorder(ctx, gb._internal_xOutside, gb._internal_yTop, gb._internal_totalWidth, gb._internal_totalHeight, backgroundColor, gb._internal_horzBorder, [\n                        gb._internal_radius,\n                        0,\n                        0,\n                        gb._internal_radius\n                    ], backgroundColor);\n                } else {\n                    drawRoundRectWithBorder(ctx, gb._internal_xInside, gb._internal_yTop, gb._internal_totalWidth, gb._internal_totalHeight, backgroundColor, gb._internal_horzBorder, [\n                        0,\n                        gb._internal_radius,\n                        gb._internal_radius,\n                        0\n                    ], backgroundColor);\n                }\n                // draw tick\n                if (this._private__data._internal_tickVisible) {\n                    ctx.fillStyle = textColor;\n                    ctx.fillRect(gb._internal_xInside, gb._internal_yMid, gb._internal_xTick - gb._internal_xInside, gb._internal_tickHeight);\n                }\n                // draw separator\n                if (this._private__data._internal_borderVisible) {\n                    ctx.fillStyle = rendererOptions._internal_paneBackgroundColor;\n                    ctx.fillRect(geom._internal_alignRight ? gb._internal_right - gb._internal_horzBorder : 0, gb._internal_yTop, gb._internal_horzBorder, gb._internal_yBottom - gb._internal_yTop);\n                }\n                return geom;\n            }\n        }[\"useBitmapCoordinateSpace[geometry]\"]);\n        target.useMediaCoordinateSpace((param)=>{\n            let { context: ctx } = param;\n            const gm = geometry._internal_media;\n            ctx.font = rendererOptions._internal_font;\n            ctx.textAlign = geometry._internal_alignRight ? 'right' : 'left';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = textColor;\n            ctx.fillText(this._private__data._internal_text, gm._internal_xText, (gm._internal_yTop + gm._internal_yBottom) / 2 + gm._internal_textMidCorrection);\n        });\n    }\n    _private__calculateGeometry(scope, rendererOptions, textWidthCache, align) {\n        const { context: ctx, bitmapSize, mediaSize, horizontalPixelRatio, verticalPixelRatio } = scope;\n        const tickSize = this._private__data._internal_tickVisible || !this._private__data._internal_moveTextToInvisibleTick ? rendererOptions._internal_tickLength : 0;\n        const horzBorder = this._private__data._internal_separatorVisible ? rendererOptions._internal_borderSize : 0;\n        const paddingTop = rendererOptions._internal_paddingTop + this._private__commonData._internal_additionalPaddingTop;\n        const paddingBottom = rendererOptions._internal_paddingBottom + this._private__commonData._internal_additionalPaddingBottom;\n        const paddingInner = rendererOptions._internal_paddingInner;\n        const paddingOuter = rendererOptions._internal_paddingOuter;\n        const text = this._private__data._internal_text;\n        const actualTextHeight = rendererOptions._internal_fontSize;\n        const textMidCorrection = textWidthCache._internal_yMidCorrection(ctx, text);\n        const textWidth = Math.ceil(textWidthCache._internal_measureText(ctx, text));\n        const totalHeight = actualTextHeight + paddingTop + paddingBottom;\n        const totalWidth = rendererOptions._internal_borderSize + paddingInner + paddingOuter + textWidth + tickSize;\n        const tickHeightBitmap = Math.max(1, Math.floor(verticalPixelRatio));\n        let totalHeightBitmap = Math.round(totalHeight * verticalPixelRatio);\n        if (totalHeightBitmap % 2 !== tickHeightBitmap % 2) {\n            totalHeightBitmap += 1;\n        }\n        const horzBorderBitmap = horzBorder > 0 ? Math.max(1, Math.floor(horzBorder * horizontalPixelRatio)) : 0;\n        const totalWidthBitmap = Math.round(totalWidth * horizontalPixelRatio);\n        // tick overlaps scale border\n        const tickSizeBitmap = Math.round(tickSize * horizontalPixelRatio);\n        var _this__private__commonData__internal_fixedCoordinate;\n        const yMid = (_this__private__commonData__internal_fixedCoordinate = this._private__commonData._internal_fixedCoordinate) !== null && _this__private__commonData__internal_fixedCoordinate !== void 0 ? _this__private__commonData__internal_fixedCoordinate : this._private__commonData._internal_coordinate;\n        const yMidBitmap = Math.round(yMid * verticalPixelRatio) - Math.floor(verticalPixelRatio * 0.5);\n        const yTopBitmap = Math.floor(yMidBitmap + tickHeightBitmap / 2 - totalHeightBitmap / 2);\n        const yBottomBitmap = yTopBitmap + totalHeightBitmap;\n        const alignRight = align === 'right';\n        const xInside = alignRight ? mediaSize.width - horzBorder : horzBorder;\n        const xInsideBitmap = alignRight ? bitmapSize.width - horzBorderBitmap : horzBorderBitmap;\n        let xOutsideBitmap;\n        let xTickBitmap;\n        let xText;\n        if (alignRight) {\n            // 2               1\n            //\n            //              6  5\n            //\n            // 3               4\n            xOutsideBitmap = xInsideBitmap - totalWidthBitmap;\n            xTickBitmap = xInsideBitmap - tickSizeBitmap;\n            xText = xInside - tickSize - paddingInner - horzBorder;\n        } else {\n            // 1               2\n            //\n            // 6  5\n            //\n            // 4               3\n            xOutsideBitmap = xInsideBitmap + totalWidthBitmap;\n            xTickBitmap = xInsideBitmap + tickSizeBitmap;\n            xText = xInside + tickSize + paddingInner;\n        }\n        return {\n            _internal_alignRight: alignRight,\n            _internal_bitmap: {\n                _internal_yTop: yTopBitmap,\n                _internal_yMid: yMidBitmap,\n                _internal_yBottom: yBottomBitmap,\n                _internal_totalWidth: totalWidthBitmap,\n                _internal_totalHeight: totalHeightBitmap,\n                // TODO: it is better to have different horizontal and vertical radii\n                _internal_radius: 2 * horizontalPixelRatio,\n                _internal_horzBorder: horzBorderBitmap,\n                _internal_xOutside: xOutsideBitmap,\n                _internal_xInside: xInsideBitmap,\n                _internal_xTick: xTickBitmap,\n                _internal_tickHeight: tickHeightBitmap,\n                _internal_right: bitmapSize.width\n            },\n            _internal_media: {\n                _internal_yTop: yTopBitmap / verticalPixelRatio,\n                _internal_yBottom: yBottomBitmap / verticalPixelRatio,\n                _internal_xText: xText,\n                _internal_textMidCorrection: textMidCorrection\n            }\n        };\n    }\n    constructor(data, commonData){\n        this._internal_setData(data, commonData);\n    }\n}\nclass PriceAxisView {\n    _internal_text() {\n        this._private__updateRendererDataIfNeeded();\n        return this._private__axisRendererData._internal_text;\n    }\n    _internal_coordinate() {\n        this._private__updateRendererDataIfNeeded();\n        return this._private__commonRendererData._internal_coordinate;\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_height(rendererOptions) {\n        let useSecondLine = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        return Math.max(this._private__axisRenderer._internal_height(rendererOptions, useSecondLine), this._private__paneRenderer._internal_height(rendererOptions, useSecondLine));\n    }\n    _internal_getFixedCoordinate() {\n        return this._private__commonRendererData._internal_fixedCoordinate || 0;\n    }\n    _internal_setFixedCoordinate(value) {\n        this._private__commonRendererData._internal_fixedCoordinate = value;\n    }\n    _internal_isVisible() {\n        this._private__updateRendererDataIfNeeded();\n        return this._private__axisRendererData._internal_visible || this._private__paneRendererData._internal_visible;\n    }\n    _internal_isAxisLabelVisible() {\n        this._private__updateRendererDataIfNeeded();\n        return this._private__axisRendererData._internal_visible;\n    }\n    _internal_renderer(priceScale) {\n        this._private__updateRendererDataIfNeeded();\n        // force update tickVisible state from price scale options\n        // because we don't have and we can't have price axis in other methods\n        // (like paneRenderer or any other who call _updateRendererDataIfNeeded)\n        this._private__axisRendererData._internal_tickVisible = this._private__axisRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;\n        this._private__paneRendererData._internal_tickVisible = this._private__paneRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;\n        this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);\n        this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);\n        return this._private__axisRenderer;\n    }\n    _internal_paneRenderer() {\n        this._private__updateRendererDataIfNeeded();\n        this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);\n        this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);\n        return this._private__paneRenderer;\n    }\n    _private__updateRendererDataIfNeeded() {\n        if (this._private__invalidated) {\n            this._private__axisRendererData._internal_tickVisible = true;\n            this._private__paneRendererData._internal_tickVisible = false;\n            this._internal__updateRendererData(this._private__axisRendererData, this._private__paneRendererData, this._private__commonRendererData);\n        }\n    }\n    constructor(ctor){\n        this._private__commonRendererData = {\n            _internal_coordinate: 0,\n            _internal_background: '#000',\n            _internal_additionalPaddingBottom: 0,\n            _internal_additionalPaddingTop: 0\n        };\n        this._private__axisRendererData = {\n            _internal_text: '',\n            _internal_visible: false,\n            _internal_tickVisible: true,\n            _internal_moveTextToInvisibleTick: false,\n            _internal_borderColor: '',\n            _internal_color: '#FFF',\n            _internal_borderVisible: false,\n            _internal_separatorVisible: false\n        };\n        this._private__paneRendererData = {\n            _internal_text: '',\n            _internal_visible: false,\n            _internal_tickVisible: false,\n            _internal_moveTextToInvisibleTick: true,\n            _internal_borderColor: '',\n            _internal_color: '#FFF',\n            _internal_borderVisible: true,\n            _internal_separatorVisible: true\n        };\n        this._private__invalidated = true;\n        this._private__axisRenderer = new (ctor || PriceAxisViewRenderer)(this._private__axisRendererData, this._private__commonRendererData);\n        this._private__paneRenderer = new (ctor || PriceAxisViewRenderer)(this._private__paneRendererData, this._private__commonRendererData);\n    }\n}\nclass CrosshairPriceAxisView extends PriceAxisView {\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\n        axisRendererData._internal_visible = false;\n        if (this._private__source._internal_options().mode === 2 /* CrosshairMode.Hidden */ ) {\n            return;\n        }\n        const options = this._private__source._internal_options().horzLine;\n        if (!options.labelVisible) {\n            return;\n        }\n        const firstValue = this._private__priceScale._internal_firstValue();\n        if (!this._private__source._internal_visible() || this._private__priceScale._internal_isEmpty() || firstValue === null) {\n            return;\n        }\n        const colors = this._private__priceScale._internal_colorParser()._internal_generateContrastColors(options.labelBackgroundColor);\n        commonRendererData._internal_background = colors._internal_background;\n        axisRendererData._internal_color = colors._internal_foreground;\n        const additionalPadding = 2 / 12 * this._private__priceScale._internal_fontSize();\n        commonRendererData._internal_additionalPaddingTop = additionalPadding;\n        commonRendererData._internal_additionalPaddingBottom = additionalPadding;\n        const value = this._private__valueProvider(this._private__priceScale);\n        commonRendererData._internal_coordinate = value._internal_coordinate;\n        axisRendererData._internal_text = this._private__priceScale._internal_formatPrice(value._internal_price, firstValue);\n        axisRendererData._internal_visible = true;\n    }\n    constructor(source, priceScale, valueProvider){\n        super();\n        this._private__source = source;\n        this._private__priceScale = priceScale;\n        this._private__valueProvider = valueProvider;\n    }\n}\nconst optimizationReplacementRe = /[1-9]/g;\nconst radius$1 = 2;\nclass TimeAxisViewRenderer {\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal_draw(target, rendererOptions) {\n        if (this._private__data === null || this._private__data._internal_visible === false || this._private__data._internal_text.length === 0) {\n            return;\n        }\n        const textWidth = target.useMediaCoordinateSpace({\n            \"useMediaCoordinateSpace[textWidth]\": (param)=>{\n                let { context: ctx } = param;\n                ctx.font = rendererOptions._internal_font;\n                return Math.round(rendererOptions._internal_widthCache._internal_measureText(ctx, ensureNotNull(this._private__data)._internal_text, optimizationReplacementRe));\n            }\n        }[\"useMediaCoordinateSpace[textWidth]\"]);\n        if (textWidth <= 0) {\n            return;\n        }\n        const horzMargin = rendererOptions._internal_paddingHorizontal;\n        const labelWidth = textWidth + 2 * horzMargin;\n        const labelWidthHalf = labelWidth / 2;\n        const timeScaleWidth = this._private__data._internal_width;\n        let coordinate = this._private__data._internal_coordinate;\n        let x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\n        if (x1 < 0) {\n            coordinate = coordinate + Math.abs(0 - x1);\n            x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\n        } else if (x1 + labelWidth > timeScaleWidth) {\n            coordinate = coordinate - Math.abs(timeScaleWidth - (x1 + labelWidth));\n            x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\n        }\n        const x2 = x1 + labelWidth;\n        const y1 = 0;\n        const y2 = Math.ceil(y1 + rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_paddingTop + rendererOptions._internal_fontSize + rendererOptions._internal_paddingBottom);\n        target.useBitmapCoordinateSpace((param)=>{\n            let { context: ctx, horizontalPixelRatio, verticalPixelRatio } = param;\n            const data = ensureNotNull(this._private__data);\n            ctx.fillStyle = data._internal_background;\n            const x1scaled = Math.round(x1 * horizontalPixelRatio);\n            const y1scaled = Math.round(y1 * verticalPixelRatio);\n            const x2scaled = Math.round(x2 * horizontalPixelRatio);\n            const y2scaled = Math.round(y2 * verticalPixelRatio);\n            const radiusScaled = Math.round(radius$1 * horizontalPixelRatio);\n            ctx.beginPath();\n            ctx.moveTo(x1scaled, y1scaled);\n            ctx.lineTo(x1scaled, y2scaled - radiusScaled);\n            ctx.arcTo(x1scaled, y2scaled, x1scaled + radiusScaled, y2scaled, radiusScaled);\n            ctx.lineTo(x2scaled - radiusScaled, y2scaled);\n            ctx.arcTo(x2scaled, y2scaled, x2scaled, y2scaled - radiusScaled, radiusScaled);\n            ctx.lineTo(x2scaled, y1scaled);\n            ctx.fill();\n            if (data._internal_tickVisible) {\n                const tickX = Math.round(data._internal_coordinate * horizontalPixelRatio);\n                const tickTop = y1scaled;\n                const tickBottom = Math.round((tickTop + rendererOptions._internal_tickLength) * verticalPixelRatio);\n                ctx.fillStyle = data._internal_color;\n                const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n                const tickOffset = Math.floor(horizontalPixelRatio * 0.5);\n                ctx.fillRect(tickX - tickOffset, tickTop, tickWidth, tickBottom - tickTop);\n            }\n        });\n        target.useMediaCoordinateSpace((param)=>{\n            let { context: ctx } = param;\n            const data = ensureNotNull(this._private__data);\n            const yText = y1 + rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_paddingTop + rendererOptions._internal_fontSize / 2;\n            ctx.font = rendererOptions._internal_font;\n            ctx.textAlign = 'left';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = data._internal_color;\n            const textYCorrection = rendererOptions._internal_widthCache._internal_yMidCorrection(ctx, 'Apr0');\n            ctx.translate(x1 + horzMargin, yText + textYCorrection);\n            ctx.fillText(data._internal_text, 0, 0);\n        });\n    }\n    constructor(){\n        this._private__data = null;\n    }\n}\nclass CrosshairTimeAxisView {\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n        }\n        this._private__renderer._internal_setData(this._private__rendererData);\n        return this._private__renderer;\n    }\n    _private__updateImpl() {\n        const data = this._private__rendererData;\n        data._internal_visible = false;\n        if (this._private__crosshair._internal_options().mode === 2 /* CrosshairMode.Hidden */ ) {\n            return;\n        }\n        const options = this._private__crosshair._internal_options().vertLine;\n        if (!options.labelVisible) {\n            return;\n        }\n        const timeScale = this._private__model._internal_timeScale();\n        if (timeScale._internal_isEmpty()) {\n            return;\n        }\n        data._internal_width = timeScale._internal_width();\n        const value = this._private__valueProvider();\n        if (value === null) {\n            return;\n        }\n        data._internal_coordinate = value._internal_coordinate;\n        const currentTime = timeScale._internal_indexToTimeScalePoint(this._private__crosshair._internal_appliedIndex());\n        data._internal_text = timeScale._internal_formatDateTime(ensureNotNull(currentTime));\n        data._internal_visible = true;\n        const colors = this._private__model._internal_colorParser()._internal_generateContrastColors(options.labelBackgroundColor);\n        data._internal_background = colors._internal_background;\n        data._internal_color = colors._internal_foreground;\n        data._internal_tickVisible = timeScale._internal_options().ticksVisible;\n    }\n    constructor(crosshair, model, valueProvider){\n        this._private__invalidated = true;\n        this._private__renderer = new TimeAxisViewRenderer();\n        this._private__rendererData = {\n            _internal_visible: false,\n            _internal_background: '#4c525e',\n            _internal_color: 'white',\n            _internal_text: '',\n            _internal_width: 0,\n            _internal_coordinate: NaN,\n            _internal_tickVisible: true\n        };\n        this._private__crosshair = crosshair;\n        this._private__model = model;\n        this._private__valueProvider = valueProvider;\n    }\n}\nclass DataSource {\n    _internal_zorder() {\n        return this._private__zorder;\n    }\n    _internal_setZorder(zorder) {\n        this._private__zorder = zorder;\n    }\n    _internal_priceScale() {\n        return this._internal__priceScale;\n    }\n    _internal_setPriceScale(priceScale) {\n        this._internal__priceScale = priceScale;\n    }\n    _internal_labelPaneViews(pane) {\n        return [];\n    }\n    _internal_timeAxisViews() {\n        return [];\n    }\n    _internal_visible() {\n        return true;\n    }\n    constructor(){\n        this._internal__priceScale = null;\n        this._private__zorder = 0;\n    }\n}\n/**\n * Represents the crosshair mode.\n */ var CrosshairMode;\n(function(CrosshairMode) {\n    /**\n     * This mode allows crosshair to move freely on the chart.\n     */ CrosshairMode[CrosshairMode[\"Normal\"] = 0] = \"Normal\";\n    /**\n     * This mode sticks crosshair's horizontal line to the price value of a single-value series or to the close price of OHLC-based series.\n     */ CrosshairMode[CrosshairMode[\"Magnet\"] = 1] = \"Magnet\";\n    /**\n     * This mode disables rendering of the crosshair.\n     */ CrosshairMode[CrosshairMode[\"Hidden\"] = 2] = \"Hidden\";\n    /**\n     * This mode sticks crosshair's horizontal line to the price value of a single-value series or to the open/high/low/close price of OHLC-based series.\n     */ CrosshairMode[CrosshairMode[\"MagnetOHLC\"] = 3] = \"MagnetOHLC\";\n})(CrosshairMode || (CrosshairMode = {}));\nclass Crosshair extends DataSource {\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_saveOriginCoord(x, y) {\n        this._private__originX = x;\n        this._private__originY = y;\n    }\n    _internal_clearOriginCoord() {\n        this._private__originX = NaN;\n        this._private__originY = NaN;\n    }\n    _internal_originCoordX() {\n        return this._private__originX;\n    }\n    _internal_originCoordY() {\n        return this._private__originY;\n    }\n    _internal_setPosition(index, price, pane) {\n        if (!this._private__subscribed) {\n            this._private__subscribed = true;\n        }\n        this._private__visible = true;\n        this._private__tryToUpdateViews(index, price, pane);\n    }\n    _internal_appliedIndex() {\n        return this._private__index;\n    }\n    _internal_appliedX() {\n        return this._private__x;\n    }\n    _internal_appliedY() {\n        return this._private__y;\n    }\n    _internal_visible() {\n        return this._private__visible;\n    }\n    _internal_clearPosition() {\n        this._private__visible = false;\n        this._private__setIndexToLastSeriesBarIndex();\n        this._private__price = NaN;\n        this._private__x = NaN;\n        this._private__y = NaN;\n        this._private__pane = null;\n        this._internal_clearOriginCoord();\n        this._internal_updateAllViews();\n    }\n    _internal_paneViews(pane) {\n        let crosshairPaneView = this._private__crosshairPaneViewCache.get(pane);\n        if (!crosshairPaneView) {\n            crosshairPaneView = new CrosshairPaneView(this, pane);\n            this._private__crosshairPaneViewCache.set(pane, crosshairPaneView);\n        }\n        let markersPaneView = this._private__markersPaneViewCache.get(pane);\n        if (!markersPaneView) {\n            markersPaneView = new CrosshairMarksPaneView(this._private__model, this, pane);\n            this._private__markersPaneViewCache.set(pane, markersPaneView);\n        }\n        return [\n            crosshairPaneView,\n            markersPaneView\n        ];\n    }\n    _internal_horzLineVisible(pane) {\n        return pane === this._private__pane && this._private__options.horzLine.visible;\n    }\n    _internal_vertLineVisible() {\n        return this._private__options.vertLine.visible;\n    }\n    _internal_priceAxisViews(pane, priceScale) {\n        if (!this._private__visible || this._private__pane !== pane) {\n            this._private__priceAxisViews.clear();\n        }\n        const views = [];\n        if (this._private__pane === pane) {\n            views.push(this._private__createPriceAxisViewOnDemand(this._private__priceAxisViews, priceScale, this._private__currentPosPriceProvider));\n        }\n        return views;\n    }\n    _internal_timeAxisViews() {\n        return this._private__visible ? [\n            this._private__timeAxisView\n        ] : [];\n    }\n    _internal_pane() {\n        return this._private__pane;\n    }\n    _internal_updateAllViews() {\n        this._private__model._internal_panes().forEach((pane)=>{\n            var _this__private__crosshairPaneViewCache_get, _this__private__markersPaneViewCache_get;\n            (_this__private__crosshairPaneViewCache_get = this._private__crosshairPaneViewCache.get(pane)) === null || _this__private__crosshairPaneViewCache_get === void 0 ? void 0 : _this__private__crosshairPaneViewCache_get._internal_update();\n            (_this__private__markersPaneViewCache_get = this._private__markersPaneViewCache.get(pane)) === null || _this__private__markersPaneViewCache_get === void 0 ? void 0 : _this__private__markersPaneViewCache_get._internal_update();\n        });\n        this._private__priceAxisViews.forEach((value)=>value._internal_update());\n        this._private__timeAxisView._internal_update();\n    }\n    _private__priceScaleByPane(pane) {\n        if (pane && !pane._internal_defaultPriceScale()._internal_isEmpty()) {\n            return pane._internal_defaultPriceScale();\n        }\n        return null;\n    }\n    _private__tryToUpdateViews(index, price, pane) {\n        if (this._private__tryToUpdateData(index, price, pane)) {\n            this._internal_updateAllViews();\n        }\n    }\n    _private__tryToUpdateData(newIndex, newPrice, newPane) {\n        const oldX = this._private__x;\n        const oldY = this._private__y;\n        const oldPrice = this._private__price;\n        const oldIndex = this._private__index;\n        const oldPane = this._private__pane;\n        const priceScale = this._private__priceScaleByPane(newPane);\n        this._private__index = newIndex;\n        this._private__x = isNaN(newIndex) ? NaN : this._private__model._internal_timeScale()._internal_indexToCoordinate(newIndex);\n        this._private__pane = newPane;\n        const firstValue = priceScale !== null ? priceScale._internal_firstValue() : null;\n        if (priceScale !== null && firstValue !== null) {\n            this._private__price = newPrice;\n            this._private__y = priceScale._internal_priceToCoordinate(newPrice, firstValue);\n        } else {\n            this._private__price = NaN;\n            this._private__y = NaN;\n        }\n        return oldX !== this._private__x || oldY !== this._private__y || oldIndex !== this._private__index || oldPrice !== this._private__price || oldPane !== this._private__pane;\n    }\n    _private__setIndexToLastSeriesBarIndex() {\n        const lastIndexes = this._private__model._internal_serieses().map((s)=>s._internal_bars()._internal_lastIndex()).filter(notNull);\n        const lastBarIndex = lastIndexes.length === 0 ? null : Math.max(...lastIndexes);\n        this._private__index = lastBarIndex !== null ? lastBarIndex : NaN;\n    }\n    _private__createPriceAxisViewOnDemand(map, priceScale, valueProvider) {\n        let view = map.get(priceScale);\n        if (view === undefined) {\n            view = new CrosshairPriceAxisView(this, priceScale, valueProvider);\n            map.set(priceScale, view);\n        }\n        return view;\n    }\n    constructor(model, options){\n        super();\n        this._private__pane = null;\n        this._private__price = NaN;\n        this._private__index = 0;\n        this._private__visible = false; // initially the crosshair should not be visible, until the user interacts.\n        this._private__priceAxisViews = new Map();\n        this._private__subscribed = false;\n        this._private__crosshairPaneViewCache = new WeakMap();\n        this._private__markersPaneViewCache = new WeakMap();\n        this._private__x = NaN;\n        this._private__y = NaN;\n        this._private__originX = NaN;\n        this._private__originY = NaN;\n        this._private__model = model;\n        this._private__options = options;\n        const valuePriceProvider = (rawPriceProvider, rawCoordinateProvider)=>{\n            return (priceScale)=>{\n                const coordinate = rawCoordinateProvider();\n                const rawPrice = rawPriceProvider();\n                if (priceScale === ensureNotNull(this._private__pane)._internal_defaultPriceScale()) {\n                    // price must be defined\n                    return {\n                        _internal_price: rawPrice,\n                        _internal_coordinate: coordinate\n                    };\n                } else {\n                    // always convert from coordinate\n                    const firstValue = ensureNotNull(priceScale._internal_firstValue());\n                    const price = priceScale._internal_coordinateToPrice(coordinate, firstValue);\n                    return {\n                        _internal_price: price,\n                        _internal_coordinate: coordinate\n                    };\n                }\n            };\n        };\n        const valueTimeProvider = (rawIndexProvider, rawCoordinateProvider)=>{\n            return ()=>{\n                const time = this._private__model._internal_timeScale()._internal_indexToTime(rawIndexProvider());\n                const coordinate = rawCoordinateProvider();\n                if (!time || !Number.isFinite(coordinate)) {\n                    return null;\n                }\n                return {\n                    _internal_time: time,\n                    _internal_coordinate: coordinate\n                };\n            };\n        };\n        // for current position always return both price and coordinate\n        this._private__currentPosPriceProvider = valuePriceProvider(()=>this._private__price, ()=>this._private__y);\n        const currentPosTimeProvider = valueTimeProvider(()=>this._private__index, ()=>this._internal_appliedX());\n        this._private__timeAxisView = new CrosshairTimeAxisView(this, model, currentPosTimeProvider);\n    }\n}\nfunction isDefaultPriceScale(priceScaleId) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    return priceScaleId === \"left\" /* DefaultPriceScaleId.Left */  || priceScaleId === \"right\" /* DefaultPriceScaleId.Right */ ;\n}\nfunction mergePaneInvalidation(beforeValue, newValue) {\n    if (beforeValue === undefined) {\n        return newValue;\n    }\n    const level = Math.max(beforeValue._internal_level, newValue._internal_level);\n    const autoScale = beforeValue._internal_autoScale || newValue._internal_autoScale;\n    return {\n        _internal_level: level,\n        _internal_autoScale: autoScale\n    };\n}\nclass InvalidateMask {\n    _internal_invalidatePane(paneIndex, invalidation) {\n        const prevValue = this._private__invalidatedPanes.get(paneIndex);\n        const newValue = mergePaneInvalidation(prevValue, invalidation);\n        this._private__invalidatedPanes.set(paneIndex, newValue);\n    }\n    _internal_fullInvalidation() {\n        return this._private__globalLevel;\n    }\n    _internal_invalidateForPane(paneIndex) {\n        const paneInvalidation = this._private__invalidatedPanes.get(paneIndex);\n        if (paneInvalidation === undefined) {\n            return {\n                _internal_level: this._private__globalLevel\n            };\n        }\n        return {\n            _internal_level: Math.max(this._private__globalLevel, paneInvalidation._internal_level),\n            _internal_autoScale: paneInvalidation._internal_autoScale\n        };\n    }\n    _internal_setFitContent() {\n        this._internal_stopTimeScaleAnimation();\n        // modifies both bar spacing and right offset\n        this._private__timeScaleInvalidations = [\n            {\n                _internal_type: 0 /* TimeScaleInvalidationType.FitContent */ \n            }\n        ];\n    }\n    _internal_applyRange(range) {\n        this._internal_stopTimeScaleAnimation();\n        // modifies both bar spacing and right offset\n        this._private__timeScaleInvalidations = [\n            {\n                _internal_type: 1 /* TimeScaleInvalidationType.ApplyRange */ ,\n                _internal_value: range\n            }\n        ];\n    }\n    _internal_setTimeScaleAnimation(animation) {\n        this._private__removeTimeScaleAnimation();\n        this._private__timeScaleInvalidations.push({\n            _internal_type: 5 /* TimeScaleInvalidationType.Animation */ ,\n            _internal_value: animation\n        });\n    }\n    _internal_stopTimeScaleAnimation() {\n        this._private__removeTimeScaleAnimation();\n        this._private__timeScaleInvalidations.push({\n            _internal_type: 6 /* TimeScaleInvalidationType.StopAnimation */ \n        });\n    }\n    _internal_resetTimeScale() {\n        this._internal_stopTimeScaleAnimation();\n        // modifies both bar spacing and right offset\n        this._private__timeScaleInvalidations = [\n            {\n                _internal_type: 4 /* TimeScaleInvalidationType.Reset */ \n            }\n        ];\n    }\n    _internal_setBarSpacing(barSpacing) {\n        this._internal_stopTimeScaleAnimation();\n        this._private__timeScaleInvalidations.push({\n            _internal_type: 2 /* TimeScaleInvalidationType.ApplyBarSpacing */ ,\n            _internal_value: barSpacing\n        });\n    }\n    _internal_setRightOffset(offset) {\n        this._internal_stopTimeScaleAnimation();\n        this._private__timeScaleInvalidations.push({\n            _internal_type: 3 /* TimeScaleInvalidationType.ApplyRightOffset */ ,\n            _internal_value: offset\n        });\n    }\n    _internal_timeScaleInvalidations() {\n        return this._private__timeScaleInvalidations;\n    }\n    _internal_merge(other) {\n        for (const tsInvalidation of other._private__timeScaleInvalidations){\n            this._private__applyTimeScaleInvalidation(tsInvalidation);\n        }\n        this._private__globalLevel = Math.max(this._private__globalLevel, other._private__globalLevel);\n        other._private__invalidatedPanes.forEach((invalidation, index)=>{\n            this._internal_invalidatePane(index, invalidation);\n        });\n    }\n    static _internal_light() {\n        return new InvalidateMask(2 /* InvalidationLevel.Light */ );\n    }\n    static _internal_full() {\n        return new InvalidateMask(3 /* InvalidationLevel.Full */ );\n    }\n    _private__applyTimeScaleInvalidation(invalidation) {\n        switch(invalidation._internal_type){\n            case 0 /* TimeScaleInvalidationType.FitContent */ :\n                this._internal_setFitContent();\n                break;\n            case 1 /* TimeScaleInvalidationType.ApplyRange */ :\n                this._internal_applyRange(invalidation._internal_value);\n                break;\n            case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */ :\n                this._internal_setBarSpacing(invalidation._internal_value);\n                break;\n            case 3 /* TimeScaleInvalidationType.ApplyRightOffset */ :\n                this._internal_setRightOffset(invalidation._internal_value);\n                break;\n            case 4 /* TimeScaleInvalidationType.Reset */ :\n                this._internal_resetTimeScale();\n                break;\n            case 5 /* TimeScaleInvalidationType.Animation */ :\n                this._internal_setTimeScaleAnimation(invalidation._internal_value);\n                break;\n            case 6 /* TimeScaleInvalidationType.StopAnimation */ :\n                this._private__removeTimeScaleAnimation();\n        }\n    }\n    _private__removeTimeScaleAnimation() {\n        const index = this._private__timeScaleInvalidations.findIndex((inv)=>inv._internal_type === 5 /* TimeScaleInvalidationType.Animation */ );\n        if (index !== -1) {\n            this._private__timeScaleInvalidations.splice(index, 1);\n        }\n    }\n    constructor(globalLevel){\n        this._private__invalidatedPanes = new Map();\n        this._private__timeScaleInvalidations = [];\n        this._private__globalLevel = globalLevel;\n    }\n}\nconst formatterOptions = {\n    _internal_decimalSign: '.'\n};\n/**\n * @param value - The number of convert.\n * @param length - The length. Must be between 0 and 16 inclusive.\n */ function numberToStringWithLeadingZero(value, length) {\n    if (!isNumber(value)) {\n        return 'n/a';\n    }\n    if (!isInteger(length)) {\n        throw new TypeError('invalid length');\n    }\n    if (length < 0 || length > 16) {\n        throw new TypeError('invalid length');\n    }\n    if (length === 0) {\n        return value.toString();\n    }\n    const dummyString = '0000000000000000';\n    return (dummyString + value.toString()).slice(-length);\n}\nclass PriceFormatter {\n    format(price) {\n        // \\u2212 is unicode's minus sign https://www.fileformat.info/info/unicode/char/2212/index.htm\n        // we should use it because it has the same width as plus sign +\n        const sign = price < 0 ? '\\u2212' : '';\n        price = Math.abs(price);\n        return sign + this._private__formatAsDecimal(price);\n    }\n    _private__calculateDecimal() {\n        // check if this._base is power of 10\n        // for double fractional _fractionalLength if for the main fractional only\n        this._internal__fractionalLength = 0;\n        if (this._private__priceScale > 0 && this._private__minMove > 0) {\n            let base = this._private__priceScale;\n            while(base > 1){\n                base /= 10;\n                this._internal__fractionalLength++;\n            }\n        }\n    }\n    _private__formatAsDecimal(price) {\n        const base = this._private__priceScale / this._private__minMove;\n        let intPart = Math.floor(price);\n        let fracString = '';\n        const fracLength = this._internal__fractionalLength !== undefined ? this._internal__fractionalLength : NaN;\n        if (base > 1) {\n            let fracPart = +(Math.round(price * base) - intPart * base).toFixed(this._internal__fractionalLength);\n            if (fracPart >= base) {\n                fracPart -= base;\n                intPart += 1;\n            }\n            fracString = formatterOptions._internal_decimalSign + numberToStringWithLeadingZero(+fracPart.toFixed(this._internal__fractionalLength) * this._private__minMove, fracLength);\n        } else {\n            // should round int part to min move\n            intPart = Math.round(intPart * base) / base;\n            // if min move > 1, fractional part is always = 0\n            if (fracLength > 0) {\n                fracString = formatterOptions._internal_decimalSign + numberToStringWithLeadingZero(0, fracLength);\n            }\n        }\n        return intPart.toFixed(0) + fracString;\n    }\n    constructor(priceScale, minMove){\n        if (!minMove) {\n            minMove = 1;\n        }\n        if (!isNumber(priceScale) || !isInteger(priceScale)) {\n            priceScale = 100;\n        }\n        if (priceScale < 0) {\n            throw new TypeError('invalid base');\n        }\n        this._private__priceScale = priceScale;\n        this._private__minMove = minMove;\n        this._private__calculateDecimal();\n    }\n}\nclass PercentageFormatter extends PriceFormatter {\n    format(price) {\n        return \"\".concat(super.format(price), \"%\");\n    }\n    constructor(priceScale = 100){\n        super(priceScale);\n    }\n}\nclass VolumeFormatter {\n    format(vol) {\n        let sign = '';\n        if (vol < 0) {\n            sign = '-';\n            vol = -vol;\n        }\n        if (vol < 995) {\n            return sign + this._private__formatNumber(vol);\n        } else if (vol < 999995) {\n            return sign + this._private__formatNumber(vol / 1000) + 'K';\n        } else if (vol < 999999995) {\n            vol = 1000 * Math.round(vol / 1000);\n            return sign + this._private__formatNumber(vol / 1000000) + 'M';\n        } else {\n            vol = 1000000 * Math.round(vol / 1000000);\n            return sign + this._private__formatNumber(vol / 1000000000) + 'B';\n        }\n    }\n    _private__formatNumber(value) {\n        let res;\n        const priceScale = Math.pow(10, this._private__precision);\n        value = Math.round(value * priceScale) / priceScale;\n        if (value >= 1e-15 && value < 1) {\n            res = value.toFixed(this._private__precision).replace(/\\.?0+$/, ''); // regex removes trailing zeroes\n        } else {\n            res = String(value);\n        }\n        return res.replace(/(\\.[1-9]*)0+$/, (e, p1)=>p1);\n    }\n    constructor(precision){\n        this._private__precision = precision;\n    }\n}\nconst defaultReplacementRe = /[2-9]/g;\nclass TextWidthCache {\n    _internal_reset() {\n        this._private__actualSize = 0;\n        this._private__cache.clear();\n        this._private__usageTick = 1;\n        this._private__oldestTick = 1;\n        this._private__tick2Labels = {};\n    }\n    _internal_measureText(ctx, text, optimizationReplacementRe) {\n        return this._private__getMetrics(ctx, text, optimizationReplacementRe).width;\n    }\n    _internal_yMidCorrection(ctx, text, optimizationReplacementRe) {\n        const metrics = this._private__getMetrics(ctx, text, optimizationReplacementRe);\n        // if actualBoundingBoxAscent/actualBoundingBoxDescent are not supported we use 0 as a fallback\n        return ((metrics.actualBoundingBoxAscent || 0) - (metrics.actualBoundingBoxDescent || 0)) / 2;\n    }\n    _private__getMetrics(ctx, text, optimizationReplacementRe) {\n        const re = optimizationReplacementRe || defaultReplacementRe;\n        const cacheString = String(text).replace(re, '0');\n        if (this._private__cache.has(cacheString)) {\n            return ensureDefined(this._private__cache.get(cacheString))._internal_metrics;\n        }\n        if (this._private__actualSize === this._private__maxSize) {\n            const oldestValue = this._private__tick2Labels[this._private__oldestTick];\n            delete this._private__tick2Labels[this._private__oldestTick];\n            this._private__cache.delete(oldestValue);\n            this._private__oldestTick++;\n            this._private__actualSize--;\n        }\n        ctx.save();\n        ctx.textBaseline = 'middle';\n        const metrics = ctx.measureText(cacheString);\n        ctx.restore();\n        if (metrics.width === 0 && !!text.length) {\n            // measureText can return 0 in FF depending on a canvas size, don't cache it\n            return metrics;\n        }\n        this._private__cache.set(cacheString, {\n            _internal_metrics: metrics,\n            _internal_tick: this._private__usageTick\n        });\n        this._private__tick2Labels[this._private__usageTick] = cacheString;\n        this._private__actualSize++;\n        this._private__usageTick++;\n        return metrics;\n    }\n    constructor(size = 50){\n        this._private__actualSize = 0;\n        this._private__usageTick = 1;\n        this._private__oldestTick = 1;\n        this._private__tick2Labels = {};\n        this._private__cache = new Map();\n        this._private__maxSize = size;\n    }\n}\nclass PanePriceAxisViewRenderer {\n    _internal_setParams(priceAxisViewRenderer, rendererOptions, align) {\n        this._private__priceAxisViewRenderer = priceAxisViewRenderer;\n        this._private__rendererOptions = rendererOptions;\n        this._private__align = align;\n    }\n    _internal_draw(target) {\n        if (this._private__rendererOptions === null || this._private__priceAxisViewRenderer === null) {\n            return;\n        }\n        this._private__priceAxisViewRenderer._internal_draw(target, this._private__rendererOptions, this._private__textWidthCache, this._private__align);\n    }\n    constructor(textWidthCache){\n        this._private__priceAxisViewRenderer = null;\n        this._private__rendererOptions = null;\n        this._private__align = 'right';\n        this._private__textWidthCache = textWidthCache;\n    }\n}\nclass PanePriceAxisView {\n    _internal_renderer() {\n        const pane = this._private__chartModel._internal_paneForSource(this._private__dataSource);\n        if (pane === null) {\n            return null;\n        }\n        // this price scale will be used to find label placement only (left, right, none)\n        const priceScale = pane._internal_isOverlay(this._private__dataSource) ? pane._internal_defaultVisiblePriceScale() : this._private__dataSource._internal_priceScale();\n        if (priceScale === null) {\n            return null;\n        }\n        const position = pane._internal_priceScalePosition(priceScale);\n        if (position === 'overlay') {\n            return null;\n        }\n        const options = this._private__chartModel._internal_priceAxisRendererOptions();\n        if (options._internal_fontSize !== this._private__fontSize) {\n            this._private__fontSize = options._internal_fontSize;\n            this._private__textWidthCache._internal_reset();\n        }\n        this._private__renderer._internal_setParams(this._private__priceAxisView._internal_paneRenderer(), options, position);\n        return this._private__renderer;\n    }\n    constructor(priceAxisView, dataSource, chartModel){\n        this._private__priceAxisView = priceAxisView;\n        this._private__textWidthCache = new TextWidthCache(50); // when should we clear cache?\n        this._private__dataSource = dataSource;\n        this._private__chartModel = chartModel;\n        this._private__fontSize = -1;\n        this._private__renderer = new PanePriceAxisViewRenderer(this._private__textWidthCache);\n    }\n}\nclass HorizontalLineRenderer extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal_hitTest(x, y) {\n        var _this__private__data;\n        if (!((_this__private__data = this._private__data) === null || _this__private__data === void 0 ? void 0 : _this__private__data._internal_visible)) {\n            return null;\n        }\n        const { _internal_y: itemY, _internal_lineWidth: lineWidth, _internal_externalId: externalId } = this._private__data;\n        // add a fixed area threshold around line (Y + width) for hit test\n        if (y >= itemY - lineWidth - 7 /* Constants.HitTestThreshold */  && y <= itemY + lineWidth + 7 /* Constants.HitTestThreshold */ ) {\n            return {\n                _internal_hitTestData: this._private__data,\n                _internal_externalId: externalId\n            };\n        }\n        return null;\n    }\n    _internal__drawImpl(param) {\n        let { context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio } = param;\n        if (this._private__data === null) {\n            return;\n        }\n        if (this._private__data._internal_visible === false) {\n            return;\n        }\n        const y = Math.round(this._private__data._internal_y * verticalPixelRatio);\n        if (y < 0 || y > bitmapSize.height) {\n            return;\n        }\n        ctx.lineCap = 'butt';\n        ctx.strokeStyle = this._private__data._internal_color;\n        ctx.lineWidth = Math.floor(this._private__data._internal_lineWidth * horizontalPixelRatio);\n        setLineStyle(ctx, this._private__data._internal_lineStyle);\n        drawHorizontalLine(ctx, y, 0, bitmapSize.width);\n    }\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n    }\n}\nclass SeriesHorizontalLinePaneView {\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (!this._internal__series._internal_visible()) {\n            return null;\n        }\n        if (this._private__invalidated) {\n            this._internal__updateImpl();\n            this._private__invalidated = false;\n        }\n        return this._internal__lineRenderer;\n    }\n    constructor(series){\n        this._internal__lineRendererData = {\n            _internal_y: 0,\n            _internal_color: 'rgba(0, 0, 0, 0)',\n            _internal_lineWidth: 1,\n            _internal_lineStyle: 0 /* LineStyle.Solid */ ,\n            _internal_visible: false\n        };\n        this._internal__lineRenderer = new HorizontalLineRenderer();\n        this._private__invalidated = true;\n        this._internal__series = series;\n        this._internal__model = series._internal_model();\n        this._internal__lineRenderer._internal_setData(this._internal__lineRendererData);\n    }\n}\nclass SeriesHorizontalBaseLinePaneView extends SeriesHorizontalLinePaneView {\n    _internal__updateImpl() {\n        this._internal__lineRendererData._internal_visible = false;\n        const priceScale = this._internal__series._internal_priceScale();\n        const mode = priceScale._internal_mode()._internal_mode;\n        if (mode !== 2 /* PriceScaleMode.Percentage */  && mode !== 3 /* PriceScaleMode.IndexedTo100 */ ) {\n            return;\n        }\n        const seriesOptions = this._internal__series._internal_options();\n        if (!seriesOptions.baseLineVisible || !this._internal__series._internal_visible()) {\n            return;\n        }\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return;\n        }\n        this._internal__lineRendererData._internal_visible = true;\n        this._internal__lineRendererData._internal_y = priceScale._internal_priceToCoordinate(firstValue._internal_value, firstValue._internal_value);\n        this._internal__lineRendererData._internal_color = seriesOptions.baseLineColor;\n        this._internal__lineRendererData._internal_lineWidth = seriesOptions.baseLineWidth;\n        this._internal__lineRendererData._internal_lineStyle = seriesOptions.baseLineStyle;\n    }\n    // eslint-disable-next-line no-useless-constructor\n    constructor(series){\n        super(series);\n    }\n}\nclass SeriesLastPriceAnimationRenderer extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal_data() {\n        return this._private__data;\n    }\n    _internal__drawImpl(param) {\n        let { context: ctx, horizontalPixelRatio, verticalPixelRatio } = param;\n        const data = this._private__data;\n        if (data === null) {\n            return;\n        }\n        const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n        const correction = tickWidth % 2 / 2;\n        const centerX = Math.round(data._internal_center.x * horizontalPixelRatio) + correction; // correct x coordinate only\n        const centerY = data._internal_center.y * verticalPixelRatio;\n        ctx.fillStyle = data._internal_seriesLineColor;\n        ctx.beginPath();\n        // TODO: it is better to have different horizontal and vertical radii\n        const centerPointRadius = Math.max(2, data._internal_seriesLineWidth * 1.5) * horizontalPixelRatio;\n        ctx.arc(centerX, centerY, centerPointRadius, 0, 2 * Math.PI, false);\n        ctx.fill();\n        ctx.fillStyle = data._internal_fillColor;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, data._internal_radius * horizontalPixelRatio, 0, 2 * Math.PI, false);\n        ctx.fill();\n        ctx.lineWidth = tickWidth;\n        ctx.strokeStyle = data._internal_strokeColor;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, data._internal_radius * horizontalPixelRatio + tickWidth / 2, 0, 2 * Math.PI, false);\n        ctx.stroke();\n    }\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n    }\n}\nconst animationStagesData = [\n    {\n        _internal_start: 0,\n        _internal_end: 0.25 /* Constants.Stage1Period */ ,\n        _internal_startRadius: 4 /* Constants.Stage1StartCircleRadius */ ,\n        _internal_endRadius: 10 /* Constants.Stage1EndCircleRadius */ ,\n        _internal_startFillAlpha: 0.25 /* Constants.Stage1StartFillAlpha */ ,\n        _internal_endFillAlpha: 0 /* Constants.Stage1EndFillAlpha */ ,\n        _internal_startStrokeAlpha: 0.4 /* Constants.Stage1StartStrokeAlpha */ ,\n        _internal_endStrokeAlpha: 0.8 /* Constants.Stage1EndStrokeAlpha */ \n    },\n    {\n        _internal_start: 0.25 /* Constants.Stage1Period */ ,\n        _internal_end: 0.25 /* Constants.Stage1Period */  + 0.275 /* Constants.Stage2Period */ ,\n        _internal_startRadius: 10 /* Constants.Stage2StartCircleRadius */ ,\n        _internal_endRadius: 14 /* Constants.Stage2EndCircleRadius */ ,\n        _internal_startFillAlpha: 0 /* Constants.Stage2StartFillAlpha */ ,\n        _internal_endFillAlpha: 0 /* Constants.Stage2EndFillAlpha */ ,\n        _internal_startStrokeAlpha: 0.8 /* Constants.Stage2StartStrokeAlpha */ ,\n        _internal_endStrokeAlpha: 0 /* Constants.Stage2EndStrokeAlpha */ \n    },\n    {\n        _internal_start: 0.25 /* Constants.Stage1Period */  + 0.275 /* Constants.Stage2Period */ ,\n        _internal_end: 0.25 /* Constants.Stage1Period */  + 0.275 /* Constants.Stage2Period */  + 0.475 /* Constants.Stage3Period */ ,\n        _internal_startRadius: 14 /* Constants.Stage3StartCircleRadius */ ,\n        _internal_endRadius: 14 /* Constants.Stage3EndCircleRadius */ ,\n        _internal_startFillAlpha: 0 /* Constants.Stage3StartFillAlpha */ ,\n        _internal_endFillAlpha: 0 /* Constants.Stage3EndFillAlpha */ ,\n        _internal_startStrokeAlpha: 0 /* Constants.Stage3StartStrokeAlpha */ ,\n        _internal_endStrokeAlpha: 0 /* Constants.Stage3EndStrokeAlpha */ \n    }\n];\nfunction radius(stage, startRadius, endRadius) {\n    return startRadius + (endRadius - startRadius) * stage;\n}\nclass SeriesLastPriceAnimationPaneView {\n    _internal_onDataCleared() {\n        this._private__endTime = this._private__startTime - 1;\n        this._internal_update();\n    }\n    _internal_onNewRealtimeDataReceived() {\n        this._internal_update();\n        if (this._private__series._internal_options().lastPriceAnimation === 2 /* LastPriceAnimationMode.OnDataUpdate */ ) {\n            const now = performance.now();\n            const timeToAnimationEnd = this._private__endTime - now;\n            if (timeToAnimationEnd > 0) {\n                if (timeToAnimationEnd < 2600 /* Constants.AnimationPeriod */  / 4) {\n                    this._private__endTime += 2600 /* Constants.AnimationPeriod */ ;\n                }\n                return;\n            }\n            this._private__startTime = now;\n            this._private__endTime = now + 2600 /* Constants.AnimationPeriod */ ;\n        }\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_invalidateStage() {\n        this._private__stageInvalidated = true;\n    }\n    _internal_visible() {\n        // center point is always visible if lastPriceAnimation is not LastPriceAnimationMode.Disabled\n        return this._private__series._internal_options().lastPriceAnimation !== 0 /* LastPriceAnimationMode.Disabled */ ;\n    }\n    _internal_animationActive() {\n        switch(this._private__series._internal_options().lastPriceAnimation){\n            case 0 /* LastPriceAnimationMode.Disabled */ :\n                return false;\n            case 1 /* LastPriceAnimationMode.Continuous */ :\n                return true;\n            case 2 /* LastPriceAnimationMode.OnDataUpdate */ :\n                return performance.now() <= this._private__endTime;\n        }\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n            this._private__stageInvalidated = false;\n        } else if (this._private__stageInvalidated) {\n            this._private__updateRendererDataStage();\n            this._private__stageInvalidated = false;\n        }\n        return this._private__renderer;\n    }\n    _private__updateImpl() {\n        this._private__renderer._internal_setData(null);\n        const timeScale = this._private__series._internal_model()._internal_timeScale();\n        const visibleRange = timeScale._internal_visibleStrictRange();\n        const firstValue = this._private__series._internal_firstValue();\n        if (visibleRange === null || firstValue === null) {\n            return;\n        }\n        const lastValue = this._private__series._internal_lastValueData(true);\n        if (lastValue._internal_noData || !visibleRange._internal_contains(lastValue._internal_index)) {\n            return;\n        }\n        const lastValuePoint = {\n            x: timeScale._internal_indexToCoordinate(lastValue._internal_index),\n            y: this._private__series._internal_priceScale()._internal_priceToCoordinate(lastValue._internal_price, firstValue._internal_value)\n        };\n        const seriesLineColor = lastValue._internal_color;\n        const seriesLineWidth = this._private__series._internal_options().lineWidth;\n        const data = this._private__animationData(this._private__duration(), seriesLineColor);\n        this._private__renderer._internal_setData({\n            _internal_seriesLineColor: seriesLineColor,\n            _internal_seriesLineWidth: seriesLineWidth,\n            _internal_fillColor: data._internal_fillColor,\n            _internal_strokeColor: data._internal_strokeColor,\n            _internal_radius: data._internal_radius,\n            _internal_center: lastValuePoint\n        });\n    }\n    _private__updateRendererDataStage() {\n        const rendererData = this._private__renderer._internal_data();\n        if (rendererData !== null) {\n            const data = this._private__animationData(this._private__duration(), rendererData._internal_seriesLineColor);\n            rendererData._internal_fillColor = data._internal_fillColor;\n            rendererData._internal_strokeColor = data._internal_strokeColor;\n            rendererData._internal_radius = data._internal_radius;\n        }\n    }\n    _private__duration() {\n        return this._internal_animationActive() ? performance.now() - this._private__startTime : 2600 /* Constants.AnimationPeriod */  - 1;\n    }\n    _private__color(seriesLineColor, stage, startAlpha, endAlpha) {\n        const alpha = startAlpha + (endAlpha - startAlpha) * stage;\n        return this._private__series._internal_model()._internal_colorParser()._internal_applyAlpha(seriesLineColor, alpha);\n    }\n    _private__animationData(durationSinceStart, lineColor) {\n        const globalStage = durationSinceStart % 2600 /* Constants.AnimationPeriod */  / 2600 /* Constants.AnimationPeriod */ ;\n        let currentStageData;\n        for (const stageData of animationStagesData){\n            if (globalStage >= stageData._internal_start && globalStage <= stageData._internal_end) {\n                currentStageData = stageData;\n                break;\n            }\n        }\n        assert(currentStageData !== undefined, 'Last price animation internal logic error');\n        const subStage = (globalStage - currentStageData._internal_start) / (currentStageData._internal_end - currentStageData._internal_start);\n        return {\n            _internal_fillColor: this._private__color(lineColor, subStage, currentStageData._internal_startFillAlpha, currentStageData._internal_endFillAlpha),\n            _internal_strokeColor: this._private__color(lineColor, subStage, currentStageData._internal_startStrokeAlpha, currentStageData._internal_endStrokeAlpha),\n            _internal_radius: radius(subStage, currentStageData._internal_startRadius, currentStageData._internal_endRadius)\n        };\n    }\n    constructor(series){\n        this._private__renderer = new SeriesLastPriceAnimationRenderer();\n        this._private__invalidated = true;\n        this._private__stageInvalidated = true;\n        this._private__startTime = performance.now();\n        this._private__endTime = this._private__startTime - 1;\n        this._private__series = series;\n    }\n}\nclass SeriesPriceLinePaneView extends SeriesHorizontalLinePaneView {\n    _internal__updateImpl() {\n        const data = this._internal__lineRendererData;\n        data._internal_visible = false;\n        const seriesOptions = this._internal__series._internal_options();\n        if (!seriesOptions.priceLineVisible || !this._internal__series._internal_visible()) {\n            return;\n        }\n        const lastValueData = this._internal__series._internal_lastValueData(seriesOptions.priceLineSource === 0 /* PriceLineSource.LastBar */ );\n        if (lastValueData._internal_noData) {\n            return;\n        }\n        data._internal_visible = true;\n        data._internal_y = lastValueData._internal_coordinate;\n        data._internal_color = this._internal__series._internal_priceLineColor(lastValueData._internal_color);\n        data._internal_lineWidth = seriesOptions.priceLineWidth;\n        data._internal_lineStyle = seriesOptions.priceLineStyle;\n    }\n    // eslint-disable-next-line no-useless-constructor\n    constructor(series){\n        super(series);\n    }\n}\nclass SeriesPriceAxisView extends PriceAxisView {\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\n        axisRendererData._internal_visible = false;\n        paneRendererData._internal_visible = false;\n        const source = this._private__source;\n        if (!source._internal_visible()) {\n            return;\n        }\n        const seriesOptions = source._internal_options();\n        const showSeriesLastValue = seriesOptions.lastValueVisible;\n        const showSymbolLabel = source._internal_title() !== '';\n        const showPriceAndPercentage = seriesOptions.seriesLastValueMode === 0 /* PriceAxisLastValueMode.LastPriceAndPercentageValue */ ;\n        const lastValueData = source._internal_lastValueData(false);\n        if (lastValueData._internal_noData) {\n            return;\n        }\n        if (showSeriesLastValue) {\n            axisRendererData._internal_text = this._internal__axisText(lastValueData, showSeriesLastValue, showPriceAndPercentage);\n            axisRendererData._internal_visible = axisRendererData._internal_text.length !== 0;\n        }\n        if (showSymbolLabel || showPriceAndPercentage) {\n            paneRendererData._internal_text = this._internal__paneText(lastValueData, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage);\n            paneRendererData._internal_visible = paneRendererData._internal_text.length > 0;\n        }\n        const lastValueColor = source._internal_priceLineColor(lastValueData._internal_color);\n        const colors = this._private__source._internal_model()._internal_colorParser()._internal_generateContrastColors(lastValueColor);\n        commonRendererData._internal_background = colors._internal_background;\n        commonRendererData._internal_coordinate = lastValueData._internal_coordinate;\n        paneRendererData._internal_borderColor = source._internal_model()._internal_backgroundColorAtYPercentFromTop(lastValueData._internal_coordinate / source._internal_priceScale()._internal_height());\n        axisRendererData._internal_borderColor = lastValueColor;\n        axisRendererData._internal_color = colors._internal_foreground;\n        paneRendererData._internal_color = colors._internal_foreground;\n    }\n    _internal__paneText(lastValue, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage) {\n        let result = '';\n        const title = this._private__source._internal_title();\n        if (showSymbolLabel && title.length !== 0) {\n            result += \"\".concat(title, \" \");\n        }\n        if (showSeriesLastValue && showPriceAndPercentage) {\n            result += this._private__source._internal_priceScale()._internal_isPercentage() ? lastValue._internal_formattedPriceAbsolute : lastValue._internal_formattedPricePercentage;\n        }\n        return result.trim();\n    }\n    _internal__axisText(lastValueData, showSeriesLastValue, showPriceAndPercentage) {\n        if (!showSeriesLastValue) {\n            return '';\n        }\n        if (!showPriceAndPercentage) {\n            return lastValueData._internal_text;\n        }\n        return this._private__source._internal_priceScale()._internal_isPercentage() ? lastValueData._internal_formattedPricePercentage : lastValueData._internal_formattedPriceAbsolute;\n    }\n    constructor(source){\n        super();\n        this._private__source = source;\n    }\n}\nfunction computeFiniteResult(method, valueOne, valueTwo, fallback) {\n    const firstFinite = Number.isFinite(valueOne);\n    const secondFinite = Number.isFinite(valueTwo);\n    if (firstFinite && secondFinite) {\n        return method(valueOne, valueTwo);\n    }\n    return !firstFinite && !secondFinite ? fallback : firstFinite ? valueOne : valueTwo;\n}\nclass PriceRangeImpl {\n    _internal_equals(pr) {\n        if (pr === null) {\n            return false;\n        }\n        return this._private__minValue === pr._private__minValue && this._private__maxValue === pr._private__maxValue;\n    }\n    _internal_clone() {\n        return new PriceRangeImpl(this._private__minValue, this._private__maxValue);\n    }\n    _internal_minValue() {\n        return this._private__minValue;\n    }\n    _internal_maxValue() {\n        return this._private__maxValue;\n    }\n    _internal_length() {\n        return this._private__maxValue - this._private__minValue;\n    }\n    _internal_isEmpty() {\n        return this._private__maxValue === this._private__minValue || Number.isNaN(this._private__maxValue) || Number.isNaN(this._private__minValue);\n    }\n    _internal_merge(anotherRange) {\n        if (anotherRange === null) {\n            return this;\n        }\n        return new PriceRangeImpl(computeFiniteResult(Math.min, this._internal_minValue(), anotherRange._internal_minValue(), -Infinity), computeFiniteResult(Math.max, this._internal_maxValue(), anotherRange._internal_maxValue(), Infinity));\n    }\n    _internal_scaleAroundCenter(coeff) {\n        if (!isNumber(coeff)) {\n            return;\n        }\n        const delta = this._private__maxValue - this._private__minValue;\n        if (delta === 0) {\n            return;\n        }\n        const center = (this._private__maxValue + this._private__minValue) * 0.5;\n        let maxDelta = this._private__maxValue - center;\n        let minDelta = this._private__minValue - center;\n        maxDelta *= coeff;\n        minDelta *= coeff;\n        this._private__maxValue = center + maxDelta;\n        this._private__minValue = center + minDelta;\n    }\n    _internal_shift(delta) {\n        if (!isNumber(delta)) {\n            return;\n        }\n        this._private__maxValue += delta;\n        this._private__minValue += delta;\n    }\n    _internal_toRaw() {\n        return {\n            minValue: this._private__minValue,\n            maxValue: this._private__maxValue\n        };\n    }\n    static _internal_fromRaw(raw) {\n        return raw === null ? null : new PriceRangeImpl(raw.minValue, raw.maxValue);\n    }\n    constructor(minValue, maxValue){\n        this._private__minValue = minValue;\n        this._private__maxValue = maxValue;\n    }\n}\nclass AutoscaleInfoImpl {\n    _internal_priceRange() {\n        return this._private__priceRange;\n    }\n    _internal_margins() {\n        return this._private__margins;\n    }\n    _internal_toRaw() {\n        return {\n            priceRange: this._private__priceRange === null ? null : this._private__priceRange._internal_toRaw(),\n            margins: this._private__margins || undefined\n        };\n    }\n    static _internal_fromRaw(raw) {\n        return raw === null ? null : new AutoscaleInfoImpl(PriceRangeImpl._internal_fromRaw(raw.priceRange), raw.margins);\n    }\n    constructor(priceRange, margins){\n        this._private__priceRange = priceRange;\n        this._private__margins = margins || null;\n    }\n}\nclass CustomPriceLinePaneView extends SeriesHorizontalLinePaneView {\n    _internal__updateImpl() {\n        const data = this._internal__lineRendererData;\n        data._internal_visible = false;\n        const lineOptions = this._private__priceLine._internal_options();\n        if (!this._internal__series._internal_visible() || !lineOptions.lineVisible) {\n            return;\n        }\n        const y = this._private__priceLine._internal_yCoord();\n        if (y === null) {\n            return;\n        }\n        data._internal_visible = true;\n        data._internal_y = y;\n        data._internal_color = lineOptions.color;\n        data._internal_lineWidth = lineOptions.lineWidth;\n        data._internal_lineStyle = lineOptions.lineStyle;\n        data._internal_externalId = this._private__priceLine._internal_options().id;\n    }\n    constructor(series, priceLine){\n        super(series);\n        this._private__priceLine = priceLine;\n    }\n}\nclass CustomPriceLinePriceAxisView extends PriceAxisView {\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonData) {\n        axisRendererData._internal_visible = false;\n        paneRendererData._internal_visible = false;\n        const options = this._private__priceLine._internal_options();\n        const labelVisible = options.axisLabelVisible;\n        const showPaneLabel = options.title !== '';\n        const series = this._private__series;\n        if (!labelVisible || !series._internal_visible()) {\n            return;\n        }\n        const y = this._private__priceLine._internal_yCoord();\n        if (y === null) {\n            return;\n        }\n        if (showPaneLabel) {\n            paneRendererData._internal_text = options.title;\n            paneRendererData._internal_visible = true;\n        }\n        paneRendererData._internal_borderColor = series._internal_model()._internal_backgroundColorAtYPercentFromTop(y / series._internal_priceScale()._internal_height());\n        axisRendererData._internal_text = this._private__formatPrice(options.price);\n        axisRendererData._internal_visible = true;\n        const colors = this._private__series._internal_model()._internal_colorParser()._internal_generateContrastColors(options.axisLabelColor || options.color);\n        commonData._internal_background = colors._internal_background;\n        const textColor = options.axisLabelTextColor || colors._internal_foreground;\n        axisRendererData._internal_color = textColor; // price text\n        paneRendererData._internal_color = textColor; // title text\n        commonData._internal_coordinate = y;\n    }\n    _private__formatPrice(price) {\n        const firstValue = this._private__series._internal_firstValue();\n        if (firstValue === null) {\n            return '';\n        }\n        return this._private__series._internal_priceScale()._internal_formatPrice(price, firstValue._internal_value);\n    }\n    constructor(series, priceLine){\n        super();\n        this._private__series = series;\n        this._private__priceLine = priceLine;\n    }\n}\nclass CustomPriceLine {\n    _internal_applyOptions(options) {\n        merge(this._private__options, options);\n        this._internal_update();\n        this._private__series._internal_model()._internal_lightUpdate();\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_paneView() {\n        return this._private__priceLineView;\n    }\n    _internal_labelPaneView() {\n        return this._private__panePriceAxisView;\n    }\n    _internal_priceAxisView() {\n        return this._private__priceAxisView;\n    }\n    _internal_update() {\n        this._private__priceLineView._internal_update();\n        this._private__priceAxisView._internal_update();\n    }\n    _internal_yCoord() {\n        const series = this._private__series;\n        const priceScale = series._internal_priceScale();\n        const timeScale = series._internal_model()._internal_timeScale();\n        if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {\n            return null;\n        }\n        const firstValue = series._internal_firstValue();\n        if (firstValue === null) {\n            return null;\n        }\n        return priceScale._internal_priceToCoordinate(this._private__options.price, firstValue._internal_value);\n    }\n    constructor(series, options){\n        this._private__series = series;\n        this._private__options = options;\n        this._private__priceLineView = new CustomPriceLinePaneView(series, this);\n        this._private__priceAxisView = new CustomPriceLinePriceAxisView(series, this);\n        this._private__panePriceAxisView = new PanePriceAxisView(this._private__priceAxisView, series, series._internal_model());\n    }\n}\nclass PriceDataSource extends DataSource {\n    _internal_model() {\n        return this._private__model;\n    }\n    constructor(model){\n        super();\n        this._private__model = model;\n    }\n}\nconst barStyleFnMap = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Bar: (findBar, barStyle, barIndex, precomputedBars)=>{\n        const upColor = barStyle.upColor;\n        const downColor = barStyle.downColor;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */ ]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */ ]);\n        var _currentBar__internal_color;\n        return {\n            _internal_barColor: (_currentBar__internal_color = currentBar._internal_color) !== null && _currentBar__internal_color !== void 0 ? _currentBar__internal_color : isUp ? upColor : downColor\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Candlestick: (findBar, candlestickStyle, barIndex, precomputedBars)=>{\n        const upColor = candlestickStyle.upColor;\n        const downColor = candlestickStyle.downColor;\n        const borderUpColor = candlestickStyle.borderUpColor;\n        const borderDownColor = candlestickStyle.borderDownColor;\n        const wickUpColor = candlestickStyle.wickUpColor;\n        const wickDownColor = candlestickStyle.wickDownColor;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */ ]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */ ]);\n        var _currentBar__internal_color, _currentBar__internal_borderColor, _currentBar__internal_wickColor;\n        return {\n            _internal_barColor: (_currentBar__internal_color = currentBar._internal_color) !== null && _currentBar__internal_color !== void 0 ? _currentBar__internal_color : isUp ? upColor : downColor,\n            _internal_barBorderColor: (_currentBar__internal_borderColor = currentBar._internal_borderColor) !== null && _currentBar__internal_borderColor !== void 0 ? _currentBar__internal_borderColor : isUp ? borderUpColor : borderDownColor,\n            _internal_barWickColor: (_currentBar__internal_wickColor = currentBar._internal_wickColor) !== null && _currentBar__internal_wickColor !== void 0 ? _currentBar__internal_wickColor : isUp ? wickUpColor : wickDownColor\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Custom: (findBar, customStyle, barIndex, precomputedBars)=>{\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        var _currentBar__internal_color;\n        return {\n            _internal_barColor: (_currentBar__internal_color = currentBar._internal_color) !== null && _currentBar__internal_color !== void 0 ? _currentBar__internal_color : customStyle.color\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Area: (findBar, areaStyle, barIndex, precomputedBars)=>{\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        var _currentBar__internal_lineColor, _currentBar__internal_lineColor1, _currentBar__internal_topColor, _currentBar__internal_bottomColor;\n        return {\n            _internal_barColor: (_currentBar__internal_lineColor = currentBar._internal_lineColor) !== null && _currentBar__internal_lineColor !== void 0 ? _currentBar__internal_lineColor : areaStyle.lineColor,\n            _internal_lineColor: (_currentBar__internal_lineColor1 = currentBar._internal_lineColor) !== null && _currentBar__internal_lineColor1 !== void 0 ? _currentBar__internal_lineColor1 : areaStyle.lineColor,\n            _internal_topColor: (_currentBar__internal_topColor = currentBar._internal_topColor) !== null && _currentBar__internal_topColor !== void 0 ? _currentBar__internal_topColor : areaStyle.topColor,\n            _internal_bottomColor: (_currentBar__internal_bottomColor = currentBar._internal_bottomColor) !== null && _currentBar__internal_bottomColor !== void 0 ? _currentBar__internal_bottomColor : areaStyle.bottomColor\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Baseline: (findBar, baselineStyle, barIndex, precomputedBars)=>{\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        const isAboveBaseline = currentBar._internal_value[3 /* PlotRowValueIndex.Close */ ] >= baselineStyle.baseValue.price;\n        var _currentBar__internal_topLineColor, _currentBar__internal_bottomLineColor, _currentBar__internal_topFillColor1, _currentBar__internal_topFillColor2, _currentBar__internal_bottomFillColor1, _currentBar__internal_bottomFillColor2;\n        return {\n            _internal_barColor: isAboveBaseline ? baselineStyle.topLineColor : baselineStyle.bottomLineColor,\n            _internal_topLineColor: (_currentBar__internal_topLineColor = currentBar._internal_topLineColor) !== null && _currentBar__internal_topLineColor !== void 0 ? _currentBar__internal_topLineColor : baselineStyle.topLineColor,\n            _internal_bottomLineColor: (_currentBar__internal_bottomLineColor = currentBar._internal_bottomLineColor) !== null && _currentBar__internal_bottomLineColor !== void 0 ? _currentBar__internal_bottomLineColor : baselineStyle.bottomLineColor,\n            _internal_topFillColor1: (_currentBar__internal_topFillColor1 = currentBar._internal_topFillColor1) !== null && _currentBar__internal_topFillColor1 !== void 0 ? _currentBar__internal_topFillColor1 : baselineStyle.topFillColor1,\n            _internal_topFillColor2: (_currentBar__internal_topFillColor2 = currentBar._internal_topFillColor2) !== null && _currentBar__internal_topFillColor2 !== void 0 ? _currentBar__internal_topFillColor2 : baselineStyle.topFillColor2,\n            _internal_bottomFillColor1: (_currentBar__internal_bottomFillColor1 = currentBar._internal_bottomFillColor1) !== null && _currentBar__internal_bottomFillColor1 !== void 0 ? _currentBar__internal_bottomFillColor1 : baselineStyle.bottomFillColor1,\n            _internal_bottomFillColor2: (_currentBar__internal_bottomFillColor2 = currentBar._internal_bottomFillColor2) !== null && _currentBar__internal_bottomFillColor2 !== void 0 ? _currentBar__internal_bottomFillColor2 : baselineStyle.bottomFillColor2\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Line: (findBar, lineStyle, barIndex, precomputedBars)=>{\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        var _currentBar__internal_color, _currentBar__internal_color1;\n        return {\n            _internal_barColor: (_currentBar__internal_color = currentBar._internal_color) !== null && _currentBar__internal_color !== void 0 ? _currentBar__internal_color : lineStyle.color,\n            _internal_lineColor: (_currentBar__internal_color1 = currentBar._internal_color) !== null && _currentBar__internal_color1 !== void 0 ? _currentBar__internal_color1 : lineStyle.color\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Histogram: (findBar, histogramStyle, barIndex, precomputedBars)=>{\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        var _currentBar__internal_color;\n        return {\n            _internal_barColor: (_currentBar__internal_color = currentBar._internal_color) !== null && _currentBar__internal_color !== void 0 ? _currentBar__internal_color : histogramStyle.color\n        };\n    }\n};\nclass SeriesBarColorer {\n    _internal_barStyle(barIndex, precomputedBars) {\n        // precomputedBars: {value: [Array BarValues], previousValue: [Array BarValues] | undefined}\n        // Used to avoid binary search if bars are already known\n        return this._private__styleGetter(this._private__findBar, this._private__series._internal_options(), barIndex, precomputedBars);\n    }\n    constructor(series){\n        this._private__findBar = (barIndex, precomputedBars)=>{\n            if (precomputedBars !== undefined) {\n                return precomputedBars._internal_value;\n            }\n            return this._private__series._internal_bars()._internal_valueAt(barIndex);\n        };\n        this._private__series = series;\n        this._private__styleGetter = barStyleFnMap[series._internal_seriesType()];\n    }\n}\n/**\n * Binary function that accepts two arguments (the first of the type of array elements, and the second is always val), and returns a value convertible to bool.\n * The value returned indicates whether the first argument is considered to go before the second.\n * The function shall not modify any of its arguments.\n */ function boundCompare(lower, arr, value, compare) {\n    let start = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0, to = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : arr.length;\n    let count = to - start;\n    while(0 < count){\n        const count2 = count >> 1;\n        const mid = start + count2;\n        if (compare(arr[mid], value) === lower) {\n            start = mid + 1;\n            count -= count2 + 1;\n        } else {\n            count = count2;\n        }\n    }\n    return start;\n}\nconst lowerBound = boundCompare.bind(null, true);\nconst upperBound = boundCompare.bind(null, false);\n/**\n * Search direction if no data found at provided index\n */ var MismatchDirection;\n(function(MismatchDirection) {\n    /**\n     * Search the nearest left item\n     */ MismatchDirection[MismatchDirection[\"NearestLeft\"] = -1] = \"NearestLeft\";\n    /**\n     * Do not search\n     */ MismatchDirection[MismatchDirection[\"None\"] = 0] = \"None\";\n    /**\n     * Search the nearest right item\n     */ MismatchDirection[MismatchDirection[\"NearestRight\"] = 1] = \"NearestRight\";\n})(MismatchDirection || (MismatchDirection = {}));\n// TODO: think about changing it dynamically\nconst CHUNK_SIZE = 30;\n/**\n * PlotList is an array of plot rows\n * each plot row consists of key (index in timescale) and plot value map\n */ class PlotList {\n    // @returns Last row\n    _internal_last() {\n        return this._internal_size() > 0 ? this._private__items[this._private__items.length - 1] : null;\n    }\n    _internal_firstIndex() {\n        return this._internal_size() > 0 ? this._private__indexAt(0) : null;\n    }\n    _internal_lastIndex() {\n        return this._internal_size() > 0 ? this._private__indexAt(this._private__items.length - 1) : null;\n    }\n    _internal_size() {\n        return this._private__items.length;\n    }\n    _internal_isEmpty() {\n        return this._internal_size() === 0;\n    }\n    _internal_contains(index) {\n        return this._private__search(index, 0 /* MismatchDirection.None */ ) !== null;\n    }\n    _internal_valueAt(index) {\n        return this._internal_search(index);\n    }\n    _internal_search(index) {\n        let searchMode = arguments.length > 1 && arguments[1] !== void 0 /* MismatchDirection.None */  ? arguments[1] : 0;\n        const pos = this._private__search(index, searchMode);\n        if (pos === null) {\n            return null;\n        }\n        return {\n            ...this._private__valueAt(pos),\n            _internal_index: this._private__indexAt(pos)\n        };\n    }\n    _internal_rows() {\n        return this._private__items;\n    }\n    _internal_minMaxOnRangeCached(start, end, plots) {\n        // this code works for single series only\n        // could fail after whitespaces implementation\n        if (this._internal_isEmpty()) {\n            return null;\n        }\n        let result = null;\n        for (const plot of plots){\n            const plotMinMax = this._private__minMaxOnRangeCachedImpl(start, end, plot);\n            result = mergeMinMax(result, plotMinMax);\n        }\n        return result;\n    }\n    _internal_setData(plotRows) {\n        this._private__rowSearchCache.clear();\n        this._private__minMaxCache.clear();\n        this._private__items = plotRows;\n        this._private__indices = plotRows.map((plotRow)=>plotRow._internal_index);\n    }\n    // TimePointIndex values for fulfilled data points\n    _internal_indices() {\n        return this._private__indices;\n    }\n    _private__indexAt(offset) {\n        return this._private__items[offset]._internal_index;\n    }\n    _private__valueAt(offset) {\n        return this._private__items[offset];\n    }\n    _private__search(index, searchMode) {\n        const exactPos = this._private__bsearch(index);\n        if (exactPos === null && searchMode !== 0 /* MismatchDirection.None */ ) {\n            switch(searchMode){\n                case -1 /* MismatchDirection.NearestLeft */ :\n                    return this._private__searchNearestLeft(index);\n                case 1 /* MismatchDirection.NearestRight */ :\n                    return this._private__searchNearestRight(index);\n                default:\n                    throw new TypeError('Unknown search mode');\n            }\n        }\n        return exactPos;\n    }\n    _private__searchNearestLeft(index) {\n        let nearestLeftPos = this._private__lowerbound(index);\n        if (nearestLeftPos > 0) {\n            nearestLeftPos = nearestLeftPos - 1;\n        }\n        return nearestLeftPos !== this._private__items.length && this._private__indexAt(nearestLeftPos) < index ? nearestLeftPos : null;\n    }\n    _private__searchNearestRight(index) {\n        const nearestRightPos = this._private__upperbound(index);\n        return nearestRightPos !== this._private__items.length && index < this._private__indexAt(nearestRightPos) ? nearestRightPos : null;\n    }\n    _private__bsearch(index) {\n        const start = this._private__lowerbound(index);\n        if (start !== this._private__items.length && !(index < this._private__items[start]._internal_index)) {\n            return start;\n        }\n        return null;\n    }\n    _private__lowerbound(index) {\n        return lowerBound(this._private__items, index, (a, b)=>a._internal_index < b);\n    }\n    _private__upperbound(index) {\n        return upperBound(this._private__items, index, (a, b)=>a._internal_index > b);\n    }\n    _private__plotMinMax(startIndex, endIndexExclusive, plotIndex) {\n        let result = null;\n        for(let i = startIndex; i < endIndexExclusive; i++){\n            const values = this._private__items[i]._internal_value;\n            const v = values[plotIndex];\n            if (Number.isNaN(v)) {\n                continue;\n            }\n            if (result === null) {\n                result = {\n                    _internal_min: v,\n                    _internal_max: v\n                };\n            } else {\n                if (v < result._internal_min) {\n                    result._internal_min = v;\n                }\n                if (v > result._internal_max) {\n                    result._internal_max = v;\n                }\n            }\n        }\n        return result;\n    }\n    _private__minMaxOnRangeCachedImpl(start, end, plotIndex) {\n        // this code works for single series only\n        // could fail after whitespaces implementation\n        if (this._internal_isEmpty()) {\n            return null;\n        }\n        let result = null;\n        // assume that bar indexes only increase\n        const firstIndex = ensureNotNull(this._internal_firstIndex());\n        const lastIndex = ensureNotNull(this._internal_lastIndex());\n        const s = Math.max(start, firstIndex);\n        const e = Math.min(end, lastIndex);\n        const cachedLow = Math.ceil(s / CHUNK_SIZE) * CHUNK_SIZE;\n        const cachedHigh = Math.max(cachedLow, Math.floor(e / CHUNK_SIZE) * CHUNK_SIZE);\n        {\n            const startIndex = this._private__lowerbound(s);\n            const endIndex = this._private__upperbound(Math.min(e, cachedLow, end)); // non-inclusive end\n            const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);\n            result = mergeMinMax(result, plotMinMax);\n        }\n        let minMaxCache = this._private__minMaxCache.get(plotIndex);\n        if (minMaxCache === undefined) {\n            minMaxCache = new Map();\n            this._private__minMaxCache.set(plotIndex, minMaxCache);\n        }\n        // now go cached\n        for(let c = Math.max(cachedLow + 1, s); c < cachedHigh; c += CHUNK_SIZE){\n            const chunkIndex = Math.floor(c / CHUNK_SIZE);\n            let chunkMinMax = minMaxCache.get(chunkIndex);\n            if (chunkMinMax === undefined) {\n                const chunkStart = this._private__lowerbound(chunkIndex * CHUNK_SIZE);\n                const chunkEnd = this._private__upperbound((chunkIndex + 1) * CHUNK_SIZE - 1);\n                chunkMinMax = this._private__plotMinMax(chunkStart, chunkEnd, plotIndex);\n                minMaxCache.set(chunkIndex, chunkMinMax);\n            }\n            result = mergeMinMax(result, chunkMinMax);\n        }\n        // tail\n        {\n            const startIndex = this._private__lowerbound(cachedHigh);\n            const endIndex = this._private__upperbound(e); // non-inclusive end\n            const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);\n            result = mergeMinMax(result, plotMinMax);\n        }\n        return result;\n    }\n    constructor(){\n        this._private__items = [];\n        this._private__minMaxCache = new Map();\n        this._private__rowSearchCache = new Map();\n        this._private__indices = [];\n    }\n}\nfunction mergeMinMax(first, second) {\n    if (first === null) {\n        return second;\n    } else {\n        if (second === null) {\n            return first;\n        } else {\n            // merge MinMax values\n            const min = Math.min(first._internal_min, second._internal_min);\n            const max = Math.max(first._internal_max, second._internal_max);\n            return {\n                _internal_min: min,\n                _internal_max: max\n            };\n        }\n    }\n}\nfunction createSeriesPlotList() {\n    return new PlotList();\n}\nclass PrimitiveRendererWrapper {\n    _internal_draw(target, isHovered, hitTestData) {\n        this._private__baseRenderer.draw(target);\n    }\n    _internal_drawBackground(target, isHovered, hitTestData) {\n        var _this__private__baseRenderer_drawBackground, _this__private__baseRenderer;\n        (_this__private__baseRenderer_drawBackground = (_this__private__baseRenderer = this._private__baseRenderer).drawBackground) === null || _this__private__baseRenderer_drawBackground === void 0 ? void 0 : _this__private__baseRenderer_drawBackground.call(_this__private__baseRenderer, target);\n    }\n    constructor(baseRenderer){\n        this._private__baseRenderer = baseRenderer;\n    }\n}\nclass PrimitivePaneViewWrapper {\n    _internal_renderer() {\n        var _this__private__cache;\n        const baseRenderer = this._private__paneView.renderer();\n        if (baseRenderer === null) {\n            return null;\n        }\n        if (((_this__private__cache = this._private__cache) === null || _this__private__cache === void 0 ? void 0 : _this__private__cache._internal_base) === baseRenderer) {\n            return this._private__cache._internal_wrapper;\n        }\n        const wrapper = new PrimitiveRendererWrapper(baseRenderer);\n        this._private__cache = {\n            _internal_base: baseRenderer,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_zOrder() {\n        var _this__private__paneView_zOrder, _this__private__paneView;\n        var _this__private__paneView_zOrder1;\n        return (_this__private__paneView_zOrder1 = (_this__private__paneView_zOrder = (_this__private__paneView = this._private__paneView).zOrder) === null || _this__private__paneView_zOrder === void 0 ? void 0 : _this__private__paneView_zOrder.call(_this__private__paneView)) !== null && _this__private__paneView_zOrder1 !== void 0 ? _this__private__paneView_zOrder1 : 'normal';\n    }\n    constructor(paneView){\n        this._private__cache = null;\n        this._private__paneView = paneView;\n    }\n}\nclass PrimitiveWrapper {\n    _internal_primitive() {\n        return this._internal__primitive;\n    }\n    _internal_updateAllViews() {\n        var _this__internal__primitive_updateAllViews, _this__internal__primitive;\n        (_this__internal__primitive_updateAllViews = (_this__internal__primitive = this._internal__primitive).updateAllViews) === null || _this__internal__primitive_updateAllViews === void 0 ? void 0 : _this__internal__primitive_updateAllViews.call(_this__internal__primitive);\n    }\n    _internal_paneViews() {\n        var _this__internal__primitive_paneViews, _this__internal__primitive, _this__private__paneViewsCache;\n        var _this__internal__primitive_paneViews1;\n        const base = (_this__internal__primitive_paneViews1 = (_this__internal__primitive_paneViews = (_this__internal__primitive = this._internal__primitive).paneViews) === null || _this__internal__primitive_paneViews === void 0 ? void 0 : _this__internal__primitive_paneViews.call(_this__internal__primitive)) !== null && _this__internal__primitive_paneViews1 !== void 0 ? _this__internal__primitive_paneViews1 : [];\n        if (((_this__private__paneViewsCache = this._private__paneViewsCache) === null || _this__private__paneViewsCache === void 0 ? void 0 : _this__private__paneViewsCache._internal_base) === base) {\n            return this._private__paneViewsCache._internal_wrapper;\n        }\n        const wrapper = base.map((pw)=>new PrimitivePaneViewWrapper(pw));\n        this._private__paneViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_hitTest(x, y) {\n        var _this__internal__primitive_hitTest, _this__internal__primitive;\n        var _this__internal__primitive_hitTest1;\n        return (_this__internal__primitive_hitTest1 = (_this__internal__primitive_hitTest = (_this__internal__primitive = this._internal__primitive).hitTest) === null || _this__internal__primitive_hitTest === void 0 ? void 0 : _this__internal__primitive_hitTest.call(_this__internal__primitive, x, y)) !== null && _this__internal__primitive_hitTest1 !== void 0 ? _this__internal__primitive_hitTest1 : null;\n    }\n    constructor(primitive){\n        this._private__paneViewsCache = null;\n        this._internal__primitive = primitive;\n    }\n}\nlet PanePrimitiveWrapper$1 = class PanePrimitiveWrapper extends PrimitiveWrapper {\n    _internal_labelPaneViews() {\n        return [];\n    }\n};\nclass SeriesPrimitiveRendererWrapper {\n    _internal_draw(target, isHovered, hitTestData) {\n        this._private__baseRenderer.draw(target);\n    }\n    _internal_drawBackground(target, isHovered, hitTestData) {\n        var _this__private__baseRenderer_drawBackground, _this__private__baseRenderer;\n        (_this__private__baseRenderer_drawBackground = (_this__private__baseRenderer = this._private__baseRenderer).drawBackground) === null || _this__private__baseRenderer_drawBackground === void 0 ? void 0 : _this__private__baseRenderer_drawBackground.call(_this__private__baseRenderer, target);\n    }\n    constructor(baseRenderer){\n        this._private__baseRenderer = baseRenderer;\n    }\n}\nclass SeriesPrimitivePaneViewWrapper {\n    _internal_renderer() {\n        var _this__private__cache;\n        const baseRenderer = this._private__paneView.renderer();\n        if (baseRenderer === null) {\n            return null;\n        }\n        if (((_this__private__cache = this._private__cache) === null || _this__private__cache === void 0 ? void 0 : _this__private__cache._internal_base) === baseRenderer) {\n            return this._private__cache._internal_wrapper;\n        }\n        const wrapper = new SeriesPrimitiveRendererWrapper(baseRenderer);\n        this._private__cache = {\n            _internal_base: baseRenderer,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_zOrder() {\n        var _this__private__paneView_zOrder, _this__private__paneView;\n        var _this__private__paneView_zOrder1;\n        return (_this__private__paneView_zOrder1 = (_this__private__paneView_zOrder = (_this__private__paneView = this._private__paneView).zOrder) === null || _this__private__paneView_zOrder === void 0 ? void 0 : _this__private__paneView_zOrder.call(_this__private__paneView)) !== null && _this__private__paneView_zOrder1 !== void 0 ? _this__private__paneView_zOrder1 : 'normal';\n    }\n    constructor(paneView){\n        this._private__cache = null;\n        this._private__paneView = paneView;\n    }\n}\nfunction getAxisViewData(baseView) {\n    var _baseView_fixedCoordinate, _baseView_visible, _baseView_tickVisible;\n    var _baseView_visible1, _baseView_tickVisible1;\n    return {\n        _internal_text: baseView.text(),\n        _internal_coordinate: baseView.coordinate(),\n        _internal_fixedCoordinate: (_baseView_fixedCoordinate = baseView.fixedCoordinate) === null || _baseView_fixedCoordinate === void 0 ? void 0 : _baseView_fixedCoordinate.call(baseView),\n        _internal_color: baseView.textColor(),\n        _internal_background: baseView.backColor(),\n        _internal_visible: (_baseView_visible1 = (_baseView_visible = baseView.visible) === null || _baseView_visible === void 0 ? void 0 : _baseView_visible.call(baseView)) !== null && _baseView_visible1 !== void 0 ? _baseView_visible1 : true,\n        _internal_tickVisible: (_baseView_tickVisible1 = (_baseView_tickVisible = baseView.tickVisible) === null || _baseView_tickVisible === void 0 ? void 0 : _baseView_tickVisible.call(baseView)) !== null && _baseView_tickVisible1 !== void 0 ? _baseView_tickVisible1 : true\n    };\n}\nclass SeriesPrimitiveTimeAxisViewWrapper {\n    _internal_renderer() {\n        this._private__renderer._internal_setData({\n            _internal_width: this._private__timeScale._internal_width(),\n            ...getAxisViewData(this._private__baseView)\n        });\n        return this._private__renderer;\n    }\n    constructor(baseView, timeScale){\n        this._private__renderer = new TimeAxisViewRenderer();\n        this._private__baseView = baseView;\n        this._private__timeScale = timeScale;\n    }\n}\nclass SeriesPrimitivePriceAxisViewWrapper extends PriceAxisView {\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\n        const data = getAxisViewData(this._private__baseView);\n        commonRendererData._internal_background = data._internal_background;\n        axisRendererData._internal_color = data._internal_color;\n        const additionalPadding = 2 / 12 * this._private__priceScale._internal_fontSize();\n        commonRendererData._internal_additionalPaddingTop = additionalPadding;\n        commonRendererData._internal_additionalPaddingBottom = additionalPadding;\n        commonRendererData._internal_coordinate = data._internal_coordinate;\n        commonRendererData._internal_fixedCoordinate = data._internal_fixedCoordinate;\n        axisRendererData._internal_text = data._internal_text;\n        axisRendererData._internal_visible = data._internal_visible;\n        axisRendererData._internal_tickVisible = data._internal_tickVisible;\n    }\n    constructor(baseView, priceScale){\n        super();\n        this._private__baseView = baseView;\n        this._private__priceScale = priceScale;\n    }\n}\nclass SeriesPrimitiveWrapper extends PrimitiveWrapper {\n    _internal_timeAxisViews() {\n        var _this__internal__primitive_timeAxisViews, _this__internal__primitive, _this__private__timeAxisViewsCache;\n        var _this__internal__primitive_timeAxisViews1;\n        const base = (_this__internal__primitive_timeAxisViews1 = (_this__internal__primitive_timeAxisViews = (_this__internal__primitive = this._internal__primitive).timeAxisViews) === null || _this__internal__primitive_timeAxisViews === void 0 ? void 0 : _this__internal__primitive_timeAxisViews.call(_this__internal__primitive)) !== null && _this__internal__primitive_timeAxisViews1 !== void 0 ? _this__internal__primitive_timeAxisViews1 : [];\n        if (((_this__private__timeAxisViewsCache = this._private__timeAxisViewsCache) === null || _this__private__timeAxisViewsCache === void 0 ? void 0 : _this__private__timeAxisViewsCache._internal_base) === base) {\n            return this._private__timeAxisViewsCache._internal_wrapper;\n        }\n        const timeScale = this._private__series._internal_model()._internal_timeScale();\n        const wrapper = base.map((aw)=>new SeriesPrimitiveTimeAxisViewWrapper(aw, timeScale));\n        this._private__timeAxisViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_priceAxisViews() {\n        var _this__internal__primitive_priceAxisViews, _this__internal__primitive, _this__private__priceAxisViewsCache;\n        var _this__internal__primitive_priceAxisViews1;\n        const base = (_this__internal__primitive_priceAxisViews1 = (_this__internal__primitive_priceAxisViews = (_this__internal__primitive = this._internal__primitive).priceAxisViews) === null || _this__internal__primitive_priceAxisViews === void 0 ? void 0 : _this__internal__primitive_priceAxisViews.call(_this__internal__primitive)) !== null && _this__internal__primitive_priceAxisViews1 !== void 0 ? _this__internal__primitive_priceAxisViews1 : [];\n        if (((_this__private__priceAxisViewsCache = this._private__priceAxisViewsCache) === null || _this__private__priceAxisViewsCache === void 0 ? void 0 : _this__private__priceAxisViewsCache._internal_base) === base) {\n            return this._private__priceAxisViewsCache._internal_wrapper;\n        }\n        const priceScale = this._private__series._internal_priceScale();\n        const wrapper = base.map((aw)=>new SeriesPrimitivePriceAxisViewWrapper(aw, priceScale));\n        this._private__priceAxisViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_priceAxisPaneViews() {\n        var _this__internal__primitive_priceAxisPaneViews, _this__internal__primitive, _this__private__priceAxisPaneViewsCache;\n        var _this__internal__primitive_priceAxisPaneViews1;\n        const base = (_this__internal__primitive_priceAxisPaneViews1 = (_this__internal__primitive_priceAxisPaneViews = (_this__internal__primitive = this._internal__primitive).priceAxisPaneViews) === null || _this__internal__primitive_priceAxisPaneViews === void 0 ? void 0 : _this__internal__primitive_priceAxisPaneViews.call(_this__internal__primitive)) !== null && _this__internal__primitive_priceAxisPaneViews1 !== void 0 ? _this__internal__primitive_priceAxisPaneViews1 : [];\n        if (((_this__private__priceAxisPaneViewsCache = this._private__priceAxisPaneViewsCache) === null || _this__private__priceAxisPaneViewsCache === void 0 ? void 0 : _this__private__priceAxisPaneViewsCache._internal_base) === base) {\n            return this._private__priceAxisPaneViewsCache._internal_wrapper;\n        }\n        const wrapper = base.map((pw)=>new SeriesPrimitivePaneViewWrapper(pw));\n        this._private__priceAxisPaneViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_timeAxisPaneViews() {\n        var _this__internal__primitive_timeAxisPaneViews, _this__internal__primitive, _this__private__timeAxisPaneViewsCache;\n        var _this__internal__primitive_timeAxisPaneViews1;\n        const base = (_this__internal__primitive_timeAxisPaneViews1 = (_this__internal__primitive_timeAxisPaneViews = (_this__internal__primitive = this._internal__primitive).timeAxisPaneViews) === null || _this__internal__primitive_timeAxisPaneViews === void 0 ? void 0 : _this__internal__primitive_timeAxisPaneViews.call(_this__internal__primitive)) !== null && _this__internal__primitive_timeAxisPaneViews1 !== void 0 ? _this__internal__primitive_timeAxisPaneViews1 : [];\n        if (((_this__private__timeAxisPaneViewsCache = this._private__timeAxisPaneViewsCache) === null || _this__private__timeAxisPaneViewsCache === void 0 ? void 0 : _this__private__timeAxisPaneViewsCache._internal_base) === base) {\n            return this._private__timeAxisPaneViewsCache._internal_wrapper;\n        }\n        const wrapper = base.map((pw)=>new SeriesPrimitivePaneViewWrapper(pw));\n        this._private__timeAxisPaneViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_autoscaleInfo(startTimePoint, endTimePoint) {\n        var _this__internal__primitive_autoscaleInfo, _this__internal__primitive;\n        var _this__internal__primitive_autoscaleInfo1;\n        return (_this__internal__primitive_autoscaleInfo1 = (_this__internal__primitive_autoscaleInfo = (_this__internal__primitive = this._internal__primitive).autoscaleInfo) === null || _this__internal__primitive_autoscaleInfo === void 0 ? void 0 : _this__internal__primitive_autoscaleInfo.call(_this__internal__primitive, startTimePoint, endTimePoint)) !== null && _this__internal__primitive_autoscaleInfo1 !== void 0 ? _this__internal__primitive_autoscaleInfo1 : null;\n    }\n    constructor(primitive, series){\n        super(primitive);\n        this._private__timeAxisViewsCache = null;\n        this._private__priceAxisViewsCache = null;\n        this._private__priceAxisPaneViewsCache = null;\n        this._private__timeAxisPaneViewsCache = null;\n        this._private__series = series;\n    }\n}\nfunction extractPrimitivePaneViews(primitives, extractor, zOrder, destination) {\n    primitives.forEach((wrapper)=>{\n        extractor(wrapper).forEach((paneView)=>{\n            if (paneView._internal_zOrder() !== zOrder) {\n                return;\n            }\n            destination.push(paneView);\n        });\n    });\n}\nfunction primitivePaneViewsExtractor(wrapper) {\n    return wrapper._internal_paneViews();\n}\nfunction primitivePricePaneViewsExtractor(wrapper) {\n    return wrapper._internal_priceAxisPaneViews();\n}\nfunction primitiveTimePaneViewsExtractor(wrapper) {\n    return wrapper._internal_timeAxisPaneViews();\n}\nconst lineBasedSeries = [\n    'Area',\n    'Line',\n    'Baseline'\n];\nclass Series extends PriceDataSource {\n    _internal_destroy() {\n        if (this._private__animationTimeoutId !== null) {\n            clearTimeout(this._private__animationTimeoutId);\n        }\n    }\n    _internal_priceLineColor(lastBarColor) {\n        return this._private__options.priceLineColor || lastBarColor;\n    }\n    _internal_lastValueData(globalLast) {\n        const noDataRes = {\n            _internal_noData: true\n        };\n        const priceScale = this._internal_priceScale();\n        if (this._internal_model()._internal_timeScale()._internal_isEmpty() || priceScale._internal_isEmpty() || this._private__data._internal_isEmpty()) {\n            return noDataRes;\n        }\n        const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();\n        const firstValue = this._internal_firstValue();\n        if (visibleBars === null || firstValue === null) {\n            return noDataRes;\n        }\n        // find range of bars inside range\n        // TODO: make it more optimal\n        let bar;\n        let lastIndex;\n        if (globalLast) {\n            const lastBar = this._private__data._internal_last();\n            if (lastBar === null) {\n                return noDataRes;\n            }\n            bar = lastBar;\n            lastIndex = lastBar._internal_index;\n        } else {\n            const endBar = this._private__data._internal_search(visibleBars._internal_right(), -1 /* MismatchDirection.NearestLeft */ );\n            if (endBar === null) {\n                return noDataRes;\n            }\n            bar = this._private__data._internal_valueAt(endBar._internal_index);\n            if (bar === null) {\n                return noDataRes;\n            }\n            lastIndex = endBar._internal_index;\n        }\n        const price = bar._internal_value[3 /* PlotRowValueIndex.Close */ ];\n        const barColorer = this._internal_barColorer();\n        const style = barColorer._internal_barStyle(lastIndex, {\n            _internal_value: bar\n        });\n        const coordinate = priceScale._internal_priceToCoordinate(price, firstValue._internal_value);\n        return {\n            _internal_noData: false,\n            _internal_price: price,\n            _internal_text: priceScale._internal_formatPrice(price, firstValue._internal_value),\n            _internal_formattedPriceAbsolute: priceScale._internal_formatPriceAbsolute(price),\n            _internal_formattedPricePercentage: priceScale._internal_formatPricePercentage(price, firstValue._internal_value),\n            _internal_color: style._internal_barColor,\n            _internal_coordinate: coordinate,\n            _internal_index: lastIndex\n        };\n    }\n    _internal_barColorer() {\n        if (this._private__barColorerCache !== null) {\n            return this._private__barColorerCache;\n        }\n        this._private__barColorerCache = new SeriesBarColorer(this);\n        return this._private__barColorerCache;\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_applyOptions(options) {\n        const targetPriceScaleId = options.priceScaleId;\n        if (targetPriceScaleId !== undefined && targetPriceScaleId !== this._private__options.priceScaleId) {\n            // series cannot do it itself, ask model\n            this._internal_model()._internal_moveSeriesToScale(this, targetPriceScaleId);\n        }\n        merge(this._private__options, options);\n        if (options.priceFormat !== undefined) {\n            this._private__recreateFormatter();\n            // updated formatter might affect rendering  and as a consequence of this the width of price axis might be changed\n            // thus we need to force the chart to do a full update to apply changes correctly\n            // full update is quite heavy operation in terms of performance\n            // but updating formatter looks like quite rare so forcing a full update here shouldn't affect the performance a lot\n            this._internal_model()._internal_fullUpdate();\n        }\n        this._internal_model()._internal_updateSource(this);\n        // a series might affect crosshair by some options (like crosshair markers)\n        // that's why we need to update crosshair as well\n        this._internal_model()._internal_updateCrosshair();\n        this._private__paneView._internal_update('options');\n    }\n    _internal_setData(data, updateInfo) {\n        this._private__data._internal_setData(data);\n        this._private__paneView._internal_update('data');\n        if (this._private__lastPriceAnimationPaneView !== null) {\n            if (updateInfo && updateInfo._internal_lastBarUpdatedOrNewBarsAddedToTheRight) {\n                this._private__lastPriceAnimationPaneView._internal_onNewRealtimeDataReceived();\n            } else if (data.length === 0) {\n                this._private__lastPriceAnimationPaneView._internal_onDataCleared();\n            }\n        }\n        const sourcePane = this._internal_model()._internal_paneForSource(this);\n        this._internal_model()._internal_recalculatePane(sourcePane);\n        this._internal_model()._internal_updateSource(this);\n        this._internal_model()._internal_updateCrosshair();\n        this._internal_model()._internal_lightUpdate();\n    }\n    _internal_createPriceLine(options) {\n        const result = new CustomPriceLine(this, options);\n        this._private__customPriceLines.push(result);\n        this._internal_model()._internal_updateSource(this);\n        return result;\n    }\n    _internal_removePriceLine(line) {\n        const index = this._private__customPriceLines.indexOf(line);\n        if (index !== -1) {\n            this._private__customPriceLines.splice(index, 1);\n        }\n        this._internal_model()._internal_updateSource(this);\n    }\n    _internal_priceLines() {\n        return this._private__customPriceLines;\n    }\n    _internal_seriesType() {\n        return this._private__seriesType;\n    }\n    _internal_firstValue() {\n        const bar = this._internal_firstBar();\n        if (bar === null) {\n            return null;\n        }\n        return {\n            _internal_value: bar._internal_value[3 /* PlotRowValueIndex.Close */ ],\n            _internal_timePoint: bar._internal_time\n        };\n    }\n    _internal_firstBar() {\n        const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();\n        if (visibleBars === null) {\n            return null;\n        }\n        const startTimePoint = visibleBars._internal_left();\n        return this._private__data._internal_search(startTimePoint, 1 /* MismatchDirection.NearestRight */ );\n    }\n    _internal_bars() {\n        return this._private__data;\n    }\n    _internal_dataAt(time) {\n        const prices = this._private__data._internal_valueAt(time);\n        if (prices === null) {\n            return null;\n        }\n        if (this._private__seriesType === 'Bar' || this._private__seriesType === 'Candlestick' || this._private__seriesType === 'Custom') {\n            return {\n                _internal_open: prices._internal_value[0 /* PlotRowValueIndex.Open */ ],\n                _internal_high: prices._internal_value[1 /* PlotRowValueIndex.High */ ],\n                _internal_low: prices._internal_value[2 /* PlotRowValueIndex.Low */ ],\n                _internal_close: prices._internal_value[3 /* PlotRowValueIndex.Close */ ]\n            };\n        } else {\n            return prices._internal_value[3 /* PlotRowValueIndex.Close */ ];\n        }\n    }\n    _internal_topPaneViews(pane) {\n        const res = [];\n        extractPrimitivePaneViews(this._private__primitives, primitivePaneViewsExtractor, 'top', res);\n        const animationPaneView = this._private__lastPriceAnimationPaneView;\n        if (animationPaneView === null || !animationPaneView._internal_visible()) {\n            return res;\n        }\n        if (this._private__animationTimeoutId === null && animationPaneView._internal_animationActive()) {\n            this._private__animationTimeoutId = setTimeout(()=>{\n                this._private__animationTimeoutId = null;\n                this._internal_model()._internal_cursorUpdate();\n            }, 0);\n        }\n        animationPaneView._internal_invalidateStage();\n        res.unshift(animationPaneView);\n        return res;\n    }\n    _internal_paneViews() {\n        const res = [];\n        if (!this._private__isOverlay()) {\n            res.push(this._private__baseHorizontalLineView);\n        }\n        res.push(this._private__paneView, this._private__priceLineView);\n        const priceLineViews = this._private__customPriceLines.map((line)=>line._internal_paneView());\n        res.push(...priceLineViews);\n        extractPrimitivePaneViews(this._private__primitives, primitivePaneViewsExtractor, 'normal', res);\n        return res;\n    }\n    _internal_bottomPaneViews() {\n        return this._private__extractPaneViews(primitivePaneViewsExtractor, 'bottom');\n    }\n    _internal_pricePaneViews(zOrder) {\n        return this._private__extractPaneViews(primitivePricePaneViewsExtractor, zOrder);\n    }\n    _internal_timePaneViews(zOrder) {\n        return this._private__extractPaneViews(primitiveTimePaneViewsExtractor, zOrder);\n    }\n    _internal_primitiveHitTest(x, y) {\n        return this._private__primitives.map((primitive)=>primitive._internal_hitTest(x, y)).filter((result)=>result !== null);\n    }\n    _internal_labelPaneViews() {\n        return [\n            this._private__panePriceAxisView,\n            ...this._private__customPriceLines.map((line)=>line._internal_labelPaneView())\n        ];\n    }\n    _internal_priceAxisViews(pane, priceScale) {\n        if (priceScale !== this._internal__priceScale && !this._private__isOverlay()) {\n            return [];\n        }\n        const result = [\n            ...this._private__priceAxisViews\n        ];\n        for (const customPriceLine of this._private__customPriceLines){\n            result.push(customPriceLine._internal_priceAxisView());\n        }\n        this._private__primitives.forEach((wrapper)=>{\n            result.push(...wrapper._internal_priceAxisViews());\n        });\n        return result;\n    }\n    _internal_timeAxisViews() {\n        const res = [];\n        this._private__primitives.forEach((wrapper)=>{\n            res.push(...wrapper._internal_timeAxisViews());\n        });\n        return res;\n    }\n    _internal_autoscaleInfo(startTimePoint, endTimePoint) {\n        if (this._private__options.autoscaleInfoProvider !== undefined) {\n            const autoscaleInfo = this._private__options.autoscaleInfoProvider(()=>{\n                const res = this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);\n                return res === null ? null : res._internal_toRaw();\n            });\n            return AutoscaleInfoImpl._internal_fromRaw(autoscaleInfo);\n        }\n        return this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);\n    }\n    _internal_minMove() {\n        return this._private__options.priceFormat.minMove;\n    }\n    _internal_formatter() {\n        return this._private__formatter;\n    }\n    _internal_updateAllViews() {\n        var _this__private__lastPriceAnimationPaneView;\n        this._private__paneView._internal_update();\n        for (const priceAxisView of this._private__priceAxisViews){\n            priceAxisView._internal_update();\n        }\n        for (const customPriceLine of this._private__customPriceLines){\n            customPriceLine._internal_update();\n        }\n        this._private__priceLineView._internal_update();\n        this._private__baseHorizontalLineView._internal_update();\n        (_this__private__lastPriceAnimationPaneView = this._private__lastPriceAnimationPaneView) === null || _this__private__lastPriceAnimationPaneView === void 0 ? void 0 : _this__private__lastPriceAnimationPaneView._internal_update();\n        this._private__primitives.forEach((wrapper)=>wrapper._internal_updateAllViews());\n    }\n    _internal_priceScale() {\n        return ensureNotNull(super._internal_priceScale());\n    }\n    _internal_markerDataAtIndex(index) {\n        const getValue = (this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline') && this._private__options.crosshairMarkerVisible;\n        if (!getValue) {\n            return null;\n        }\n        const bar = this._private__data._internal_valueAt(index);\n        if (bar === null) {\n            return null;\n        }\n        const price = bar._internal_value[3 /* PlotRowValueIndex.Close */ ];\n        const radius = this._private__markerRadius();\n        const borderColor = this._private__markerBorderColor();\n        const borderWidth = this._private__markerBorderWidth();\n        const backgroundColor = this._private__markerBackgroundColor(index);\n        return {\n            _internal_price: price,\n            _internal_radius: radius,\n            _internal_borderColor: borderColor,\n            _internal_borderWidth: borderWidth,\n            _internal_backgroundColor: backgroundColor\n        };\n    }\n    _internal_title() {\n        return this._private__options.title;\n    }\n    _internal_visible() {\n        return this._private__options.visible;\n    }\n    _internal_attachPrimitive(primitive) {\n        this._private__primitives.push(new SeriesPrimitiveWrapper(primitive, this));\n    }\n    _internal_detachPrimitive(source) {\n        this._private__primitives = this._private__primitives.filter((wrapper)=>wrapper._internal_primitive() !== source);\n    }\n    _internal_customSeriesPlotValuesBuilder() {\n        if (this._private__seriesType !== 'Custom') {\n            return undefined;\n        }\n        return (data)=>{\n            return this._private__paneView._internal_priceValueBuilder(data);\n        };\n    }\n    _internal_customSeriesWhitespaceCheck() {\n        if (this._private__seriesType !== 'Custom') {\n            return undefined;\n        }\n        return (data)=>{\n            return this._private__paneView._internal_isWhitespace(data);\n        };\n    }\n    _internal_fulfilledIndices() {\n        return this._private__data._internal_indices();\n    }\n    _private__isOverlay() {\n        const priceScale = this._internal_priceScale();\n        return !isDefaultPriceScale(priceScale._internal_id());\n    }\n    _private__autoscaleInfoImpl(startTimePoint, endTimePoint) {\n        if (!isInteger(startTimePoint) || !isInteger(endTimePoint) || this._private__data._internal_isEmpty()) {\n            return null;\n        }\n        // TODO: refactor this\n        // series data is strongly hardcoded to keep bars\n        const plots = this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline' || this._private__seriesType === 'Histogram' ? [\n            3 /* PlotRowValueIndex.Close */ \n        ] : [\n            2 /* PlotRowValueIndex.Low */ ,\n            1 /* PlotRowValueIndex.High */ \n        ];\n        const barsMinMax = this._private__data._internal_minMaxOnRangeCached(startTimePoint, endTimePoint, plots);\n        let range = barsMinMax !== null ? new PriceRangeImpl(barsMinMax._internal_min, barsMinMax._internal_max) : null;\n        let margins = null;\n        if (this._internal_seriesType() === 'Histogram') {\n            const base = this._private__options.base;\n            const rangeWithBase = new PriceRangeImpl(base, base);\n            range = range !== null ? range._internal_merge(rangeWithBase) : rangeWithBase;\n        }\n        this._private__primitives.forEach((primitive)=>{\n            const primitiveAutoscale = primitive._internal_autoscaleInfo(startTimePoint, endTimePoint);\n            if (primitiveAutoscale === null || primitiveAutoscale === void 0 ? void 0 : primitiveAutoscale.priceRange) {\n                const primitiveRange = new PriceRangeImpl(primitiveAutoscale.priceRange.minValue, primitiveAutoscale.priceRange.maxValue);\n                range = range !== null ? range._internal_merge(primitiveRange) : primitiveRange;\n            }\n            if (primitiveAutoscale === null || primitiveAutoscale === void 0 ? void 0 : primitiveAutoscale.margins) {\n                margins = primitiveAutoscale.margins;\n            }\n        });\n        return new AutoscaleInfoImpl(range, margins);\n    }\n    _private__markerRadius() {\n        switch(this._private__seriesType){\n            case 'Line':\n            case 'Area':\n            case 'Baseline':\n                return this._private__options.crosshairMarkerRadius;\n        }\n        return 0;\n    }\n    _private__markerBorderColor() {\n        switch(this._private__seriesType){\n            case 'Line':\n            case 'Area':\n            case 'Baseline':\n                {\n                    const crosshairMarkerBorderColor = this._private__options.crosshairMarkerBorderColor;\n                    if (crosshairMarkerBorderColor.length !== 0) {\n                        return crosshairMarkerBorderColor;\n                    }\n                }\n        }\n        return null;\n    }\n    _private__markerBorderWidth() {\n        switch(this._private__seriesType){\n            case 'Line':\n            case 'Area':\n            case 'Baseline':\n                return this._private__options.crosshairMarkerBorderWidth;\n        }\n        return 0;\n    }\n    _private__markerBackgroundColor(index) {\n        switch(this._private__seriesType){\n            case 'Line':\n            case 'Area':\n            case 'Baseline':\n                {\n                    const crosshairMarkerBackgroundColor = this._private__options.crosshairMarkerBackgroundColor;\n                    if (crosshairMarkerBackgroundColor.length !== 0) {\n                        return crosshairMarkerBackgroundColor;\n                    }\n                }\n        }\n        return this._internal_barColorer()._internal_barStyle(index)._internal_barColor;\n    }\n    _private__recreateFormatter() {\n        switch(this._private__options.priceFormat.type){\n            case 'custom':\n                {\n                    this._private__formatter = {\n                        format: this._private__options.priceFormat.formatter\n                    };\n                    break;\n                }\n            case 'volume':\n                {\n                    this._private__formatter = new VolumeFormatter(this._private__options.priceFormat.precision);\n                    break;\n                }\n            case 'percent':\n                {\n                    this._private__formatter = new PercentageFormatter(this._private__options.priceFormat.precision);\n                    break;\n                }\n            default:\n                {\n                    const priceScale = Math.pow(10, this._private__options.priceFormat.precision);\n                    this._private__formatter = new PriceFormatter(priceScale, this._private__options.priceFormat.minMove * priceScale);\n                }\n        }\n        if (this._internal__priceScale !== null) {\n            this._internal__priceScale._internal_updateFormatter();\n        }\n    }\n    _private__extractPaneViews(extractor, zOrder) {\n        const res = [];\n        extractPrimitivePaneViews(this._private__primitives, extractor, zOrder, res);\n        return res;\n    }\n    constructor(model, seriesType, options, createPaneView, customPaneView){\n        super(model);\n        this._private__data = createSeriesPlotList();\n        this._private__priceLineView = new SeriesPriceLinePaneView(this);\n        this._private__customPriceLines = [];\n        this._private__baseHorizontalLineView = new SeriesHorizontalBaseLinePaneView(this);\n        this._private__lastPriceAnimationPaneView = null;\n        this._private__barColorerCache = null;\n        this._private__animationTimeoutId = null;\n        this._private__primitives = [];\n        this._private__options = options;\n        this._private__seriesType = seriesType;\n        const priceAxisView = new SeriesPriceAxisView(this);\n        this._private__priceAxisViews = [\n            priceAxisView\n        ];\n        this._private__panePriceAxisView = new PanePriceAxisView(priceAxisView, this, model);\n        if (lineBasedSeries.includes(this._private__seriesType)) {\n            this._private__lastPriceAnimationPaneView = new SeriesLastPriceAnimationPaneView(this);\n        }\n        this._private__recreateFormatter();\n        this._private__paneView = createPaneView(this, this._internal_model(), customPaneView);\n    }\n}\nconst magnetPlotRowKeys = [\n    3 /* PlotRowValueIndex.Close */ \n];\nconst magnetOHLCPlotRowKeys = [\n    0 /* PlotRowValueIndex.Open */ ,\n    1 /* PlotRowValueIndex.High */ ,\n    2 /* PlotRowValueIndex.Low */ ,\n    3 /* PlotRowValueIndex.Close */ \n];\nclass Magnet {\n    _internal_align(price, index, pane) {\n        let res = price;\n        if (this._private__options.mode === 0 /* CrosshairMode.Normal */ ) {\n            return res;\n        }\n        const defaultPriceScale = pane._internal_defaultPriceScale();\n        const firstValue = defaultPriceScale._internal_firstValue();\n        if (firstValue === null) {\n            return res;\n        }\n        const y = defaultPriceScale._internal_priceToCoordinate(price, firstValue);\n        // get all serieses from the pane\n        const serieses = pane._internal_dataSources().filter((ds)=>ds instanceof Series);\n        const candidates = serieses.reduce((acc, series)=>{\n            if (pane._internal_isOverlay(series) || !series._internal_visible()) {\n                return acc;\n            }\n            const ps = series._internal_priceScale();\n            const bars = series._internal_bars();\n            if (ps._internal_isEmpty() || !bars._internal_contains(index)) {\n                return acc;\n            }\n            const bar = bars._internal_valueAt(index);\n            if (bar === null) {\n                return acc;\n            }\n            // convert bar to pixels\n            const firstPrice = ensure(series._internal_firstValue());\n            const plotRowKeys = this._private__options.mode === 3 /* CrosshairMode.MagnetOHLC */  ? magnetOHLCPlotRowKeys : magnetPlotRowKeys;\n            return acc.concat(plotRowKeys.map((key)=>ps._internal_priceToCoordinate(bar._internal_value[key], firstPrice._internal_value)));\n        }, []);\n        if (candidates.length === 0) {\n            return res;\n        }\n        candidates.sort((y1, y2)=>Math.abs(y1 - y) - Math.abs(y2 - y));\n        const nearest = candidates[0];\n        res = defaultPriceScale._internal_coordinateToPrice(nearest, firstValue);\n        return res;\n    }\n    constructor(options){\n        this._private__options = options;\n    }\n}\nfunction clamp(value, minVal, maxVal) {\n    return Math.min(Math.max(value, minVal), maxVal);\n}\nfunction isBaseDecimal(value) {\n    if (value < 0) {\n        return false;\n    }\n    for(let current = value; current > 1; current /= 10){\n        if (current % 10 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction greaterOrEqual(x1, x2, epsilon) {\n    return x2 - x1 <= epsilon;\n}\nfunction equal(x1, x2, epsilon) {\n    return Math.abs(x1 - x2) < epsilon;\n}\n// We can't use Math.min(...arr) because that would only support arrays shorter than 65536 items.\nfunction min(arr) {\n    if (arr.length < 1) {\n        throw Error('array is empty');\n    }\n    let minVal = arr[0];\n    for(let i = 1; i < arr.length; ++i){\n        if (arr[i] < minVal) {\n            minVal = arr[i];\n        }\n    }\n    return minVal;\n}\nfunction ceiledEven(x) {\n    const ceiled = Math.ceil(x);\n    return ceiled % 2 !== 0 ? ceiled - 1 : ceiled;\n}\nfunction ceiledOdd(x) {\n    const ceiled = Math.ceil(x);\n    return ceiled % 2 === 0 ? ceiled - 1 : ceiled;\n}\nclass GridRenderer extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal__drawImpl(param) {\n        let { context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio } = param;\n        if (this._private__data === null) {\n            return;\n        }\n        const lineWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n        ctx.lineWidth = lineWidth;\n        strokeInPixel(ctx, ()=>{\n            const data = ensureNotNull(this._private__data);\n            if (data._internal_vertLinesVisible) {\n                ctx.strokeStyle = data._internal_vertLinesColor;\n                setLineStyle(ctx, data._internal_vertLineStyle);\n                ctx.beginPath();\n                for (const timeMark of data._internal_timeMarks){\n                    const x = Math.round(timeMark._internal_coord * horizontalPixelRatio);\n                    ctx.moveTo(x, -lineWidth);\n                    ctx.lineTo(x, bitmapSize.height + lineWidth);\n                }\n                ctx.stroke();\n            }\n            if (data._internal_horzLinesVisible) {\n                ctx.strokeStyle = data._internal_horzLinesColor;\n                setLineStyle(ctx, data._internal_horzLineStyle);\n                ctx.beginPath();\n                for (const priceMark of data._internal_priceMarks){\n                    const y = Math.round(priceMark._internal_coord * verticalPixelRatio);\n                    ctx.moveTo(-lineWidth, y);\n                    ctx.lineTo(bitmapSize.width + lineWidth, y);\n                }\n                ctx.stroke();\n            }\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n    }\n}\nclass GridPaneView {\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            const gridOptions = this._private__pane._internal_model()._internal_options().grid;\n            const data = {\n                _internal_horzLinesVisible: gridOptions.horzLines.visible,\n                _internal_vertLinesVisible: gridOptions.vertLines.visible,\n                _internal_horzLinesColor: gridOptions.horzLines.color,\n                _internal_vertLinesColor: gridOptions.vertLines.color,\n                _internal_horzLineStyle: gridOptions.horzLines.style,\n                _internal_vertLineStyle: gridOptions.vertLines.style,\n                _internal_priceMarks: this._private__pane._internal_defaultPriceScale()._internal_marks(),\n                // need this conversiom because TimeMark is a part of external interface\n                // and fields inside TimeMark are not minified\n                _internal_timeMarks: (this._private__pane._internal_model()._internal_timeScale()._internal_marks() || []).map((tm)=>{\n                    return {\n                        _internal_coord: tm.coord\n                    };\n                })\n            };\n            this._private__renderer._internal_setData(data);\n            this._private__invalidated = false;\n        }\n        return this._private__renderer;\n    }\n    constructor(pane){\n        this._private__renderer = new GridRenderer();\n        this._private__invalidated = true;\n        this._private__pane = pane;\n    }\n}\nclass Grid {\n    _internal_paneView() {\n        return this._private__paneView;\n    }\n    constructor(pane){\n        this._private__paneView = new GridPaneView(pane);\n    }\n}\nconst defLogFormula = {\n    _internal_logicalOffset: 4,\n    _internal_coordOffset: 0.0001\n};\nfunction fromPercent(value, baseValue) {\n    if (baseValue < 0) {\n        value = -value;\n    }\n    return value / 100 * baseValue + baseValue;\n}\nfunction toPercent(value, baseValue) {\n    const result = 100 * (value - baseValue) / baseValue;\n    return baseValue < 0 ? -result : result;\n}\nfunction toPercentRange(priceRange, baseValue) {\n    const minPercent = toPercent(priceRange._internal_minValue(), baseValue);\n    const maxPercent = toPercent(priceRange._internal_maxValue(), baseValue);\n    return new PriceRangeImpl(minPercent, maxPercent);\n}\nfunction fromIndexedTo100(value, baseValue) {\n    value -= 100;\n    if (baseValue < 0) {\n        value = -value;\n    }\n    return value / 100 * baseValue + baseValue;\n}\nfunction toIndexedTo100(value, baseValue) {\n    const result = 100 * (value - baseValue) / baseValue + 100;\n    return baseValue < 0 ? -result : result;\n}\nfunction toIndexedTo100Range(priceRange, baseValue) {\n    const minPercent = toIndexedTo100(priceRange._internal_minValue(), baseValue);\n    const maxPercent = toIndexedTo100(priceRange._internal_maxValue(), baseValue);\n    return new PriceRangeImpl(minPercent, maxPercent);\n}\nfunction toLog(price, logFormula) {\n    const m = Math.abs(price);\n    if (m < 1e-15) {\n        return 0;\n    }\n    const res = Math.log10(m + logFormula._internal_coordOffset) + logFormula._internal_logicalOffset;\n    return price < 0 ? -res : res;\n}\nfunction fromLog(logical, logFormula) {\n    const m = Math.abs(logical);\n    if (m < 1e-15) {\n        return 0;\n    }\n    const res = Math.pow(10, m - logFormula._internal_logicalOffset) - logFormula._internal_coordOffset;\n    return logical < 0 ? -res : res;\n}\nfunction convertPriceRangeToLog(priceRange, logFormula) {\n    if (priceRange === null) {\n        return null;\n    }\n    const min = toLog(priceRange._internal_minValue(), logFormula);\n    const max = toLog(priceRange._internal_maxValue(), logFormula);\n    return new PriceRangeImpl(min, max);\n}\nfunction canConvertPriceRangeFromLog(priceRange, logFormula) {\n    if (priceRange === null) {\n        return false;\n    }\n    const min = fromLog(priceRange._internal_minValue(), logFormula);\n    const max = fromLog(priceRange._internal_maxValue(), logFormula);\n    return isFinite(min) && isFinite(max);\n}\nfunction convertPriceRangeFromLog(priceRange, logFormula) {\n    if (priceRange === null) {\n        return null;\n    }\n    const min = fromLog(priceRange._internal_minValue(), logFormula);\n    const max = fromLog(priceRange._internal_maxValue(), logFormula);\n    return new PriceRangeImpl(min, max);\n}\nfunction logFormulaForPriceRange(range) {\n    if (range === null) {\n        return defLogFormula;\n    }\n    const diff = Math.abs(range._internal_maxValue() - range._internal_minValue());\n    if (diff >= 1 || diff < 1e-15) {\n        return defLogFormula;\n    }\n    const digits = Math.ceil(Math.abs(Math.log10(diff)));\n    const logicalOffset = defLogFormula._internal_logicalOffset + digits;\n    const coordOffset = 1 / Math.pow(10, logicalOffset);\n    return {\n        _internal_logicalOffset: logicalOffset,\n        _internal_coordOffset: coordOffset\n    };\n}\nfunction logFormulasAreSame(f1, f2) {\n    return f1._internal_logicalOffset === f2._internal_logicalOffset && f1._internal_coordOffset === f2._internal_coordOffset;\n}\nclass PriceTickSpanCalculator {\n    _internal_tickSpan(high, low, maxTickSpan) {\n        const minMovement = this._private__base === 0 ? 0 : 1 / this._private__base;\n        let resultTickSpan = Math.pow(10, Math.max(0, Math.ceil(Math.log10(high - low))));\n        let index = 0;\n        let c = this._private__integralDividers[0];\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            // the second part is actual for small with very small values like 1e-10\n            // greaterOrEqual fails for such values\n            const resultTickSpanLargerMinMovement = greaterOrEqual(resultTickSpan, minMovement, 1e-14 /* Constants.TickSpanEpsilon */ ) && resultTickSpan > minMovement + 1e-14 /* Constants.TickSpanEpsilon */ ;\n            const resultTickSpanLargerMaxTickSpan = greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */ );\n            const resultTickSpanLarger1 = greaterOrEqual(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */ );\n            const haveToContinue = resultTickSpanLargerMinMovement && resultTickSpanLargerMaxTickSpan && resultTickSpanLarger1;\n            if (!haveToContinue) {\n                break;\n            }\n            resultTickSpan /= c;\n            c = this._private__integralDividers[++index % this._private__integralDividers.length];\n        }\n        if (resultTickSpan <= minMovement + 1e-14 /* Constants.TickSpanEpsilon */ ) {\n            resultTickSpan = minMovement;\n        }\n        resultTickSpan = Math.max(1, resultTickSpan);\n        if (this._private__fractionalDividers.length > 0 && equal(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */ )) {\n            index = 0;\n            c = this._private__fractionalDividers[0];\n            while(greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */ ) && resultTickSpan > minMovement + 1e-14 /* Constants.TickSpanEpsilon */ ){\n                resultTickSpan /= c;\n                c = this._private__fractionalDividers[++index % this._private__fractionalDividers.length];\n            }\n        }\n        return resultTickSpan;\n    }\n    constructor(base, integralDividers){\n        this._private__base = base;\n        this._private__integralDividers = integralDividers;\n        if (isBaseDecimal(this._private__base)) {\n            this._private__fractionalDividers = [\n                2,\n                2.5,\n                2\n            ];\n        } else {\n            this._private__fractionalDividers = [];\n            for(let baseRest = this._private__base; baseRest !== 1;){\n                if (baseRest % 2 === 0) {\n                    this._private__fractionalDividers.push(2);\n                    baseRest /= 2;\n                } else if (baseRest % 5 === 0) {\n                    this._private__fractionalDividers.push(2, 2.5);\n                    baseRest /= 5;\n                } else {\n                    throw new Error('unexpected base');\n                }\n                if (this._private__fractionalDividers.length > 100) {\n                    throw new Error('something wrong with base');\n                }\n            }\n        }\n    }\n}\nconst TICK_DENSITY = 2.5;\nclass PriceTickMarkBuilder {\n    _internal_tickSpan(high, low) {\n        if (high < low) {\n            throw new Error('high < low');\n        }\n        const scaleHeight = this._private__priceScale._internal_height();\n        const markHeight = this._private__tickMarkHeight();\n        const maxTickSpan = (high - low) * markHeight / scaleHeight;\n        const spanCalculator1 = new PriceTickSpanCalculator(this._private__base, [\n            2,\n            2.5,\n            2\n        ]);\n        const spanCalculator2 = new PriceTickSpanCalculator(this._private__base, [\n            2,\n            2,\n            2.5\n        ]);\n        const spanCalculator3 = new PriceTickSpanCalculator(this._private__base, [\n            2.5,\n            2,\n            2\n        ]);\n        const spans = [];\n        spans.push(spanCalculator1._internal_tickSpan(high, low, maxTickSpan), spanCalculator2._internal_tickSpan(high, low, maxTickSpan), spanCalculator3._internal_tickSpan(high, low, maxTickSpan));\n        return min(spans);\n    }\n    _internal_rebuildTickMarks() {\n        const priceScale = this._private__priceScale;\n        const firstValue = priceScale._internal_firstValue();\n        if (firstValue === null) {\n            this._private__marks = [];\n            return;\n        }\n        const scaleHeight = priceScale._internal_height();\n        const bottom = this._private__coordinateToLogicalFunc(scaleHeight - 1, firstValue);\n        const top = this._private__coordinateToLogicalFunc(0, firstValue);\n        const extraTopBottomMargin = this._private__priceScale._internal_options().entireTextOnly ? this._private__fontHeight() / 2 : 0;\n        const minCoord = extraTopBottomMargin;\n        const maxCoord = scaleHeight - 1 - extraTopBottomMargin;\n        const high = Math.max(bottom, top);\n        const low = Math.min(bottom, top);\n        if (high === low) {\n            this._private__marks = [];\n            return;\n        }\n        const span = this._internal_tickSpan(high, low);\n        this._private__updateMarks(firstValue, span, high, low, minCoord, maxCoord);\n        if (priceScale._internal_hasVisibleEdgeMarks() && this._private__shouldApplyEdgeMarks(span, low, high)) {\n            const padding = this._private__priceScale._internal_getEdgeMarksPadding();\n            this._private__applyEdgeMarks(firstValue, span, minCoord, maxCoord, padding, padding * 2);\n        }\n    }\n    _internal_marks() {\n        return this._private__marks;\n    }\n    _private__fontHeight() {\n        return this._private__priceScale._internal_fontSize();\n    }\n    _private__tickMarkHeight() {\n        return Math.ceil(this._private__fontHeight() * TICK_DENSITY);\n    }\n    _private__updateMarks(firstValue, span, high, low, minCoord, maxCoord) {\n        const marks = this._private__marks;\n        const priceScale = this._private__priceScale;\n        let mod = high % span;\n        mod += mod < 0 ? span : 0;\n        const sign = high >= low ? 1 : -1;\n        let prevCoord = null;\n        let targetIndex = 0;\n        for(let logical = high - mod; logical > low; logical -= span){\n            const coord = this._private__logicalToCoordinateFunc(logical, firstValue, true);\n            // check if there is place for it\n            // this is required for log scale\n            if (prevCoord !== null && Math.abs(coord - prevCoord) < this._private__tickMarkHeight()) {\n                continue;\n            }\n            // check if a tick mark is partially visible and skip it if entireTextOnly is true\n            if (coord < minCoord || coord > maxCoord) {\n                continue;\n            }\n            if (targetIndex < marks.length) {\n                marks[targetIndex]._internal_coord = coord;\n                marks[targetIndex]._internal_label = priceScale._internal_formatLogical(logical);\n            } else {\n                marks.push({\n                    _internal_coord: coord,\n                    _internal_label: priceScale._internal_formatLogical(logical)\n                });\n            }\n            targetIndex++;\n            prevCoord = coord;\n            if (priceScale._internal_isLog()) {\n                // recalc span\n                span = this._internal_tickSpan(logical * sign, low);\n            }\n        }\n        marks.length = targetIndex;\n    }\n    _private__applyEdgeMarks(firstValue, span, minCoord, maxCoord, minPadding, maxPadding) {\n        const marks = this._private__marks;\n        // top boundary\n        const topMark = this._private__computeBoundaryPriceMark(firstValue, minCoord, minPadding, maxPadding);\n        // bottom boundary\n        const bottomMark = this._private__computeBoundaryPriceMark(firstValue, maxCoord, -maxPadding, -minPadding);\n        const spanPx = this._private__logicalToCoordinateFunc(0, firstValue, true) - this._private__logicalToCoordinateFunc(span, firstValue, true);\n        if (marks.length > 0 && marks[0]._internal_coord - topMark._internal_coord < spanPx / 2) {\n            marks.shift();\n        }\n        if (marks.length > 0 && bottomMark._internal_coord - marks[marks.length - 1]._internal_coord < spanPx / 2) {\n            marks.pop();\n        }\n        marks.unshift(topMark);\n        marks.push(bottomMark);\n    }\n    _private__computeBoundaryPriceMark(firstValue, coord, minPadding, maxPadding) {\n        const avgPadding = (minPadding + maxPadding) / 2;\n        const value1 = this._private__coordinateToLogicalFunc(coord + minPadding, firstValue);\n        const value2 = this._private__coordinateToLogicalFunc(coord + maxPadding, firstValue);\n        const minValue = Math.min(value1, value2);\n        const maxValue = Math.max(value1, value2);\n        const valueSpan = Math.max(0.1, this._internal_tickSpan(maxValue, minValue));\n        const value = this._private__coordinateToLogicalFunc(coord + avgPadding, firstValue);\n        const roundedValue = value - value % valueSpan;\n        const roundedCoord = this._private__logicalToCoordinateFunc(roundedValue, firstValue, true);\n        return {\n            _internal_label: this._private__priceScale._internal_formatLogical(roundedValue),\n            _internal_coord: roundedCoord\n        };\n    }\n    _private__shouldApplyEdgeMarks(span, low, high) {\n        let range = ensure(this._private__priceScale._internal_priceRange());\n        if (this._private__priceScale._internal_isLog()) {\n            range = convertPriceRangeFromLog(range, this._private__priceScale._internal_getLogFormula());\n        }\n        return range._internal_minValue() - low < span && high - range._internal_maxValue() < span;\n    }\n    constructor(priceScale, base, coordinateToLogicalFunc, logicalToCoordinateFunc){\n        this._private__marks = [];\n        this._private__priceScale = priceScale;\n        this._private__base = base;\n        this._private__coordinateToLogicalFunc = coordinateToLogicalFunc;\n        this._private__logicalToCoordinateFunc = logicalToCoordinateFunc;\n    }\n}\nfunction sortSources(sources) {\n    return sources.slice().sort((s1, s2)=>{\n        return ensureNotNull(s1._internal_zorder()) - ensureNotNull(s2._internal_zorder());\n    });\n}\n/**\n * Represents the price scale mode.\n */ var PriceScaleMode;\n(function(PriceScaleMode) {\n    /**\n     * Price scale shows prices. Price range changes linearly.\n     */ PriceScaleMode[PriceScaleMode[\"Normal\"] = 0] = \"Normal\";\n    /**\n     * Price scale shows prices. Price range changes logarithmically.\n     */ PriceScaleMode[PriceScaleMode[\"Logarithmic\"] = 1] = \"Logarithmic\";\n    /**\n     * Price scale shows percentage values according the first visible value of the price scale.\n     * The first visible value is 0% in this mode.\n     */ PriceScaleMode[PriceScaleMode[\"Percentage\"] = 2] = \"Percentage\";\n    /**\n     * The same as percentage mode, but the first value is moved to 100.\n     */ PriceScaleMode[PriceScaleMode[\"IndexedTo100\"] = 3] = \"IndexedTo100\";\n})(PriceScaleMode || (PriceScaleMode = {}));\nconst percentageFormatter = new PercentageFormatter();\nconst defaultPriceFormatter = new PriceFormatter(100, 1);\nclass PriceScale {\n    _internal_id() {\n        return this._private__id;\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_applyOptions(options) {\n        merge(this._private__options, options);\n        this._internal_updateFormatter();\n        if (options.mode !== undefined) {\n            this._internal_setMode({\n                _internal_mode: options.mode\n            });\n        }\n        if (options.scaleMargins !== undefined) {\n            const top = ensureDefined(options.scaleMargins.top);\n            const bottom = ensureDefined(options.scaleMargins.bottom);\n            if (top < 0 || top > 1) {\n                throw new Error(\"Invalid top margin - expect value between 0 and 1, given=\".concat(top));\n            }\n            if (bottom < 0 || bottom > 1) {\n                throw new Error(\"Invalid bottom margin - expect value between 0 and 1, given=\".concat(bottom));\n            }\n            if (top + bottom > 1) {\n                throw new Error(\"Invalid margins - sum of margins must be less than 1, given=\".concat(top + bottom));\n            }\n            this._private__invalidateInternalHeightCache();\n            this._private__marksCache = null;\n        }\n    }\n    _internal_isAutoScale() {\n        return this._private__options.autoScale;\n    }\n    _internal_isCustomPriceRange() {\n        return this._private__isCustomPriceRange;\n    }\n    _internal_isLog() {\n        return this._private__options.mode === 1 /* PriceScaleMode.Logarithmic */ ;\n    }\n    _internal_isPercentage() {\n        return this._private__options.mode === 2 /* PriceScaleMode.Percentage */ ;\n    }\n    _internal_isIndexedTo100() {\n        return this._private__options.mode === 3 /* PriceScaleMode.IndexedTo100 */ ;\n    }\n    _internal_getLogFormula() {\n        return this._private__logFormula;\n    }\n    _internal_mode() {\n        return {\n            _internal_autoScale: this._private__options.autoScale,\n            _internal_isInverted: this._private__options.invertScale,\n            _internal_mode: this._private__options.mode\n        };\n    }\n    // eslint-disable-next-line complexity\n    _internal_setMode(newMode) {\n        const oldMode = this._internal_mode();\n        let priceRange = null;\n        if (newMode._internal_autoScale !== undefined) {\n            this._private__options.autoScale = newMode._internal_autoScale;\n        }\n        if (newMode._internal_mode !== undefined) {\n            this._private__options.mode = newMode._internal_mode;\n            if (newMode._internal_mode === 2 /* PriceScaleMode.Percentage */  || newMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */ ) {\n                this._private__options.autoScale = true;\n            }\n            // TODO: Remove after making rebuildTickMarks lazy\n            this._private__invalidatedForRange._internal_isValid = false;\n        }\n        // define which scale converted from\n        if (oldMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */  && newMode._internal_mode !== oldMode._internal_mode) {\n            if (canConvertPriceRangeFromLog(this._private__priceRange, this._private__logFormula)) {\n                priceRange = convertPriceRangeFromLog(this._private__priceRange, this._private__logFormula);\n                if (priceRange !== null) {\n                    this._internal_setPriceRange(priceRange);\n                }\n            } else {\n                this._private__options.autoScale = true;\n            }\n        }\n        // define which scale converted to\n        if (newMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */  && newMode._internal_mode !== oldMode._internal_mode) {\n            priceRange = convertPriceRangeToLog(this._private__priceRange, this._private__logFormula);\n            if (priceRange !== null) {\n                this._internal_setPriceRange(priceRange);\n            }\n        }\n        const modeChanged = oldMode._internal_mode !== this._private__options.mode;\n        if (modeChanged && (oldMode._internal_mode === 2 /* PriceScaleMode.Percentage */  || this._internal_isPercentage())) {\n            this._internal_updateFormatter();\n        }\n        if (modeChanged && (oldMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */  || this._internal_isIndexedTo100())) {\n            this._internal_updateFormatter();\n        }\n        if (newMode._internal_isInverted !== undefined && oldMode._internal_isInverted !== newMode._internal_isInverted) {\n            this._private__options.invertScale = newMode._internal_isInverted;\n            this._private__onIsInvertedChanged();\n        }\n        this._private__modeChanged._internal_fire(oldMode, this._internal_mode());\n    }\n    _internal_modeChanged() {\n        return this._private__modeChanged;\n    }\n    _internal_fontSize() {\n        return this._private__layoutOptions.fontSize;\n    }\n    _internal_height() {\n        return this._private__height;\n    }\n    _internal_setHeight(value) {\n        if (this._private__height === value) {\n            return;\n        }\n        this._private__height = value;\n        this._private__invalidateInternalHeightCache();\n        this._private__marksCache = null;\n    }\n    _internal_internalHeight() {\n        if (this._private__internalHeightCache) {\n            return this._private__internalHeightCache;\n        }\n        const res = this._internal_height() - this._private__topMarginPx() - this._private__bottomMarginPx();\n        this._private__internalHeightCache = res;\n        return res;\n    }\n    _internal_priceRange() {\n        this._private__makeSureItIsValid();\n        return this._private__priceRange;\n    }\n    _internal_setPriceRange(newPriceRange, isForceSetValue) {\n        const oldPriceRange = this._private__priceRange;\n        if (!isForceSetValue && !(oldPriceRange === null && newPriceRange !== null) && (oldPriceRange === null || oldPriceRange._internal_equals(newPriceRange))) {\n            return;\n        }\n        this._private__marksCache = null;\n        this._private__priceRange = newPriceRange;\n    }\n    _internal_setCustomPriceRange(newPriceRange) {\n        this._internal_setPriceRange(newPriceRange);\n        this._private__toggleCustomPriceRange(newPriceRange !== null);\n    }\n    _internal_isEmpty() {\n        this._private__makeSureItIsValid();\n        return this._private__height === 0 || !this._private__priceRange || this._private__priceRange._internal_isEmpty();\n    }\n    _internal_invertedCoordinate(coordinate) {\n        return this._internal_isInverted() ? coordinate : this._internal_height() - 1 - coordinate;\n    }\n    _internal_priceToCoordinate(price, baseValue) {\n        if (this._internal_isPercentage()) {\n            price = toPercent(price, baseValue);\n        } else if (this._internal_isIndexedTo100()) {\n            price = toIndexedTo100(price, baseValue);\n        }\n        return this._private__logicalToCoordinate(price, baseValue);\n    }\n    _internal_pointsArrayToCoordinates(points, baseValue, visibleRange) {\n        this._private__makeSureItIsValid();\n        const bh = this._private__bottomMarginPx();\n        const range = ensureNotNull(this._internal_priceRange());\n        const min = range._internal_minValue();\n        const max = range._internal_maxValue();\n        const ih = this._internal_internalHeight() - 1;\n        const isInverted = this._internal_isInverted();\n        const hmm = ih / (max - min);\n        const fromIndex = visibleRange === undefined ? 0 : visibleRange.from;\n        const toIndex = visibleRange === undefined ? points.length : visibleRange.to;\n        const transformFn = this._private__getCoordinateTransformer();\n        for(let i = fromIndex; i < toIndex; i++){\n            const point = points[i];\n            const price = point._internal_price;\n            if (isNaN(price)) {\n                continue;\n            }\n            let logical = price;\n            if (transformFn !== null) {\n                logical = transformFn(point._internal_price, baseValue);\n            }\n            const invCoordinate = bh + hmm * (logical - min);\n            const coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            point._internal_y = coordinate;\n        }\n    }\n    _internal_barPricesToCoordinates(pricesList, baseValue, visibleRange) {\n        this._private__makeSureItIsValid();\n        const bh = this._private__bottomMarginPx();\n        const range = ensureNotNull(this._internal_priceRange());\n        const min = range._internal_minValue();\n        const max = range._internal_maxValue();\n        const ih = this._internal_internalHeight() - 1;\n        const isInverted = this._internal_isInverted();\n        const hmm = ih / (max - min);\n        const fromIndex = visibleRange === undefined ? 0 : visibleRange.from;\n        const toIndex = visibleRange === undefined ? pricesList.length : visibleRange.to;\n        const transformFn = this._private__getCoordinateTransformer();\n        for(let i = fromIndex; i < toIndex; i++){\n            const bar = pricesList[i];\n            let openLogical = bar._internal_open;\n            let highLogical = bar._internal_high;\n            let lowLogical = bar._internal_low;\n            let closeLogical = bar._internal_close;\n            if (transformFn !== null) {\n                openLogical = transformFn(bar._internal_open, baseValue);\n                highLogical = transformFn(bar._internal_high, baseValue);\n                lowLogical = transformFn(bar._internal_low, baseValue);\n                closeLogical = transformFn(bar._internal_close, baseValue);\n            }\n            let invCoordinate = bh + hmm * (openLogical - min);\n            let coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            bar._internal_openY = coordinate;\n            invCoordinate = bh + hmm * (highLogical - min);\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            bar._internal_highY = coordinate;\n            invCoordinate = bh + hmm * (lowLogical - min);\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            bar._internal_lowY = coordinate;\n            invCoordinate = bh + hmm * (closeLogical - min);\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            bar._internal_closeY = coordinate;\n        }\n    }\n    _internal_coordinateToPrice(coordinate, baseValue) {\n        const logical = this._private__coordinateToLogical(coordinate, baseValue);\n        return this._internal_logicalToPrice(logical, baseValue);\n    }\n    _internal_logicalToPrice(logical, baseValue) {\n        let value = logical;\n        if (this._internal_isPercentage()) {\n            value = fromPercent(value, baseValue);\n        } else if (this._internal_isIndexedTo100()) {\n            value = fromIndexedTo100(value, baseValue);\n        }\n        return value;\n    }\n    _internal_dataSources() {\n        return this._private__dataSources;\n    }\n    _internal_orderedSources() {\n        if (!this._private__cachedOrderedSources) {\n            this._private__cachedOrderedSources = sortSources(this._private__dataSources);\n        }\n        return this._private__cachedOrderedSources;\n    }\n    _internal_addDataSource(source) {\n        if (this._private__dataSources.indexOf(source) !== -1) {\n            return;\n        }\n        this._private__dataSources.push(source);\n        this._internal_updateFormatter();\n        this._internal_invalidateSourcesCache();\n    }\n    _internal_removeDataSource(source) {\n        const index = this._private__dataSources.indexOf(source);\n        if (index === -1) {\n            throw new Error('source is not attached to scale');\n        }\n        this._private__dataSources.splice(index, 1);\n        if (this._private__dataSources.length === 0) {\n            this._internal_setMode({\n                _internal_autoScale: true\n            });\n            // if no sources on price scale let's clear price range cache as well as enabling auto scale\n            this._internal_setPriceRange(null);\n        }\n        this._internal_updateFormatter();\n        this._internal_invalidateSourcesCache();\n    }\n    _internal_firstValue() {\n        // TODO: cache the result\n        let result = null;\n        for (const source of this._private__dataSources){\n            const firstValue = source._internal_firstValue();\n            if (firstValue === null) {\n                continue;\n            }\n            if (result === null || firstValue._internal_timePoint < result._internal_timePoint) {\n                result = firstValue;\n            }\n        }\n        return result === null ? null : result._internal_value;\n    }\n    _internal_isInverted() {\n        return this._private__options.invertScale;\n    }\n    _internal_marks() {\n        const firstValueIsNull = this._internal_firstValue() === null;\n        // do not recalculate marks if firstValueIsNull is true because in this case we'll always get empty result\n        // this could happen in case when a series had some data and then you set empty data to it (in a simplified case)\n        // we could display an empty price scale, but this is not good from UX\n        // so in this case we need to keep an previous marks to display them on the scale\n        // as one of possible examples for this situation could be the following:\n        // let's say you have a study/indicator attached to a price scale and then you decide to stop it, i.e. remove its data because of its visibility\n        // a user will see the previous marks on the scale until you turn on your study back or remove it from the chart completely\n        if (this._private__marksCache !== null && (firstValueIsNull || this._private__marksCache._internal_firstValueIsNull === firstValueIsNull)) {\n            return this._private__marksCache._internal_marks;\n        }\n        this._private__markBuilder._internal_rebuildTickMarks();\n        const marks = this._private__markBuilder._internal_marks();\n        this._private__marksCache = {\n            _internal_marks: marks,\n            _internal_firstValueIsNull: firstValueIsNull\n        };\n        this._private__onMarksChanged._internal_fire();\n        return marks;\n    }\n    _internal_onMarksChanged() {\n        return this._private__onMarksChanged;\n    }\n    _internal_startScale(x) {\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\n            return;\n        }\n        if (this._private__scaleStartPoint !== null || this._private__priceRangeSnapshot !== null) {\n            return;\n        }\n        if (this._internal_isEmpty()) {\n            return;\n        }\n        // invert x\n        this._private__scaleStartPoint = this._private__height - x;\n        this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();\n    }\n    _internal_scaleTo(x) {\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\n            return;\n        }\n        if (this._private__scaleStartPoint === null) {\n            return;\n        }\n        this._internal_setMode({\n            _internal_autoScale: false\n        });\n        // invert x\n        x = this._private__height - x;\n        if (x < 0) {\n            x = 0;\n        }\n        let scaleCoeff = (this._private__scaleStartPoint + (this._private__height - 1) * 0.2) / (x + (this._private__height - 1) * 0.2);\n        const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();\n        scaleCoeff = Math.max(scaleCoeff, 0.1);\n        newPriceRange._internal_scaleAroundCenter(scaleCoeff);\n        this._internal_setPriceRange(newPriceRange);\n    }\n    _internal_endScale() {\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\n            return;\n        }\n        this._private__scaleStartPoint = null;\n        this._private__priceRangeSnapshot = null;\n    }\n    _internal_startScroll(x) {\n        if (this._internal_isAutoScale()) {\n            return;\n        }\n        if (this._private__scrollStartPoint !== null || this._private__priceRangeSnapshot !== null) {\n            return;\n        }\n        if (this._internal_isEmpty()) {\n            return;\n        }\n        this._private__scrollStartPoint = x;\n        this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();\n    }\n    _internal_scrollTo(x) {\n        if (this._internal_isAutoScale()) {\n            return;\n        }\n        if (this._private__scrollStartPoint === null) {\n            return;\n        }\n        const priceUnitsPerPixel = ensureNotNull(this._internal_priceRange())._internal_length() / (this._internal_internalHeight() - 1);\n        let pixelDelta = x - this._private__scrollStartPoint;\n        if (this._internal_isInverted()) {\n            pixelDelta *= -1;\n        }\n        const priceDelta = pixelDelta * priceUnitsPerPixel;\n        const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();\n        newPriceRange._internal_shift(priceDelta);\n        this._internal_setPriceRange(newPriceRange, true);\n        this._private__marksCache = null;\n    }\n    _internal_endScroll() {\n        if (this._internal_isAutoScale()) {\n            return;\n        }\n        if (this._private__scrollStartPoint === null) {\n            return;\n        }\n        this._private__scrollStartPoint = null;\n        this._private__priceRangeSnapshot = null;\n    }\n    _internal_formatter() {\n        if (!this._private__formatter) {\n            this._internal_updateFormatter();\n        }\n        return this._private__formatter;\n    }\n    _internal_formatPrice(price, firstValue) {\n        switch(this._private__options.mode){\n            case 2 /* PriceScaleMode.Percentage */ :\n                return this._private__formatPercentage(toPercent(price, firstValue));\n            case 3 /* PriceScaleMode.IndexedTo100 */ :\n                return this._internal_formatter().format(toIndexedTo100(price, firstValue));\n            default:\n                return this._private__formatPrice(price);\n        }\n    }\n    _internal_formatLogical(logical) {\n        switch(this._private__options.mode){\n            case 2 /* PriceScaleMode.Percentage */ :\n                return this._private__formatPercentage(logical);\n            case 3 /* PriceScaleMode.IndexedTo100 */ :\n                return this._internal_formatter().format(logical);\n            default:\n                return this._private__formatPrice(logical);\n        }\n    }\n    _internal_formatPriceAbsolute(price) {\n        return this._private__formatPrice(price, ensureNotNull(this._private__formatterSource)._internal_formatter());\n    }\n    _internal_formatPricePercentage(price, baseValue) {\n        price = toPercent(price, baseValue);\n        return this._private__formatPercentage(price, percentageFormatter);\n    }\n    _internal_sourcesForAutoScale() {\n        return this._private__dataSources;\n    }\n    _internal_recalculatePriceRange(visibleBars) {\n        this._private__invalidatedForRange = {\n            _internal_visibleBars: visibleBars,\n            _internal_isValid: false\n        };\n    }\n    _internal_updateAllViews() {\n        this._private__dataSources.forEach((s)=>s._internal_updateAllViews());\n    }\n    _internal_hasVisibleEdgeMarks() {\n        return this._private__options.ensureEdgeTickMarksVisible && this._internal_isAutoScale();\n    }\n    _internal_getEdgeMarksPadding() {\n        return this._internal_fontSize() / 2;\n    }\n    _internal_updateFormatter() {\n        this._private__marksCache = null;\n        let zOrder = Infinity;\n        this._private__formatterSource = null;\n        // choose source with the lowest zorder\n        for (const source of this._private__dataSources){\n            if (source._internal_zorder() < zOrder) {\n                zOrder = source._internal_zorder();\n                this._private__formatterSource = source;\n            }\n        }\n        let base = 100;\n        if (this._private__formatterSource !== null) {\n            base = Math.round(1 / this._private__formatterSource._internal_minMove());\n        }\n        this._private__formatter = defaultPriceFormatter;\n        if (this._internal_isPercentage()) {\n            this._private__formatter = percentageFormatter;\n            base = 100;\n        } else if (this._internal_isIndexedTo100()) {\n            this._private__formatter = new PriceFormatter(100, 1);\n            base = 100;\n        } else {\n            if (this._private__formatterSource !== null) {\n                // user\n                this._private__formatter = this._private__formatterSource._internal_formatter();\n            }\n        }\n        this._private__markBuilder = new PriceTickMarkBuilder(this, base, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));\n        this._private__markBuilder._internal_rebuildTickMarks();\n    }\n    _internal_invalidateSourcesCache() {\n        this._private__cachedOrderedSources = null;\n    }\n    _internal_colorParser() {\n        return this._private__colorParser;\n    }\n    _private__toggleCustomPriceRange(v) {\n        this._private__isCustomPriceRange = v;\n    }\n    _private__topMarginPx() {\n        return this._internal_isInverted() ? this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow : this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove;\n    }\n    _private__bottomMarginPx() {\n        return this._internal_isInverted() ? this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove : this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow;\n    }\n    _private__makeSureItIsValid() {\n        if (!this._private__invalidatedForRange._internal_isValid) {\n            this._private__invalidatedForRange._internal_isValid = true;\n            this._private__recalculatePriceRangeImpl();\n        }\n    }\n    _private__invalidateInternalHeightCache() {\n        this._private__internalHeightCache = null;\n    }\n    _private__logicalToCoordinate(logical, baseValue) {\n        this._private__makeSureItIsValid();\n        if (this._internal_isEmpty()) {\n            return 0;\n        }\n        logical = this._internal_isLog() && logical ? toLog(logical, this._private__logFormula) : logical;\n        const range = ensureNotNull(this._internal_priceRange());\n        const invCoordinate = this._private__bottomMarginPx() + (this._internal_internalHeight() - 1) * (logical - range._internal_minValue()) / range._internal_length();\n        const coordinate = this._internal_invertedCoordinate(invCoordinate);\n        return coordinate;\n    }\n    _private__coordinateToLogical(coordinate, baseValue) {\n        this._private__makeSureItIsValid();\n        if (this._internal_isEmpty()) {\n            return 0;\n        }\n        const invCoordinate = this._internal_invertedCoordinate(coordinate);\n        const range = ensureNotNull(this._internal_priceRange());\n        const logical = range._internal_minValue() + range._internal_length() * ((invCoordinate - this._private__bottomMarginPx()) / (this._internal_internalHeight() - 1));\n        return this._internal_isLog() ? fromLog(logical, this._private__logFormula) : logical;\n    }\n    _private__onIsInvertedChanged() {\n        this._private__marksCache = null;\n        this._private__markBuilder._internal_rebuildTickMarks();\n    }\n    // eslint-disable-next-line complexity\n    _private__recalculatePriceRangeImpl() {\n        if (this._internal_isCustomPriceRange() && !this._internal_isAutoScale()) {\n            return;\n        }\n        const visibleBars = this._private__invalidatedForRange._internal_visibleBars;\n        if (visibleBars === null) {\n            return;\n        }\n        let priceRange = null;\n        const sources = this._internal_sourcesForAutoScale();\n        let marginAbove = 0;\n        let marginBelow = 0;\n        for (const source of sources){\n            if (!source._internal_visible()) {\n                continue;\n            }\n            const firstValue = source._internal_firstValue();\n            if (firstValue === null) {\n                continue;\n            }\n            const autoScaleInfo = source._internal_autoscaleInfo(visibleBars._internal_left(), visibleBars._internal_right());\n            let sourceRange = autoScaleInfo && autoScaleInfo._internal_priceRange();\n            if (sourceRange !== null) {\n                switch(this._private__options.mode){\n                    case 1 /* PriceScaleMode.Logarithmic */ :\n                        sourceRange = convertPriceRangeToLog(sourceRange, this._private__logFormula);\n                        break;\n                    case 2 /* PriceScaleMode.Percentage */ :\n                        sourceRange = toPercentRange(sourceRange, firstValue._internal_value);\n                        break;\n                    case 3 /* PriceScaleMode.IndexedTo100 */ :\n                        sourceRange = toIndexedTo100Range(sourceRange, firstValue._internal_value);\n                        break;\n                }\n                if (priceRange === null) {\n                    priceRange = sourceRange;\n                } else {\n                    priceRange = priceRange._internal_merge(ensureNotNull(sourceRange));\n                }\n                if (autoScaleInfo !== null) {\n                    const margins = autoScaleInfo._internal_margins();\n                    if (margins !== null) {\n                        marginAbove = Math.max(marginAbove, margins.above);\n                        marginBelow = Math.max(marginBelow, margins.below);\n                    }\n                }\n            }\n        }\n        if (this._internal_hasVisibleEdgeMarks()) {\n            marginAbove = Math.max(marginAbove, this._internal_getEdgeMarksPadding());\n            marginBelow = Math.max(marginBelow, this._internal_getEdgeMarksPadding());\n        }\n        if (marginAbove !== this._private__marginAbove || marginBelow !== this._private__marginBelow) {\n            this._private__marginAbove = marginAbove;\n            this._private__marginBelow = marginBelow;\n            this._private__marksCache = null;\n            this._private__invalidateInternalHeightCache();\n        }\n        if (priceRange !== null) {\n            // keep current range is new is empty\n            if (priceRange._internal_minValue() === priceRange._internal_maxValue()) {\n                const formatterSource = this._private__formatterSource;\n                const minMove = formatterSource === null || this._internal_isPercentage() || this._internal_isIndexedTo100() ? 1 : formatterSource._internal_minMove();\n                // if price range is degenerated to 1 point let's extend it by 10 min move values\n                // to avoid incorrect range and empty (blank) scale (in case of min tick much greater than 1)\n                const extendValue = 5 * minMove;\n                if (this._internal_isLog()) {\n                    priceRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);\n                }\n                priceRange = new PriceRangeImpl(priceRange._internal_minValue() - extendValue, priceRange._internal_maxValue() + extendValue);\n                if (this._internal_isLog()) {\n                    priceRange = convertPriceRangeToLog(priceRange, this._private__logFormula);\n                }\n            }\n            if (this._internal_isLog()) {\n                const rawRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);\n                const newLogFormula = logFormulaForPriceRange(rawRange);\n                if (!logFormulasAreSame(newLogFormula, this._private__logFormula)) {\n                    const rawSnapshot = this._private__priceRangeSnapshot !== null ? convertPriceRangeFromLog(this._private__priceRangeSnapshot, this._private__logFormula) : null;\n                    this._private__logFormula = newLogFormula;\n                    priceRange = convertPriceRangeToLog(rawRange, newLogFormula);\n                    if (rawSnapshot !== null) {\n                        this._private__priceRangeSnapshot = convertPriceRangeToLog(rawSnapshot, newLogFormula);\n                    }\n                }\n            }\n            this._internal_setPriceRange(priceRange);\n        } else {\n            // reset empty to default\n            if (this._private__priceRange === null) {\n                this._internal_setPriceRange(new PriceRangeImpl(-0.5, 0.5));\n                this._private__logFormula = logFormulaForPriceRange(null);\n            }\n        }\n    }\n    _private__getCoordinateTransformer() {\n        if (this._internal_isPercentage()) {\n            return toPercent;\n        } else if (this._internal_isIndexedTo100()) {\n            return toIndexedTo100;\n        } else if (this._internal_isLog()) {\n            return (price)=>toLog(price, this._private__logFormula);\n        }\n        return null;\n    }\n    _private__formatValue(value, formatter, fallbackFormatter) {\n        if (formatter === undefined) {\n            if (fallbackFormatter === undefined) {\n                fallbackFormatter = this._internal_formatter();\n            }\n            return fallbackFormatter.format(value);\n        }\n        return formatter(value);\n    }\n    _private__formatPrice(price, fallbackFormatter) {\n        return this._private__formatValue(price, this._private__localizationOptions.priceFormatter, fallbackFormatter);\n    }\n    _private__formatPercentage(percentage, fallbackFormatter) {\n        return this._private__formatValue(percentage, this._private__localizationOptions.percentageFormatter, fallbackFormatter);\n    }\n    constructor(id, options, layoutOptions, localizationOptions, colorParser){\n        this._private__height = 0;\n        this._private__internalHeightCache = null;\n        this._private__priceRange = null;\n        this._private__priceRangeSnapshot = null;\n        this._private__invalidatedForRange = {\n            _internal_isValid: false,\n            _internal_visibleBars: null\n        };\n        this._private__isCustomPriceRange = false;\n        this._private__marginAbove = 0;\n        this._private__marginBelow = 0;\n        this._private__onMarksChanged = new Delegate();\n        this._private__modeChanged = new Delegate();\n        this._private__dataSources = [];\n        this._private__formatterSource = null;\n        this._private__cachedOrderedSources = null;\n        this._private__marksCache = null;\n        this._private__scaleStartPoint = null;\n        this._private__scrollStartPoint = null;\n        this._private__formatter = defaultPriceFormatter;\n        this._private__logFormula = logFormulaForPriceRange(null);\n        this._private__id = id;\n        this._private__options = options;\n        this._private__layoutOptions = layoutOptions;\n        this._private__localizationOptions = localizationOptions;\n        this._private__colorParser = colorParser;\n        this._private__markBuilder = new PriceTickMarkBuilder(this, 100, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));\n    }\n}\nfunction isSeries(source) {\n    return source instanceof Series;\n}\nconst DEFAULT_STRETCH_FACTOR = 1000;\nconst MIN_PANE_HEIGHT = 30;\nclass Pane {\n    _internal_applyScaleOptions(options) {\n        if (options.leftPriceScale) {\n            this._private__leftPriceScale._internal_applyOptions(options.leftPriceScale);\n        }\n        if (options.rightPriceScale) {\n            this._private__rightPriceScale._internal_applyOptions(options.rightPriceScale);\n        }\n        if (options.localization) {\n            this._private__leftPriceScale._internal_updateFormatter();\n            this._private__rightPriceScale._internal_updateFormatter();\n        }\n        if (options.overlayPriceScales) {\n            const sourceArrays = Array.from(this._private__overlaySourcesByScaleId.values());\n            for (const arr of sourceArrays){\n                const priceScale = ensureNotNull(arr[0]._internal_priceScale());\n                priceScale._internal_applyOptions(options.overlayPriceScales);\n                if (options.localization) {\n                    priceScale._internal_updateFormatter();\n                }\n            }\n        }\n    }\n    _internal_priceScaleById(id) {\n        switch(id){\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n            case \"left\" /* DefaultPriceScaleId.Left */ :\n                {\n                    return this._private__leftPriceScale;\n                }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n            case \"right\" /* DefaultPriceScaleId.Right */ :\n                {\n                    return this._private__rightPriceScale;\n                }\n        }\n        if (this._private__overlaySourcesByScaleId.has(id)) {\n            return ensureDefined(this._private__overlaySourcesByScaleId.get(id))[0]._internal_priceScale();\n        }\n        return null;\n    }\n    _internal_destroy() {\n        this._internal_model()._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);\n        this._private__leftPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);\n        this._private__rightPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);\n        this._private__dataSources.forEach((source)=>{\n            if (source._internal_destroy) {\n                source._internal_destroy();\n            }\n        });\n        this._private__primitives = this._private__primitives.filter((primitive)=>{\n            const p = primitive._internal_primitive();\n            if (p.detached) {\n                p.detached();\n            }\n            return false;\n        });\n        this._private__destroyed._internal_fire();\n    }\n    _internal_stretchFactor() {\n        return this._private__stretchFactor;\n    }\n    _internal_setStretchFactor(factor) {\n        this._private__stretchFactor = factor;\n    }\n    _internal_model() {\n        return this._private__model;\n    }\n    _internal_width() {\n        return this._private__width;\n    }\n    _internal_height() {\n        return this._private__height;\n    }\n    _internal_setWidth(width) {\n        this._private__width = width;\n        this._internal_updateAllSources();\n    }\n    _internal_setHeight(height) {\n        this._private__height = height;\n        this._private__leftPriceScale._internal_setHeight(height);\n        this._private__rightPriceScale._internal_setHeight(height);\n        // process overlays\n        this._private__dataSources.forEach((ds)=>{\n            if (this._internal_isOverlay(ds)) {\n                const priceScale = ds._internal_priceScale();\n                if (priceScale !== null) {\n                    priceScale._internal_setHeight(height);\n                }\n            }\n        });\n        this._internal_updateAllSources();\n    }\n    _internal_series() {\n        return this._private__dataSources.filter(isSeries);\n    }\n    _internal_dataSources() {\n        return this._private__dataSources;\n    }\n    _internal_isOverlay(source) {\n        const priceScale = source._internal_priceScale();\n        if (priceScale === null) {\n            return true;\n        }\n        return this._private__leftPriceScale !== priceScale && this._private__rightPriceScale !== priceScale;\n    }\n    _internal_addDataSource(source, targetScaleId, keepSourcesOrder) {\n        this._private__insertDataSource(source, targetScaleId, keepSourcesOrder ? source._internal_zorder() : this._private__dataSources.length);\n    }\n    _internal_removeDataSource(source, keepSourceOrder) {\n        const index = this._private__dataSources.indexOf(source);\n        assert(index !== -1, 'removeDataSource: invalid data source');\n        this._private__dataSources.splice(index, 1);\n        if (!keepSourceOrder) {\n            this._private__dataSources.forEach((ds, i)=>ds._internal_setZorder(i));\n        }\n        const priceScaleId = ensureNotNull(source._internal_priceScale())._internal_id();\n        if (this._private__overlaySourcesByScaleId.has(priceScaleId)) {\n            const overlaySources = ensureDefined(this._private__overlaySourcesByScaleId.get(priceScaleId));\n            const overlayIndex = overlaySources.indexOf(source);\n            if (overlayIndex !== -1) {\n                overlaySources.splice(overlayIndex, 1);\n                if (overlaySources.length === 0) {\n                    this._private__overlaySourcesByScaleId.delete(priceScaleId);\n                }\n            }\n        }\n        const priceScale = source._internal_priceScale();\n        // if source has owner, it returns owner's price scale\n        // and it does not have source in their list\n        if (priceScale && priceScale._internal_dataSources().indexOf(source) >= 0) {\n            priceScale._internal_removeDataSource(source);\n            this._internal_recalculatePriceScale(priceScale);\n        }\n        this._private__cachedOrderedSources = null;\n    }\n    _internal_priceScalePosition(priceScale) {\n        if (priceScale === this._private__leftPriceScale) {\n            return 'left';\n        }\n        if (priceScale === this._private__rightPriceScale) {\n            return 'right';\n        }\n        return 'overlay';\n    }\n    _internal_leftPriceScale() {\n        return this._private__leftPriceScale;\n    }\n    _internal_rightPriceScale() {\n        return this._private__rightPriceScale;\n    }\n    _internal_startScalePrice(priceScale, x) {\n        priceScale._internal_startScale(x);\n    }\n    _internal_scalePriceTo(priceScale, x) {\n        priceScale._internal_scaleTo(x);\n        // TODO: be more smart and update only affected views\n        this._internal_updateAllSources();\n    }\n    _internal_endScalePrice(priceScale) {\n        priceScale._internal_endScale();\n    }\n    _internal_startScrollPrice(priceScale, x) {\n        priceScale._internal_startScroll(x);\n    }\n    _internal_scrollPriceTo(priceScale, x) {\n        priceScale._internal_scrollTo(x);\n        this._internal_updateAllSources();\n    }\n    _internal_endScrollPrice(priceScale) {\n        priceScale._internal_endScroll();\n    }\n    _internal_updateAllSources() {\n        this._private__dataSources.forEach((source)=>{\n            source._internal_updateAllViews();\n        });\n    }\n    _internal_defaultPriceScale() {\n        let priceScale = null;\n        if (this._private__model._internal_options().rightPriceScale.visible && this._private__rightPriceScale._internal_dataSources().length !== 0) {\n            priceScale = this._private__rightPriceScale;\n        } else if (this._private__model._internal_options().leftPriceScale.visible && this._private__leftPriceScale._internal_dataSources().length !== 0) {\n            priceScale = this._private__leftPriceScale;\n        } else if (this._private__dataSources.length !== 0) {\n            priceScale = this._private__dataSources[0]._internal_priceScale();\n        }\n        if (priceScale === null) {\n            priceScale = this._private__rightPriceScale;\n        }\n        return priceScale;\n    }\n    _internal_defaultVisiblePriceScale() {\n        let priceScale = null;\n        if (this._private__model._internal_options().rightPriceScale.visible) {\n            priceScale = this._private__rightPriceScale;\n        } else if (this._private__model._internal_options().leftPriceScale.visible) {\n            priceScale = this._private__leftPriceScale;\n        }\n        return priceScale;\n    }\n    _internal_recalculatePriceScale(priceScale) {\n        if (priceScale === null || !priceScale._internal_isAutoScale()) {\n            return;\n        }\n        this._private__recalculatePriceScaleImpl(priceScale);\n    }\n    _internal_resetPriceScale(priceScale) {\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\n        priceScale._internal_setMode({\n            _internal_autoScale: true\n        });\n        if (visibleBars !== null) {\n            priceScale._internal_recalculatePriceRange(visibleBars);\n        }\n        this._internal_updateAllSources();\n    }\n    _internal_momentaryAutoScale() {\n        this._private__recalculatePriceScaleImpl(this._private__leftPriceScale);\n        this._private__recalculatePriceScaleImpl(this._private__rightPriceScale);\n    }\n    _internal_recalculate() {\n        this._internal_recalculatePriceScale(this._private__leftPriceScale);\n        this._internal_recalculatePriceScale(this._private__rightPriceScale);\n        this._private__dataSources.forEach((ds)=>{\n            if (this._internal_isOverlay(ds)) {\n                this._internal_recalculatePriceScale(ds._internal_priceScale());\n            }\n        });\n        this._internal_updateAllSources();\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_orderedSources() {\n        if (this._private__cachedOrderedSources === null) {\n            this._private__cachedOrderedSources = sortSources(this._private__dataSources);\n        }\n        return this._private__cachedOrderedSources;\n    }\n    _internal_setSeriesOrder(series, order) {\n        order = clamp(order, 0, this._private__dataSources.length - 1);\n        const index = this._private__dataSources.indexOf(series);\n        assert(index !== -1, 'setSeriesOrder: invalid data source');\n        this._private__dataSources.splice(index, 1);\n        this._private__dataSources.splice(order, 0, series);\n        this._private__dataSources.forEach((ps, i)=>ps._internal_setZorder(i));\n        this._private__cachedOrderedSources = null;\n        for (const ps of [\n            this._private__leftPriceScale,\n            this._private__rightPriceScale\n        ]){\n            ps._internal_invalidateSourcesCache();\n            ps._internal_updateFormatter();\n        }\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_orderedSeries() {\n        return this._internal_orderedSources().filter(isSeries);\n    }\n    _internal_onDestroyed() {\n        return this._private__destroyed;\n    }\n    _internal_grid() {\n        return this._private__grid;\n    }\n    _internal_attachPrimitive(primitive) {\n        this._private__primitives.push(new PanePrimitiveWrapper$1(primitive));\n    }\n    _internal_detachPrimitive(source) {\n        this._private__primitives = this._private__primitives.filter((wrapper)=>wrapper._internal_primitive() !== source);\n        if (source.detached) {\n            source.detached();\n        }\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_primitives() {\n        return this._private__primitives;\n    }\n    _internal_primitiveHitTest(x, y) {\n        return this._private__primitives.map((primitive)=>primitive._internal_hitTest(x, y)).filter((result)=>result !== null);\n    }\n    _private__recalculatePriceScaleImpl(priceScale) {\n        // TODO: can use this checks\n        const sourceForAutoScale = priceScale._internal_sourcesForAutoScale();\n        if (sourceForAutoScale && sourceForAutoScale.length > 0 && !this._private__timeScale._internal_isEmpty()) {\n            const visibleBars = this._private__timeScale._internal_visibleStrictRange();\n            if (visibleBars !== null) {\n                priceScale._internal_recalculatePriceRange(visibleBars);\n            }\n        }\n        priceScale._internal_updateAllViews();\n    }\n    _private__insertDataSource(source, priceScaleId, order) {\n        let priceScale = this._internal_priceScaleById(priceScaleId);\n        if (priceScale === null) {\n            priceScale = this._private__createPriceScale(priceScaleId, this._private__model._internal_options().overlayPriceScales);\n        }\n        this._private__dataSources.splice(order, 0, source);\n        if (!isDefaultPriceScale(priceScaleId)) {\n            const overlaySources = this._private__overlaySourcesByScaleId.get(priceScaleId) || [];\n            overlaySources.push(source);\n            this._private__overlaySourcesByScaleId.set(priceScaleId, overlaySources);\n        }\n        source._internal_setZorder(order);\n        priceScale._internal_addDataSource(source);\n        source._internal_setPriceScale(priceScale);\n        this._internal_recalculatePriceScale(priceScale);\n        this._private__cachedOrderedSources = null;\n    }\n    _private__onPriceScaleModeChanged(priceScale, oldMode, newMode) {\n        if (oldMode._internal_mode === newMode._internal_mode) {\n            return;\n        }\n        // momentary auto scale if we toggle percentage/indexedTo100 mode\n        this._private__recalculatePriceScaleImpl(priceScale);\n    }\n    _private__createPriceScale(id, options) {\n        const actualOptions = {\n            visible: true,\n            autoScale: true,\n            ...clone(options)\n        };\n        const priceScale = new PriceScale(id, actualOptions, this._private__model._internal_options()['layout'], this._private__model._internal_options().localization, this._private__model._internal_colorParser());\n        priceScale._internal_setHeight(this._internal_height());\n        return priceScale;\n    }\n    constructor(timeScale, model){\n        this._private__dataSources = [];\n        this._private__overlaySourcesByScaleId = new Map();\n        this._private__height = 0;\n        this._private__width = 0;\n        this._private__stretchFactor = DEFAULT_STRETCH_FACTOR;\n        this._private__cachedOrderedSources = null;\n        this._private__destroyed = new Delegate();\n        this._private__primitives = [];\n        this._private__timeScale = timeScale;\n        this._private__model = model;\n        this._private__grid = new Grid(this);\n        const options = model._internal_options();\n        this._private__leftPriceScale = this._private__createPriceScale(\"left\" /* DefaultPriceScaleId.Left */ , options.leftPriceScale);\n        this._private__rightPriceScale = this._private__createPriceScale(\"right\" /* DefaultPriceScaleId.Right */ , options.rightPriceScale);\n        this._private__leftPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__leftPriceScale), this);\n        this._private__rightPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__rightPriceScale), this);\n        this._internal_applyScaleOptions(options);\n    }\n}\n// returns true if item is above reference\nfunction comparePrimitiveZOrder(item, reference) {\n    return !reference || item === 'top' && reference !== 'top' || item === 'normal' && reference === 'bottom';\n}\nfunction findBestPrimitiveHitTest(sources, x, y) {\n    let bestPrimitiveHit;\n    let bestHitSource;\n    for (const source of sources){\n        var _source__internal_primitiveHitTest;\n        var _source__internal_primitiveHitTest1;\n        const primitiveHitResults = (_source__internal_primitiveHitTest1 = (_source__internal_primitiveHitTest = source._internal_primitiveHitTest) === null || _source__internal_primitiveHitTest === void 0 ? void 0 : _source__internal_primitiveHitTest.call(source, x, y)) !== null && _source__internal_primitiveHitTest1 !== void 0 ? _source__internal_primitiveHitTest1 : [];\n        for (const hitResult of primitiveHitResults){\n            if (comparePrimitiveZOrder(hitResult.zOrder, bestPrimitiveHit === null || bestPrimitiveHit === void 0 ? void 0 : bestPrimitiveHit.zOrder)) {\n                bestPrimitiveHit = hitResult;\n                bestHitSource = source;\n            }\n        }\n    }\n    if (!bestPrimitiveHit || !bestHitSource) {\n        return null;\n    }\n    return {\n        _internal_hit: bestPrimitiveHit,\n        _internal_source: bestHitSource\n    };\n}\nfunction convertPrimitiveHitResult(primitiveHit) {\n    return {\n        _internal_source: primitiveHit._internal_source,\n        _internal_object: {\n            _internal_externalId: primitiveHit._internal_hit.externalId\n        },\n        _internal_cursorStyle: primitiveHit._internal_hit.cursorStyle\n    };\n}\n/**\n * Performs a hit test on a collection of pane views to determine which view and object\n * is located at a given coordinate (x, y) and returns the matching pane view and\n * hit-tested result object, or null if no match is found.\n */ function hitTestPaneView(paneViews, x, y, pane) {\n    for (const paneView of paneViews){\n        const renderer = paneView._internal_renderer(pane);\n        if (renderer !== null && renderer._internal_hitTest) {\n            const result = renderer._internal_hitTest(x, y);\n            if (result !== null) {\n                return {\n                    _internal_view: paneView,\n                    _internal_object: result\n                };\n            }\n        }\n    }\n    return null;\n}\nfunction isDataSource(source) {\n    return source._internal_paneViews !== undefined;\n}\n// eslint-disable-next-line complexity\nfunction hitTestPane(pane, x, y) {\n    const sources = [\n        pane,\n        ...pane._internal_orderedSources()\n    ];\n    const bestPrimitiveHit = findBestPrimitiveHitTest(sources, x, y);\n    if ((bestPrimitiveHit === null || bestPrimitiveHit === void 0 ? void 0 : bestPrimitiveHit._internal_hit.zOrder) === 'top') {\n        // a primitive hit on the 'top' layer will always beat the built-in hit tests\n        // (on normal layer) so we can return early here.\n        return convertPrimitiveHitResult(bestPrimitiveHit);\n    }\n    for (const source of sources){\n        if (bestPrimitiveHit && bestPrimitiveHit._internal_source === source && bestPrimitiveHit._internal_hit.zOrder !== 'bottom' && !bestPrimitiveHit._internal_hit.isBackground) {\n            // a primitive will be drawn above a built-in item like a series marker\n            // therefore it takes precedence here.\n            return convertPrimitiveHitResult(bestPrimitiveHit);\n        }\n        if (isDataSource(source)) {\n            const sourceResult = hitTestPaneView(source._internal_paneViews(pane), x, y, pane);\n            if (sourceResult !== null) {\n                return {\n                    _internal_source: source,\n                    _internal_view: sourceResult._internal_view,\n                    _internal_object: sourceResult._internal_object\n                };\n            }\n        }\n        if (bestPrimitiveHit && bestPrimitiveHit._internal_source === source && bestPrimitiveHit._internal_hit.zOrder !== 'bottom' && bestPrimitiveHit._internal_hit.isBackground) {\n            return convertPrimitiveHitResult(bestPrimitiveHit);\n        }\n    }\n    if (bestPrimitiveHit === null || bestPrimitiveHit === void 0 ? void 0 : bestPrimitiveHit._internal_hit) {\n        // return primitive hits for the 'bottom' layer\n        return convertPrimitiveHitResult(bestPrimitiveHit);\n    }\n    return null;\n}\nclass FormattedLabelsCache {\n    _internal_format(tickMark) {\n        const time = tickMark.time;\n        const cacheKey = this._private__horzScaleBehavior.cacheKey(time);\n        const tick = this._private__cache.get(cacheKey);\n        if (tick !== undefined) {\n            return tick._internal_string;\n        }\n        if (this._private__actualSize === this._private__maxSize) {\n            const oldestValue = this._private__tick2Labels.get(this._private__oldestTick);\n            this._private__tick2Labels.delete(this._private__oldestTick);\n            this._private__cache.delete(ensureDefined(oldestValue));\n            this._private__oldestTick++;\n            this._private__actualSize--;\n        }\n        const str = this._private__format(tickMark);\n        this._private__cache.set(cacheKey, {\n            _internal_string: str,\n            _internal_tick: this._private__usageTick\n        });\n        this._private__tick2Labels.set(this._private__usageTick, cacheKey);\n        this._private__actualSize++;\n        this._private__usageTick++;\n        return str;\n    }\n    constructor(format, horzScaleBehavior, size = 50){\n        this._private__actualSize = 0;\n        this._private__usageTick = 1;\n        this._private__oldestTick = 1;\n        this._private__cache = new Map();\n        this._private__tick2Labels = new Map();\n        this._private__format = format;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__maxSize = size;\n    }\n}\nclass RangeImpl {\n    _internal_left() {\n        return this._private__left;\n    }\n    _internal_right() {\n        return this._private__right;\n    }\n    _internal_count() {\n        return this._private__right - this._private__left + 1;\n    }\n    _internal_contains(index) {\n        return this._private__left <= index && index <= this._private__right;\n    }\n    _internal_equals(other) {\n        return this._private__left === other._internal_left() && this._private__right === other._internal_right();\n    }\n    constructor(left, right){\n        assert(left <= right, 'right should be >= left');\n        this._private__left = left;\n        this._private__right = right;\n    }\n}\nfunction areRangesEqual(first, second) {\n    if (first === null || second === null) {\n        return first === second;\n    }\n    return first._internal_equals(second);\n}\nclass TickMarks {\n    _internal_setUniformDistribution(val) {\n        this._private__uniformDistribution = val;\n        this._private__cache = null;\n    }\n    _internal_setTimeScalePoints(newPoints, firstChangedPointIndex) {\n        this._private__removeMarksSinceIndex(firstChangedPointIndex);\n        this._private__cache = null;\n        for(let index = firstChangedPointIndex; index < newPoints.length; ++index){\n            const point = newPoints[index];\n            let marksForWeight = this._private__marksByWeight.get(point.timeWeight);\n            if (marksForWeight === undefined) {\n                marksForWeight = [];\n                this._private__marksByWeight.set(point.timeWeight, marksForWeight);\n            }\n            marksForWeight.push({\n                index: index,\n                time: point.time,\n                weight: point.timeWeight,\n                originalTime: point.originalTime\n            });\n        }\n    }\n    _internal_build(spacing, maxWidth, checkIndicesForData, indicesWithDataMap, indicesWithDataId) {\n        const maxIndexesPerMark = Math.ceil(maxWidth / spacing);\n        if (this._private__cache === null || this._private__cache._internal_maxIndexesPerMark !== maxIndexesPerMark || indicesWithDataId !== this._private__cache._internal_indicesWithDataId || checkIndicesForData !== this._private__cache._internal_checkIndicesForData) {\n            this._private__cache = {\n                _internal_indicesWithDataId: indicesWithDataId,\n                _internal_checkIndicesForData: checkIndicesForData,\n                _internal_marks: this._private__buildMarksImpl(maxIndexesPerMark, checkIndicesForData, indicesWithDataMap),\n                _internal_maxIndexesPerMark: maxIndexesPerMark\n            };\n        }\n        return this._private__cache._internal_marks;\n    }\n    _private__removeMarksSinceIndex(sinceIndex) {\n        if (sinceIndex === 0) {\n            this._private__marksByWeight.clear();\n            return;\n        }\n        const weightsToClear = [];\n        this._private__marksByWeight.forEach((marks, timeWeight)=>{\n            if (sinceIndex <= marks[0].index) {\n                weightsToClear.push(timeWeight);\n            } else {\n                marks.splice(lowerBound(marks, sinceIndex, (tm)=>tm.index < sinceIndex), Infinity);\n            }\n        });\n        for (const weight of weightsToClear){\n            this._private__marksByWeight.delete(weight);\n        }\n    }\n    _private__buildMarksImpl(maxIndexesPerMark, checkIndicesForData, indicesWithDataMap) {\n        let marks = [];\n        const canBeIncluded = (mark)=>!checkIndicesForData || indicesWithDataMap.has(mark.index);\n        for (const weight of Array.from(this._private__marksByWeight.keys()).sort((a, b)=>b - a)){\n            if (!this._private__marksByWeight.get(weight)) {\n                continue;\n            }\n            // Built tickMarks are now prevMarks, and marks it as new array\n            const prevMarks = marks;\n            marks = [];\n            const prevMarksLength = prevMarks.length;\n            let prevMarksPointer = 0;\n            const currentWeight = ensureDefined(this._private__marksByWeight.get(weight));\n            const currentWeightLength = currentWeight.length;\n            let rightIndex = Infinity;\n            let leftIndex = -Infinity;\n            for(let i = 0; i < currentWeightLength; i++){\n                const mark = currentWeight[i];\n                const currentIndex = mark.index;\n                // Determine indexes with which current index will be compared\n                // All marks to the right is moved to new array\n                while(prevMarksPointer < prevMarksLength){\n                    const lastMark = prevMarks[prevMarksPointer];\n                    const lastIndex = lastMark.index;\n                    if (lastIndex < currentIndex && canBeIncluded(lastMark)) {\n                        prevMarksPointer++;\n                        marks.push(lastMark);\n                        leftIndex = lastIndex;\n                        rightIndex = Infinity;\n                    } else {\n                        rightIndex = lastIndex;\n                        break;\n                    }\n                }\n                if (rightIndex - currentIndex >= maxIndexesPerMark && currentIndex - leftIndex >= maxIndexesPerMark && canBeIncluded(mark)) {\n                    // TickMark fits. Place it into new array\n                    marks.push(mark);\n                    leftIndex = currentIndex;\n                } else {\n                    if (this._private__uniformDistribution) {\n                        return prevMarks;\n                    }\n                }\n            }\n            // Place all unused tickMarks into new array;\n            for(; prevMarksPointer < prevMarksLength; prevMarksPointer++){\n                if (canBeIncluded(prevMarks[prevMarksPointer])) {\n                    marks.push(prevMarks[prevMarksPointer]);\n                }\n            }\n        }\n        return marks;\n    }\n    constructor(){\n        this._private__marksByWeight = new Map();\n        this._private__cache = null;\n        this._private__uniformDistribution = false;\n    }\n}\nclass TimeScaleVisibleRange {\n    _internal_strictRange() {\n        if (this._private__logicalRange === null) {\n            return null;\n        }\n        return new RangeImpl(Math.floor(this._private__logicalRange._internal_left()), Math.ceil(this._private__logicalRange._internal_right()));\n    }\n    _internal_logicalRange() {\n        return this._private__logicalRange;\n    }\n    static _internal_invalid() {\n        return new TimeScaleVisibleRange(null);\n    }\n    constructor(logicalRange){\n        this._private__logicalRange = logicalRange;\n    }\n}\nconst defaultTickMarkMaxCharacterLength = 8;\nfunction markWithGreaterWeight$2(a, b) {\n    return a.weight > b.weight ? a : b;\n}\nclass TimeScale {\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_applyLocalizationOptions(localizationOptions) {\n        merge(this._private__localizationOptions, localizationOptions);\n        this._private__invalidateTickMarks();\n        this._private__updateDateTimeFormatter();\n    }\n    _internal_applyOptions(options, localizationOptions) {\n        merge(this._private__options, options);\n        if (this._private__options.fixLeftEdge) {\n            this._private__doFixLeftEdge();\n        }\n        if (this._private__options.fixRightEdge) {\n            this._private__doFixRightEdge();\n        }\n        // note that bar spacing should be applied before right offset\n        // because right offset depends on bar spacing\n        if (options.barSpacing !== undefined) {\n            this._private__model._internal_setBarSpacing(options.barSpacing);\n        }\n        if (options.rightOffset !== undefined) {\n            this._private__model._internal_setRightOffset(options.rightOffset);\n        }\n        if (options.minBarSpacing !== undefined || options.maxBarSpacing !== undefined) {\n            var _options_barSpacing;\n            // yes, if we apply bar spacing constrains then we need to correct bar spacing\n            // the easiest way is to apply it once again\n            this._private__model._internal_setBarSpacing((_options_barSpacing = options.barSpacing) !== null && _options_barSpacing !== void 0 ? _options_barSpacing : this._private__barSpacing);\n        }\n        if (options.ignoreWhitespaceIndices !== undefined && options.ignoreWhitespaceIndices !== this._private__options.ignoreWhitespaceIndices) {\n            this._internal_recalculateIndicesWithData();\n        }\n        this._private__invalidateTickMarks();\n        this._private__updateDateTimeFormatter();\n        this._private__optionsApplied._internal_fire();\n    }\n    _internal_indexToTime(index) {\n        var _this__private__points_index;\n        var _this__private__points_index_time;\n        return (_this__private__points_index_time = (_this__private__points_index = this._private__points[index]) === null || _this__private__points_index === void 0 ? void 0 : _this__private__points_index.time) !== null && _this__private__points_index_time !== void 0 ? _this__private__points_index_time : null;\n    }\n    _internal_indexToTimeScalePoint(index) {\n        var _this__private__points_index;\n        return (_this__private__points_index = this._private__points[index]) !== null && _this__private__points_index !== void 0 ? _this__private__points_index : null;\n    }\n    _internal_timeToIndex(time, findNearest) {\n        if (this._private__points.length < 1) {\n            // no time points available\n            return null;\n        }\n        if (this._private__horzScaleBehavior.key(time) > this._private__horzScaleBehavior.key(this._private__points[this._private__points.length - 1].time)) {\n            // special case\n            return findNearest ? this._private__points.length - 1 : null;\n        }\n        const index = lowerBound(this._private__points, this._private__horzScaleBehavior.key(time), (a, b)=>this._private__horzScaleBehavior.key(a.time) < b);\n        if (this._private__horzScaleBehavior.key(time) < this._private__horzScaleBehavior.key(this._private__points[index].time)) {\n            return findNearest ? index : null;\n        }\n        return index;\n    }\n    _internal_isEmpty() {\n        return this._private__width === 0 || this._private__points.length === 0 || this._private__baseIndexOrNull === null;\n    }\n    _internal_hasPoints() {\n        return this._private__points.length > 0;\n    }\n    // strict range: integer indices of the bars in the visible range rounded in more wide direction\n    _internal_visibleStrictRange() {\n        this._private__updateVisibleRange();\n        return this._private__visibleRange._internal_strictRange();\n    }\n    _internal_visibleLogicalRange() {\n        this._private__updateVisibleRange();\n        return this._private__visibleRange._internal_logicalRange();\n    }\n    _internal_visibleTimeRange() {\n        const visibleBars = this._internal_visibleStrictRange();\n        if (visibleBars === null) {\n            return null;\n        }\n        const range = {\n            from: visibleBars._internal_left(),\n            to: visibleBars._internal_right()\n        };\n        return this._internal_timeRangeForLogicalRange(range);\n    }\n    _internal_timeRangeForLogicalRange(range) {\n        const from = Math.round(range.from);\n        const to = Math.round(range.to);\n        const firstIndex = ensureNotNull(this._private__firstIndex());\n        const lastIndex = ensureNotNull(this._private__lastIndex());\n        return {\n            from: ensureNotNull(this._internal_indexToTimeScalePoint(Math.max(firstIndex, from))),\n            to: ensureNotNull(this._internal_indexToTimeScalePoint(Math.min(lastIndex, to)))\n        };\n    }\n    _internal_logicalRangeForTimeRange(range) {\n        return {\n            from: ensureNotNull(this._internal_timeToIndex(range.from, true)),\n            to: ensureNotNull(this._internal_timeToIndex(range.to, true))\n        };\n    }\n    _internal_width() {\n        return this._private__width;\n    }\n    _internal_setWidth(newWidth) {\n        if (!isFinite(newWidth) || newWidth <= 0) {\n            return;\n        }\n        if (this._private__width === newWidth) {\n            return;\n        }\n        // when we change the width and we need to correct visible range because of fixing left edge\n        // we need to check the previous visible range rather than the new one\n        // because it might be updated by changing width, bar spacing, etc\n        // but we need to try to keep the same range\n        const previousVisibleRange = this._internal_visibleLogicalRange();\n        const oldWidth = this._private__width;\n        this._private__width = newWidth;\n        this._private__visibleRangeInvalidated = true;\n        if (this._private__options.lockVisibleTimeRangeOnResize && oldWidth !== 0) {\n            // recalculate bar spacing\n            const newBarSpacing = this._private__barSpacing * newWidth / oldWidth;\n            this._private__barSpacing = newBarSpacing;\n        }\n        // if time scale is scrolled to the end of data and we have fixed right edge\n        // keep left edge instead of right\n        // we need it to avoid \"shaking\" if the last bar visibility affects time scale width\n        if (this._private__options.fixLeftEdge) {\n            // note that logical left range means not the middle of a bar (it's the left border)\n            if (previousVisibleRange !== null && previousVisibleRange._internal_left() <= 0) {\n                const delta = oldWidth - newWidth;\n                // reduce  _rightOffset means move right\n                // we could move more than required - this will be fixed by _correctOffset()\n                this._private__rightOffset -= Math.round(delta / this._private__barSpacing) + 1;\n                this._private__visibleRangeInvalidated = true;\n            }\n        }\n        // updating bar spacing should be first because right offset depends on it\n        this._private__correctBarSpacing();\n        this._private__correctOffset();\n    }\n    _internal_indexToCoordinate(index) {\n        if (this._internal_isEmpty() || !isInteger(index)) {\n            return 0;\n        }\n        const baseIndex = this._internal_baseIndex();\n        const deltaFromRight = baseIndex + this._private__rightOffset - index;\n        const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;\n        return coordinate;\n    }\n    _internal_indexesToCoordinates(points, visibleRange) {\n        const baseIndex = this._internal_baseIndex();\n        const indexFrom = visibleRange === undefined ? 0 : visibleRange.from;\n        const indexTo = visibleRange === undefined ? points.length : visibleRange.to;\n        for(let i = indexFrom; i < indexTo; i++){\n            const index = points[i]._internal_time;\n            const deltaFromRight = baseIndex + this._private__rightOffset - index;\n            const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;\n            points[i]._internal_x = coordinate;\n        }\n    }\n    _internal_coordinateToIndex(x, considerIgnoreWhitespace) {\n        const index = Math.ceil(this._private__coordinateToFloatIndex(x));\n        if (!considerIgnoreWhitespace || !this._private__options.ignoreWhitespaceIndices || this._private__shouldConsiderIndex(index)) {\n            return index;\n        }\n        return this._private__findNearestIndexWithData(index);\n    }\n    _internal_setRightOffset(offset) {\n        this._private__visibleRangeInvalidated = true;\n        this._private__rightOffset = offset;\n        this._private__correctOffset();\n        this._private__model._internal_recalculateAllPanes();\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_barSpacing() {\n        return this._private__barSpacing;\n    }\n    _internal_setBarSpacing(newBarSpacing) {\n        this._private__setBarSpacing(newBarSpacing);\n        // do not allow scroll out of visible bars\n        this._private__correctOffset();\n        this._private__model._internal_recalculateAllPanes();\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_rightOffset() {\n        return this._private__rightOffset;\n    }\n    // eslint-disable-next-line complexity\n    _internal_marks() {\n        if (this._internal_isEmpty()) {\n            return null;\n        }\n        if (this._private__timeMarksCache !== null) {\n            return this._private__timeMarksCache;\n        }\n        const spacing = this._private__barSpacing;\n        const fontSize = this._private__model._internal_options()['layout'].fontSize;\n        const pixelsPer8Characters = (fontSize + 4) * 5;\n        const pixelsPerCharacter = pixelsPer8Characters / defaultTickMarkMaxCharacterLength;\n        const maxLabelWidth = pixelsPerCharacter * (this._private__options.tickMarkMaxCharacterLength || defaultTickMarkMaxCharacterLength);\n        const indexPerLabel = Math.round(maxLabelWidth / spacing);\n        const visibleBars = ensureNotNull(this._internal_visibleStrictRange());\n        const firstBar = Math.max(visibleBars._internal_left(), visibleBars._internal_left() - indexPerLabel);\n        const lastBar = Math.max(visibleBars._internal_right(), visibleBars._internal_right() - indexPerLabel);\n        const items = this._private__tickMarks._internal_build(spacing, maxLabelWidth, this._private__options.ignoreWhitespaceIndices, this._private__indicesWithData, this._private__indicesWithDataUpdateId);\n        // according to indexPerLabel value this value means \"earliest index which _might be_ used as the second label on time scale\"\n        const earliestIndexOfSecondLabel = this._private__firstIndex() + indexPerLabel;\n        // according to indexPerLabel value this value means \"earliest index which _might be_ used as the second last label on time scale\"\n        const indexOfSecondLastLabel = this._private__lastIndex() - indexPerLabel;\n        const isAllScalingAndScrollingDisabled = this._private__isAllScalingAndScrollingDisabled();\n        const isLeftEdgeFixed = this._private__options.fixLeftEdge || isAllScalingAndScrollingDisabled;\n        const isRightEdgeFixed = this._private__options.fixRightEdge || isAllScalingAndScrollingDisabled;\n        let targetIndex = 0;\n        for (const tm of items){\n            if (!(firstBar <= tm.index && tm.index <= lastBar)) {\n                continue;\n            }\n            let label;\n            if (targetIndex < this._private__labels.length) {\n                label = this._private__labels[targetIndex];\n                label.coord = this._internal_indexToCoordinate(tm.index);\n                label.label = this._private__formatLabel(tm);\n                label.weight = tm.weight;\n            } else {\n                label = {\n                    needAlignCoordinate: false,\n                    coord: this._internal_indexToCoordinate(tm.index),\n                    label: this._private__formatLabel(tm),\n                    weight: tm.weight\n                };\n                this._private__labels.push(label);\n            }\n            if (this._private__barSpacing > maxLabelWidth / 2 && !isAllScalingAndScrollingDisabled) {\n                // if there is enough space then let's show all tick marks as usual\n                label.needAlignCoordinate = false;\n            } else {\n                // if a user is able to scroll after a tick mark then show it as usual, otherwise the coordinate might be aligned\n                // if the index is for the second (last) label or later (earlier) then most likely this label might be displayed without correcting the coordinate\n                label.needAlignCoordinate = isLeftEdgeFixed && tm.index <= earliestIndexOfSecondLabel || isRightEdgeFixed && tm.index >= indexOfSecondLastLabel;\n            }\n            targetIndex++;\n        }\n        this._private__labels.length = targetIndex;\n        this._private__timeMarksCache = this._private__labels;\n        return this._private__labels;\n    }\n    _internal_restoreDefault() {\n        this._private__visibleRangeInvalidated = true;\n        this._internal_setBarSpacing(this._private__options.barSpacing);\n        this._internal_setRightOffset(this._private__options.rightOffset);\n    }\n    _internal_setBaseIndex(baseIndex) {\n        this._private__visibleRangeInvalidated = true;\n        this._private__baseIndexOrNull = baseIndex;\n        this._private__correctOffset();\n        this._private__doFixLeftEdge();\n    }\n    /**\n     * Zoom in/out the scale around a `zoomPoint` on `scale` value.\n     *\n     * @param zoomPoint - X coordinate of the point to apply the zoom.\n     * If `rightBarStaysOnScroll` option is disabled, then will be used to restore right offset.\n     * @param scale - Zoom value (in 1/10 parts of current bar spacing).\n     * Negative value means zoom out, positive - zoom in.\n     */ _internal_zoom(zoomPoint, scale) {\n        const floatIndexAtZoomPoint = this._private__coordinateToFloatIndex(zoomPoint);\n        const barSpacing = this._internal_barSpacing();\n        const newBarSpacing = barSpacing + scale * (barSpacing / 10);\n        // zoom in/out bar spacing\n        this._internal_setBarSpacing(newBarSpacing);\n        if (!this._private__options.rightBarStaysOnScroll) {\n            // and then correct right offset to move index under zoomPoint back to its coordinate\n            this._internal_setRightOffset(this._internal_rightOffset() + (floatIndexAtZoomPoint - this._private__coordinateToFloatIndex(zoomPoint)));\n        }\n    }\n    _internal_startScale(x) {\n        if (this._private__scrollStartPoint) {\n            this._internal_endScroll();\n        }\n        if (this._private__scaleStartPoint !== null || this._private__commonTransitionStartState !== null) {\n            return;\n        }\n        if (this._internal_isEmpty()) {\n            return;\n        }\n        this._private__scaleStartPoint = x;\n        this._private__saveCommonTransitionsStartState();\n    }\n    _internal_scaleTo(x) {\n        if (this._private__commonTransitionStartState === null) {\n            return;\n        }\n        const startLengthFromRight = clamp(this._private__width - x, 0, this._private__width);\n        const currentLengthFromRight = clamp(this._private__width - ensureNotNull(this._private__scaleStartPoint), 0, this._private__width);\n        if (startLengthFromRight === 0 || currentLengthFromRight === 0) {\n            return;\n        }\n        this._internal_setBarSpacing(this._private__commonTransitionStartState._internal_barSpacing * startLengthFromRight / currentLengthFromRight);\n    }\n    _internal_endScale() {\n        if (this._private__scaleStartPoint === null) {\n            return;\n        }\n        this._private__scaleStartPoint = null;\n        this._private__clearCommonTransitionsStartState();\n    }\n    _internal_startScroll(x) {\n        if (this._private__scrollStartPoint !== null || this._private__commonTransitionStartState !== null) {\n            return;\n        }\n        if (this._internal_isEmpty()) {\n            return;\n        }\n        this._private__scrollStartPoint = x;\n        this._private__saveCommonTransitionsStartState();\n    }\n    _internal_scrollTo(x) {\n        if (this._private__scrollStartPoint === null) {\n            return;\n        }\n        const shiftInLogical = (this._private__scrollStartPoint - x) / this._internal_barSpacing();\n        this._private__rightOffset = ensureNotNull(this._private__commonTransitionStartState)._internal_rightOffset + shiftInLogical;\n        this._private__visibleRangeInvalidated = true;\n        // do not allow scroll out of visible bars\n        this._private__correctOffset();\n    }\n    _internal_endScroll() {\n        if (this._private__scrollStartPoint === null) {\n            return;\n        }\n        this._private__scrollStartPoint = null;\n        this._private__clearCommonTransitionsStartState();\n    }\n    _internal_scrollToRealTime() {\n        this._internal_scrollToOffsetAnimated(this._private__options.rightOffset);\n    }\n    _internal_scrollToOffsetAnimated(offset) {\n        let animationDuration = arguments.length > 1 && arguments[1] !== void 0 /* Constants.DefaultAnimationDuration */  ? arguments[1] : 400;\n        if (!isFinite(offset)) {\n            throw new RangeError('offset is required and must be finite number');\n        }\n        if (!isFinite(animationDuration) || animationDuration <= 0) {\n            throw new RangeError('animationDuration (optional) must be finite positive number');\n        }\n        const source = this._private__rightOffset;\n        const animationStart = performance.now();\n        this._private__model._internal_setTimeScaleAnimation({\n            _internal_finished: (time)=>(time - animationStart) / animationDuration >= 1,\n            _internal_getPosition: (time)=>{\n                const animationProgress = (time - animationStart) / animationDuration;\n                const finishAnimation = animationProgress >= 1;\n                return finishAnimation ? offset : source + (offset - source) * animationProgress;\n            }\n        });\n    }\n    _internal_update(newPoints, firstChangedPointIndex) {\n        this._private__visibleRangeInvalidated = true;\n        this._private__points = newPoints;\n        this._private__tickMarks._internal_setTimeScalePoints(newPoints, firstChangedPointIndex);\n        this._private__correctOffset();\n    }\n    _internal_visibleBarsChanged() {\n        return this._private__visibleBarsChanged;\n    }\n    _internal_logicalRangeChanged() {\n        return this._private__logicalRangeChanged;\n    }\n    _internal_optionsApplied() {\n        return this._private__optionsApplied;\n    }\n    _internal_baseIndex() {\n        // null is used to known that baseIndex is not set yet\n        // so in methods which should known whether it is set or not\n        // we should check field `_baseIndexOrNull` instead of getter `baseIndex()`\n        // see minRightOffset for example\n        return this._private__baseIndexOrNull || 0;\n    }\n    _internal_setVisibleRange(range) {\n        const length = range._internal_count();\n        this._private__setBarSpacing(this._private__width / length);\n        this._private__rightOffset = range._internal_right() - this._internal_baseIndex();\n        this._private__correctOffset();\n        this._private__visibleRangeInvalidated = true;\n        this._private__model._internal_recalculateAllPanes();\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_fitContent() {\n        const first = this._private__firstIndex();\n        const last = this._private__lastIndex();\n        if (first === null || last === null) {\n            return;\n        }\n        this._internal_setVisibleRange(new RangeImpl(first, last + this._private__options.rightOffset));\n    }\n    _internal_setLogicalRange(range) {\n        const barRange = new RangeImpl(range.from, range.to);\n        this._internal_setVisibleRange(barRange);\n    }\n    _internal_formatDateTime(timeScalePoint) {\n        if (this._private__localizationOptions.timeFormatter !== undefined) {\n            return this._private__localizationOptions.timeFormatter(timeScalePoint.originalTime);\n        }\n        return this._private__horzScaleBehavior.formatHorzItem(timeScalePoint.time);\n    }\n    _internal_recalculateIndicesWithData() {\n        if (!this._private__options.ignoreWhitespaceIndices) {\n            return;\n        }\n        this._private__indicesWithData.clear();\n        const series = this._private__model._internal_serieses();\n        for (const s of series){\n            for (const index of s._internal_fulfilledIndices()){\n                this._private__indicesWithData.set(index, true);\n            }\n        }\n        this._private__indicesWithDataUpdateId++;\n    }\n    _private__isAllScalingAndScrollingDisabled() {\n        const handleScroll = this._private__model._internal_options()['handleScroll'];\n        const handleScale = this._private__model._internal_options()['handleScale'];\n        return !handleScroll.horzTouchDrag && !handleScroll.mouseWheel && !handleScroll.pressedMouseMove && !handleScroll.vertTouchDrag && !handleScale.axisDoubleClickReset.time && !handleScale.axisPressedMouseMove.time && !handleScale.mouseWheel && !handleScale.pinch;\n    }\n    _private__firstIndex() {\n        return this._private__points.length === 0 ? null : 0;\n    }\n    _private__lastIndex() {\n        return this._private__points.length === 0 ? null : this._private__points.length - 1;\n    }\n    _private__rightOffsetForCoordinate(x) {\n        return (this._private__width - 1 - x) / this._private__barSpacing;\n    }\n    _private__coordinateToFloatIndex(x) {\n        const deltaFromRight = this._private__rightOffsetForCoordinate(x);\n        const baseIndex = this._internal_baseIndex();\n        const index = baseIndex + this._private__rightOffset - deltaFromRight;\n        // JavaScript uses very strange rounding\n        // we need rounding to avoid problems with calculation errors\n        return Math.round(index * 1000000) / 1000000;\n    }\n    _private__setBarSpacing(newBarSpacing) {\n        const oldBarSpacing = this._private__barSpacing;\n        this._private__barSpacing = newBarSpacing;\n        this._private__correctBarSpacing();\n        // this._barSpacing might be changed in _correctBarSpacing\n        if (oldBarSpacing !== this._private__barSpacing) {\n            this._private__visibleRangeInvalidated = true;\n            this._private__resetTimeMarksCache();\n        }\n    }\n    _private__updateVisibleRange() {\n        if (!this._private__visibleRangeInvalidated) {\n            return;\n        }\n        this._private__visibleRangeInvalidated = false;\n        if (this._internal_isEmpty()) {\n            this._private__setVisibleRange(TimeScaleVisibleRange._internal_invalid());\n            return;\n        }\n        const baseIndex = this._internal_baseIndex();\n        const newBarsLength = this._private__width / this._private__barSpacing;\n        const rightBorder = this._private__rightOffset + baseIndex;\n        const leftBorder = rightBorder - newBarsLength + 1;\n        const logicalRange = new RangeImpl(leftBorder, rightBorder);\n        this._private__setVisibleRange(new TimeScaleVisibleRange(logicalRange));\n    }\n    _private__correctBarSpacing() {\n        const barSpacing = clamp(this._private__barSpacing, this._private__minBarSpacing(), this._private__maxBarSpacing());\n        if (this._private__barSpacing !== barSpacing) {\n            this._private__barSpacing = barSpacing;\n            this._private__visibleRangeInvalidated = true;\n        }\n    }\n    _private__maxBarSpacing() {\n        if (this._private__options.maxBarSpacing > 0) {\n            // option takes precedance\n            return this._private__options.maxBarSpacing;\n        } else {\n            // half of the width is default value for maximum bar spacing\n            return this._private__width * 0.5;\n        }\n    }\n    _private__minBarSpacing() {\n        // if both options are enabled then limit bar spacing so that zooming-out is not possible\n        // if it would cause either the first or last points to move too far from an edge\n        if (this._private__options.fixLeftEdge && this._private__options.fixRightEdge && this._private__points.length !== 0) {\n            return this._private__width / this._private__points.length;\n        }\n        return this._private__options.minBarSpacing;\n    }\n    _private__correctOffset() {\n        // block scrolling of to past\n        const minRightOffset = this._private__minRightOffset();\n        if (minRightOffset !== null && this._private__rightOffset < minRightOffset) {\n            this._private__rightOffset = minRightOffset;\n            this._private__visibleRangeInvalidated = true;\n        }\n        // block scrolling of to future\n        const maxRightOffset = this._private__maxRightOffset();\n        if (this._private__rightOffset > maxRightOffset) {\n            this._private__rightOffset = maxRightOffset;\n            this._private__visibleRangeInvalidated = true;\n        }\n    }\n    _private__minRightOffset() {\n        const firstIndex = this._private__firstIndex();\n        const baseIndex = this._private__baseIndexOrNull;\n        if (firstIndex === null || baseIndex === null) {\n            return null;\n        }\n        const barsEstimation = this._private__options.fixLeftEdge ? this._private__width / this._private__barSpacing : Math.min(2 /* Constants.MinVisibleBarsCount */ , this._private__points.length);\n        return firstIndex - baseIndex - 1 + barsEstimation;\n    }\n    _private__maxRightOffset() {\n        return this._private__options.fixRightEdge ? 0 : this._private__width / this._private__barSpacing - Math.min(2 /* Constants.MinVisibleBarsCount */ , this._private__points.length);\n    }\n    _private__saveCommonTransitionsStartState() {\n        this._private__commonTransitionStartState = {\n            _internal_barSpacing: this._internal_barSpacing(),\n            _internal_rightOffset: this._internal_rightOffset()\n        };\n    }\n    _private__clearCommonTransitionsStartState() {\n        this._private__commonTransitionStartState = null;\n    }\n    _private__formatLabel(tickMark) {\n        let formatter = this._private__formattedByWeight.get(tickMark.weight);\n        if (formatter === undefined) {\n            formatter = new FormattedLabelsCache((mark)=>{\n                return this._private__formatLabelImpl(mark);\n            }, this._private__horzScaleBehavior);\n            this._private__formattedByWeight.set(tickMark.weight, formatter);\n        }\n        return formatter._internal_format(tickMark);\n    }\n    _private__formatLabelImpl(tickMark) {\n        return this._private__horzScaleBehavior.formatTickmark(tickMark, this._private__localizationOptions);\n    }\n    _private__setVisibleRange(newVisibleRange) {\n        const oldVisibleRange = this._private__visibleRange;\n        this._private__visibleRange = newVisibleRange;\n        if (!areRangesEqual(oldVisibleRange._internal_strictRange(), this._private__visibleRange._internal_strictRange())) {\n            this._private__visibleBarsChanged._internal_fire();\n        }\n        if (!areRangesEqual(oldVisibleRange._internal_logicalRange(), this._private__visibleRange._internal_logicalRange())) {\n            this._private__logicalRangeChanged._internal_fire();\n        }\n        // TODO: reset only coords in case when this._visibleBars has not been changed\n        this._private__resetTimeMarksCache();\n    }\n    _private__resetTimeMarksCache() {\n        this._private__timeMarksCache = null;\n    }\n    _private__invalidateTickMarks() {\n        this._private__resetTimeMarksCache();\n        this._private__formattedByWeight.clear();\n    }\n    _private__updateDateTimeFormatter() {\n        this._private__horzScaleBehavior.updateFormatter(this._private__localizationOptions);\n    }\n    _private__doFixLeftEdge() {\n        if (!this._private__options.fixLeftEdge) {\n            return;\n        }\n        const firstIndex = this._private__firstIndex();\n        if (firstIndex === null) {\n            return;\n        }\n        const visibleRange = this._internal_visibleStrictRange();\n        if (visibleRange === null) {\n            return;\n        }\n        const delta = visibleRange._internal_left() - firstIndex;\n        if (delta < 0) {\n            const leftEdgeOffset = this._private__rightOffset - delta - 1;\n            this._internal_setRightOffset(leftEdgeOffset);\n        }\n        this._private__correctBarSpacing();\n    }\n    _private__doFixRightEdge() {\n        this._private__correctOffset();\n        this._private__correctBarSpacing();\n    }\n    _private__shouldConsiderIndex(index) {\n        if (!this._private__options.ignoreWhitespaceIndices) {\n            return true;\n        }\n        return this._private__indicesWithData.get(index) || false;\n    }\n    _private__findNearestIndexWithData(x) {\n        const gen = testNearestIntegers(x);\n        const maxIndex = this._private__lastIndex();\n        while(maxIndex){\n            const index = gen.next().value;\n            if (this._private__indicesWithData.get(index)) {\n                return index;\n            }\n            if (index < 0 || index > maxIndex) {\n                break;\n            }\n        }\n        return x; // fallback to original index\n    }\n    constructor(model, options, localizationOptions, horzScaleBehavior){\n        this._private__width = 0;\n        this._private__baseIndexOrNull = null;\n        this._private__points = [];\n        this._private__scrollStartPoint = null;\n        this._private__scaleStartPoint = null;\n        this._private__tickMarks = new TickMarks();\n        this._private__formattedByWeight = new Map();\n        this._private__visibleRange = TimeScaleVisibleRange._internal_invalid();\n        this._private__visibleRangeInvalidated = true;\n        this._private__visibleBarsChanged = new Delegate();\n        this._private__logicalRangeChanged = new Delegate();\n        this._private__optionsApplied = new Delegate();\n        this._private__commonTransitionStartState = null;\n        this._private__timeMarksCache = null;\n        this._private__indicesWithData = new Map();\n        this._private__indicesWithDataUpdateId = -1;\n        this._private__labels = [];\n        this._private__options = options;\n        this._private__localizationOptions = localizationOptions;\n        this._private__rightOffset = options.rightOffset;\n        this._private__barSpacing = options.barSpacing;\n        this._private__model = model;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__updateDateTimeFormatter();\n        this._private__tickMarks._internal_setUniformDistribution(options.uniformDistribution);\n        this._internal_recalculateIndicesWithData();\n    }\n}\nfunction* testNearestIntegers(num) {\n    const rounded = Math.round(num);\n    const isRoundedDown = rounded < num;\n    let offset = 1;\n    while(true){\n        if (isRoundedDown) {\n            yield rounded + offset;\n            yield rounded - offset;\n        } else {\n            yield rounded - offset;\n            yield rounded + offset;\n        }\n        offset++;\n    }\n}\n/// <reference types=\"_build-time-constants\" />\n/**\n * Determine how to exit the tracking mode.\n *\n * By default, mobile users will long press to deactivate the scroll and have the ability to check values and dates.\n * Another press is required to activate the scroll, be able to move left/right, zoom, etc.\n */ var TrackingModeExitMode;\n(function(TrackingModeExitMode) {\n    /**\n     * Tracking Mode will be deactivated on touch end event.\n     */ TrackingModeExitMode[TrackingModeExitMode[\"OnTouchEnd\"] = 0] = \"OnTouchEnd\";\n    /**\n     * Tracking Mode will be deactivated on the next tap event.\n     */ TrackingModeExitMode[TrackingModeExitMode[\"OnNextTap\"] = 1] = \"OnNextTap\";\n})(TrackingModeExitMode || (TrackingModeExitMode = {}));\nfunction isPanePrimitive(source) {\n    return source instanceof Pane;\n}\nclass ChartModel {\n    _internal_fullUpdate() {\n        this._private__invalidate(InvalidateMask._internal_full());\n    }\n    _internal_lightUpdate() {\n        this._private__invalidate(InvalidateMask._internal_light());\n    }\n    _internal_cursorUpdate() {\n        this._private__invalidate(new InvalidateMask(1 /* InvalidationLevel.Cursor */ ));\n    }\n    _internal_updateSource(source) {\n        const inv = this._private__invalidationMaskForSource(source);\n        this._private__invalidate(inv);\n    }\n    _internal_hoveredSource() {\n        return this._private__hoveredSource;\n    }\n    _internal_setHoveredSource(source) {\n        var _this__private__hoveredSource, _this__private__hoveredSource__internal_object, _this__private__hoveredSource1, _source__internal_object;\n        if (((_this__private__hoveredSource = this._private__hoveredSource) === null || _this__private__hoveredSource === void 0 ? void 0 : _this__private__hoveredSource._internal_source) === (source === null || source === void 0 ? void 0 : source._internal_source) && ((_this__private__hoveredSource1 = this._private__hoveredSource) === null || _this__private__hoveredSource1 === void 0 ? void 0 : (_this__private__hoveredSource__internal_object = _this__private__hoveredSource1._internal_object) === null || _this__private__hoveredSource__internal_object === void 0 ? void 0 : _this__private__hoveredSource__internal_object._internal_externalId) === (source === null || source === void 0 ? void 0 : (_source__internal_object = source._internal_object) === null || _source__internal_object === void 0 ? void 0 : _source__internal_object._internal_externalId)) {\n            return;\n        }\n        const prevSource = this._private__hoveredSource;\n        this._private__hoveredSource = source;\n        if (prevSource !== null) {\n            this._internal_updateSource(prevSource._internal_source);\n        }\n        // additional check to prevent unnecessary updates of same source\n        if (source !== null && source._internal_source !== (prevSource === null || prevSource === void 0 ? void 0 : prevSource._internal_source)) {\n            this._internal_updateSource(source._internal_source);\n        }\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_applyOptions(options) {\n        merge(this._private__options, options);\n        this._private__panes.forEach((p)=>p._internal_applyScaleOptions(options));\n        if (options.timeScale !== undefined) {\n            this._private__timeScale._internal_applyOptions(options.timeScale);\n        }\n        if (options.localization !== undefined) {\n            this._private__timeScale._internal_applyLocalizationOptions(options.localization);\n        }\n        if (options.leftPriceScale || options.rightPriceScale) {\n            this._private__priceScalesOptionsChanged._internal_fire();\n        }\n        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */ );\n        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */ );\n        this._internal_fullUpdate();\n    }\n    _internal_applyPriceScaleOptions(priceScaleId, options) {\n        let paneIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        const pane = this._private__panes[paneIndex];\n        if (pane === undefined) {\n            {\n                throw new Error(\"Trying to apply price scale options with incorrect pane index: \".concat(paneIndex));\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (priceScaleId === \"left\" /* DefaultPriceScaleId.Left */ ) {\n            merge(this._private__options, {\n                leftPriceScale: options\n            });\n            pane._internal_applyScaleOptions({\n                leftPriceScale: options\n            });\n            this._private__priceScalesOptionsChanged._internal_fire();\n            this._internal_fullUpdate();\n            return;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        } else if (priceScaleId === \"right\" /* DefaultPriceScaleId.Right */ ) {\n            merge(this._private__options, {\n                rightPriceScale: options\n            });\n            pane._internal_applyScaleOptions({\n                rightPriceScale: options\n            });\n            this._private__priceScalesOptionsChanged._internal_fire();\n            this._internal_fullUpdate();\n            return;\n        }\n        const res = this._internal_findPriceScale(priceScaleId, paneIndex);\n        if (res === null) {\n            {\n                throw new Error(\"Trying to apply price scale options with incorrect ID: \".concat(priceScaleId));\n            }\n        }\n        res._internal_priceScale._internal_applyOptions(options);\n        this._private__priceScalesOptionsChanged._internal_fire();\n    }\n    _internal_findPriceScale(priceScaleId, paneIndex) {\n        const pane = this._private__panes[paneIndex];\n        if (pane === undefined) {\n            return null;\n        }\n        const priceScale = pane._internal_priceScaleById(priceScaleId);\n        if (priceScale !== null) {\n            return {\n                _internal_pane: pane,\n                _internal_priceScale: priceScale\n            };\n        }\n        return null;\n    }\n    _internal_timeScale() {\n        return this._private__timeScale;\n    }\n    _internal_panes() {\n        return this._private__panes;\n    }\n    _internal_crosshairSource() {\n        return this._private__crosshair;\n    }\n    _internal_crosshairMoved() {\n        return this._private__crosshairMoved;\n    }\n    _internal_setPaneHeight(pane, height) {\n        pane._internal_setHeight(height);\n        this._internal_recalculateAllPanes();\n    }\n    _internal_setWidth(width) {\n        this._private__width = width;\n        this._private__timeScale._internal_setWidth(this._private__width);\n        this._private__panes.forEach((pane)=>pane._internal_setWidth(width));\n        this._internal_recalculateAllPanes();\n    }\n    _internal_removePane(index) {\n        if (this._private__panes.length === 1) {\n            return;\n        }\n        assert(index >= 0 && index < this._private__panes.length, 'Invalid pane index');\n        this._private__panes.splice(index, 1);\n        this._internal_fullUpdate();\n    }\n    _internal_changePanesHeight(paneIndex, height) {\n        if (this._private__panes.length < 2) {\n            return;\n        }\n        assert(paneIndex >= 0 && paneIndex < this._private__panes.length, 'Invalid pane index');\n        const targetPane = this._private__panes[paneIndex];\n        const totalStretch = this._private__panes.reduce((prevValue, pane)=>prevValue + pane._internal_stretchFactor(), 0);\n        const totalHeight = this._private__panes.reduce((prevValue, pane)=>prevValue + pane._internal_height(), 0);\n        const maxPaneHeight = totalHeight - MIN_PANE_HEIGHT * (this._private__panes.length - 1);\n        height = Math.min(maxPaneHeight, Math.max(MIN_PANE_HEIGHT, height));\n        const pixelStretchFactor = totalStretch / totalHeight;\n        const oldHeight = targetPane._internal_height();\n        targetPane._internal_setStretchFactor(height * pixelStretchFactor);\n        let otherPanesChange = height - oldHeight;\n        let panesCount = this._private__panes.length - 1;\n        for (const pane of this._private__panes){\n            if (pane !== targetPane) {\n                const newPaneHeight = Math.min(maxPaneHeight, Math.max(30, pane._internal_height() - otherPanesChange / panesCount));\n                otherPanesChange -= pane._internal_height() - newPaneHeight;\n                panesCount -= 1;\n                const newStretchFactor = newPaneHeight * pixelStretchFactor;\n                pane._internal_setStretchFactor(newStretchFactor);\n            }\n        }\n        this._internal_fullUpdate();\n    }\n    _internal_swapPanes(first, second) {\n        assert(first >= 0 && first < this._private__panes.length && second >= 0 && second < this._private__panes.length, 'Invalid pane index');\n        const firstPane = this._private__panes[first];\n        const secondPane = this._private__panes[second];\n        this._private__panes[first] = secondPane;\n        this._private__panes[second] = firstPane;\n        this._internal_fullUpdate();\n    }\n    _internal_startScalePrice(pane, priceScale, x) {\n        pane._internal_startScalePrice(priceScale, x);\n    }\n    _internal_scalePriceTo(pane, priceScale, x) {\n        pane._internal_scalePriceTo(priceScale, x);\n        this._internal_updateCrosshair();\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_endScalePrice(pane, priceScale) {\n        pane._internal_endScalePrice(priceScale);\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_startScrollPrice(pane, priceScale, x) {\n        if (priceScale._internal_isAutoScale()) {\n            return;\n        }\n        pane._internal_startScrollPrice(priceScale, x);\n    }\n    _internal_scrollPriceTo(pane, priceScale, x) {\n        if (priceScale._internal_isAutoScale()) {\n            return;\n        }\n        pane._internal_scrollPriceTo(priceScale, x);\n        this._internal_updateCrosshair();\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_endScrollPrice(pane, priceScale) {\n        if (priceScale._internal_isAutoScale()) {\n            return;\n        }\n        pane._internal_endScrollPrice(priceScale);\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_resetPriceScale(pane, priceScale) {\n        pane._internal_resetPriceScale(priceScale);\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_startScaleTime(position) {\n        this._private__timeScale._internal_startScale(position);\n    }\n    /**\n     * Zoom in/out the chart (depends on scale value).\n     *\n     * @param pointX - X coordinate of the point to apply the zoom (the point which should stay on its place)\n     * @param scale - Zoom value. Negative value means zoom out, positive - zoom in.\n     */ _internal_zoomTime(pointX, scale) {\n        const timeScale = this._internal_timeScale();\n        if (timeScale._internal_isEmpty() || scale === 0) {\n            return;\n        }\n        const timeScaleWidth = timeScale._internal_width();\n        pointX = Math.max(1, Math.min(pointX, timeScaleWidth));\n        timeScale._internal_zoom(pointX, scale);\n        this._internal_recalculateAllPanes();\n    }\n    _internal_scrollChart(x) {\n        this._internal_startScrollTime(0);\n        this._internal_scrollTimeTo(x);\n        this._internal_endScrollTime();\n    }\n    _internal_scaleTimeTo(x) {\n        this._private__timeScale._internal_scaleTo(x);\n        this._internal_recalculateAllPanes();\n    }\n    _internal_endScaleTime() {\n        this._private__timeScale._internal_endScale();\n        this._internal_lightUpdate();\n    }\n    _internal_startScrollTime(x) {\n        this._private__timeScale._internal_startScroll(x);\n    }\n    _internal_scrollTimeTo(x) {\n        this._private__timeScale._internal_scrollTo(x);\n        this._internal_recalculateAllPanes();\n    }\n    _internal_endScrollTime() {\n        this._private__timeScale._internal_endScroll();\n        this._internal_lightUpdate();\n    }\n    _internal_serieses() {\n        return this._private__serieses;\n    }\n    _internal_setAndSaveCurrentPosition(x, y, event, pane, skipEvent) {\n        this._private__crosshair._internal_saveOriginCoord(x, y);\n        let price = NaN;\n        let index = this._private__timeScale._internal_coordinateToIndex(x, true);\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\n        if (visibleBars !== null) {\n            index = Math.min(Math.max(visibleBars._internal_left(), index), visibleBars._internal_right());\n        }\n        const priceScale = pane._internal_defaultPriceScale();\n        const firstValue = priceScale._internal_firstValue();\n        if (firstValue !== null) {\n            price = priceScale._internal_coordinateToPrice(y, firstValue);\n        }\n        price = this._private__magnet._internal_align(price, index, pane);\n        this._private__crosshair._internal_setPosition(index, price, pane);\n        this._internal_cursorUpdate();\n        if (!skipEvent) {\n            const hitTest = hitTestPane(pane, x, y);\n            this._internal_setHoveredSource(hitTest && {\n                _internal_source: hitTest._internal_source,\n                _internal_object: hitTest._internal_object,\n                _internal_cursorStyle: hitTest._internal_cursorStyle || null\n            });\n            this._private__crosshairMoved._internal_fire(this._private__crosshair._internal_appliedIndex(), {\n                x,\n                y\n            }, event);\n        }\n    }\n    // A position provided external (not from an internal event listener)\n    _internal_setAndSaveSyntheticPosition(price, horizontalPosition, pane) {\n        const priceScale = pane._internal_defaultPriceScale();\n        const firstValue = priceScale._internal_firstValue();\n        const y = priceScale._internal_priceToCoordinate(price, ensureNotNull(firstValue));\n        const index = this._private__timeScale._internal_timeToIndex(horizontalPosition, true);\n        const x = this._private__timeScale._internal_indexToCoordinate(ensureNotNull(index));\n        this._internal_setAndSaveCurrentPosition(x, y, null, pane, true);\n    }\n    _internal_clearCurrentPosition(skipEvent) {\n        const crosshair = this._internal_crosshairSource();\n        crosshair._internal_clearPosition();\n        this._internal_cursorUpdate();\n        if (!skipEvent) {\n            this._private__crosshairMoved._internal_fire(null, null, null);\n        }\n    }\n    _internal_updateCrosshair() {\n        // apply magnet\n        const pane = this._private__crosshair._internal_pane();\n        if (pane !== null) {\n            const x = this._private__crosshair._internal_originCoordX();\n            const y = this._private__crosshair._internal_originCoordY();\n            this._internal_setAndSaveCurrentPosition(x, y, null, pane);\n        }\n        this._private__crosshair._internal_updateAllViews();\n    }\n    _internal_updateTimeScale(newBaseIndex, newPoints, firstChangedPointIndex) {\n        const oldFirstTime = this._private__timeScale._internal_indexToTime(0);\n        if (newPoints !== undefined && firstChangedPointIndex !== undefined) {\n            this._private__timeScale._internal_update(newPoints, firstChangedPointIndex);\n        }\n        const newFirstTime = this._private__timeScale._internal_indexToTime(0);\n        const currentBaseIndex = this._private__timeScale._internal_baseIndex();\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\n        // if time scale cannot return current visible bars range (e.g. time scale has zero-width)\n        // then we do not need to update right offset to shift visible bars range to have the same right offset as we have before new bar\n        // (and actually we cannot)\n        if (visibleBars !== null && oldFirstTime !== null && newFirstTime !== null) {\n            const isLastSeriesBarVisible = visibleBars._internal_contains(currentBaseIndex);\n            const isLeftBarShiftToLeft = this._private__horzScaleBehavior.key(oldFirstTime) > this._private__horzScaleBehavior.key(newFirstTime);\n            const isSeriesPointsAdded = newBaseIndex !== null && newBaseIndex > currentBaseIndex;\n            const isSeriesPointsAddedToRight = isSeriesPointsAdded && !isLeftBarShiftToLeft;\n            const allowShiftWhenReplacingWhitespace = this._private__timeScale._internal_options().allowShiftVisibleRangeOnWhitespaceReplacement;\n            const replacedExistingWhitespace = firstChangedPointIndex === undefined;\n            const needShiftVisibleRangeOnNewBar = isLastSeriesBarVisible && (!replacedExistingWhitespace || allowShiftWhenReplacingWhitespace) && this._private__timeScale._internal_options().shiftVisibleRangeOnNewBar;\n            if (isSeriesPointsAddedToRight && !needShiftVisibleRangeOnNewBar) {\n                const compensationShift = newBaseIndex - currentBaseIndex;\n                this._private__timeScale._internal_setRightOffset(this._private__timeScale._internal_rightOffset() - compensationShift);\n            }\n        }\n        this._private__timeScale._internal_setBaseIndex(newBaseIndex);\n    }\n    _internal_recalculatePane(pane) {\n        if (pane !== null) {\n            pane._internal_recalculate();\n        }\n    }\n    _internal_paneForSource(source) {\n        if (isPanePrimitive(source)) {\n            return source;\n        }\n        const pane = this._private__panes.find((p)=>p._internal_orderedSources().includes(source));\n        return pane === undefined ? null : pane;\n    }\n    _internal_recalculateAllPanes() {\n        this._private__panes.forEach((p)=>p._internal_recalculate());\n        this._internal_updateCrosshair();\n    }\n    _internal_destroy() {\n        this._private__panes.forEach((p)=>p._internal_destroy());\n        this._private__panes.length = 0;\n        // to avoid memleaks\n        this._private__options.localization.priceFormatter = undefined;\n        this._private__options.localization.percentageFormatter = undefined;\n        this._private__options.localization.timeFormatter = undefined;\n    }\n    _internal_rendererOptionsProvider() {\n        return this._private__rendererOptionsProvider;\n    }\n    _internal_priceAxisRendererOptions() {\n        return this._private__rendererOptionsProvider._internal_options();\n    }\n    _internal_priceScalesOptionsChanged() {\n        return this._private__priceScalesOptionsChanged;\n    }\n    _internal_addSeriesToPane(series, paneIndex) {\n        const pane = this._private__getOrCreatePane(paneIndex);\n        this._private__addSeriesToPane(series, pane);\n        this._private__serieses.push(series);\n        if (this._private__serieses.length === 1) {\n            // call fullUpdate to recalculate chart's parts geometry\n            this._internal_fullUpdate();\n        } else {\n            this._internal_lightUpdate();\n        }\n    }\n    _internal_removeSeries(series) {\n        const pane = this._internal_paneForSource(series);\n        const seriesIndex = this._private__serieses.indexOf(series);\n        assert(seriesIndex !== -1, 'Series not found');\n        const paneImpl = ensureNotNull(pane);\n        this._private__serieses.splice(seriesIndex, 1);\n        paneImpl._internal_removeDataSource(series);\n        if (series._internal_destroy) {\n            series._internal_destroy();\n        }\n        this._private__timeScale._internal_recalculateIndicesWithData();\n        this._private__cleanupIfPaneIsEmpty(paneImpl);\n    }\n    _internal_moveSeriesToScale(series, targetScaleId) {\n        const pane = ensureNotNull(this._internal_paneForSource(series));\n        pane._internal_removeDataSource(series, true);\n        pane._internal_addDataSource(series, targetScaleId, true);\n    }\n    _internal_fitContent() {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_setFitContent();\n        this._private__invalidate(mask);\n    }\n    _internal_setTargetLogicalRange(range) {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_applyRange(range);\n        this._private__invalidate(mask);\n    }\n    _internal_resetTimeScale() {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_resetTimeScale();\n        this._private__invalidate(mask);\n    }\n    _internal_setBarSpacing(spacing) {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_setBarSpacing(spacing);\n        this._private__invalidate(mask);\n    }\n    _internal_setRightOffset(offset) {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_setRightOffset(offset);\n        this._private__invalidate(mask);\n    }\n    _internal_setTimeScaleAnimation(animation) {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_setTimeScaleAnimation(animation);\n        this._private__invalidate(mask);\n    }\n    _internal_stopTimeScaleAnimation() {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_stopTimeScaleAnimation();\n        this._private__invalidate(mask);\n    }\n    _internal_defaultVisiblePriceScaleId() {\n        return this._private__options.rightPriceScale.visible ? \"right\" /* DefaultPriceScaleId.Right */  : \"left\" /* DefaultPriceScaleId.Left */ ;\n    }\n    _internal_moveSeriesToPane(series, newPaneIndex) {\n        assert(newPaneIndex >= 0, 'Index should be greater or equal to 0');\n        const fromPaneIndex = this._private__seriesPaneIndex(series);\n        if (newPaneIndex === fromPaneIndex) {\n            return;\n        }\n        const previousPane = ensureNotNull(this._internal_paneForSource(series));\n        previousPane._internal_removeDataSource(series);\n        const newPane = this._private__getOrCreatePane(newPaneIndex);\n        this._private__addSeriesToPane(series, newPane);\n        if (previousPane._internal_dataSources().length === 0) {\n            this._private__cleanupIfPaneIsEmpty(previousPane);\n        }\n    }\n    _internal_backgroundBottomColor() {\n        return this._private__backgroundBottomColor;\n    }\n    _internal_backgroundTopColor() {\n        return this._private__backgroundTopColor;\n    }\n    _internal_backgroundColorAtYPercentFromTop(percent) {\n        const bottomColor = this._private__backgroundBottomColor;\n        const topColor = this._private__backgroundTopColor;\n        if (bottomColor === topColor) {\n            // solid background\n            return bottomColor;\n        }\n        // gradient background\n        // percent should be from 0 to 100 (we're using only integer values to make cache more efficient)\n        percent = Math.max(0, Math.min(100, Math.round(percent * 100)));\n        if (this._private__gradientColorsCache === null || this._private__gradientColorsCache._internal_topColor !== topColor || this._private__gradientColorsCache._internal_bottomColor !== bottomColor) {\n            this._private__gradientColorsCache = {\n                _internal_topColor: topColor,\n                _internal_bottomColor: bottomColor,\n                _internal_colors: new Map()\n            };\n        } else {\n            const cachedValue = this._private__gradientColorsCache._internal_colors.get(percent);\n            if (cachedValue !== undefined) {\n                return cachedValue;\n            }\n        }\n        const result = this._private__colorParser._internal_gradientColorAtPercent(topColor, bottomColor, percent / 100);\n        this._private__gradientColorsCache._internal_colors.set(percent, result);\n        return result;\n    }\n    _internal_getPaneIndex(pane) {\n        return this._private__panes.indexOf(pane);\n    }\n    _internal_colorParser() {\n        return this._private__colorParser;\n    }\n    _private__getOrCreatePane(index) {\n        assert(index >= 0, 'Index should be greater or equal to 0');\n        index = Math.min(this._private__panes.length, index);\n        if (index < this._private__panes.length) {\n            return this._private__panes[index];\n        }\n        const pane = new Pane(this._private__timeScale, this);\n        this._private__panes.push(pane);\n        // we always do autoscaling on the creation\n        // if autoscale option is true, it is ok, just recalculate by invalidation mask\n        // if autoscale option is false, autoscale anyway on the first draw\n        // also there is a scenario when autoscale is true in constructor and false later on applyOptions\n        const mask = InvalidateMask._internal_full();\n        mask._internal_invalidatePane(index, {\n            _internal_level: 0 /* InvalidationLevel.None */ ,\n            _internal_autoScale: true\n        });\n        this._private__invalidate(mask);\n        return pane;\n    }\n    _private__seriesPaneIndex(series) {\n        return this._private__panes.findIndex((pane)=>pane._internal_series().includes(series));\n    }\n    _private__paneInvalidationMask(pane, level) {\n        const inv = new InvalidateMask(level);\n        if (pane !== null) {\n            const index = this._private__panes.indexOf(pane);\n            inv._internal_invalidatePane(index, {\n                _internal_level: level\n            });\n        }\n        return inv;\n    }\n    _private__invalidationMaskForSource(source, invalidateType) {\n        if (invalidateType === undefined) {\n            invalidateType = 2 /* InvalidationLevel.Light */ ;\n        }\n        return this._private__paneInvalidationMask(this._internal_paneForSource(source), invalidateType);\n    }\n    _private__invalidate(mask) {\n        if (this._private__invalidateHandler) {\n            this._private__invalidateHandler(mask);\n        }\n        this._private__panes.forEach((pane)=>pane._internal_grid()._internal_paneView()._internal_update());\n    }\n    _private__addSeriesToPane(series, pane) {\n        const priceScaleId = series._internal_options().priceScaleId;\n        const targetScaleId = priceScaleId !== undefined ? priceScaleId : this._internal_defaultVisiblePriceScaleId();\n        pane._internal_addDataSource(series, targetScaleId);\n        if (!isDefaultPriceScale(targetScaleId)) {\n            // let's apply that options again to apply margins\n            series._internal_applyOptions(series._internal_options());\n        }\n    }\n    _private__getBackgroundColor(side) {\n        const layoutOptions = this._private__options['layout'];\n        if (layoutOptions.background.type === \"gradient\" /* ColorType.VerticalGradient */ ) {\n            return side === 0 /* BackgroundColorSide.Top */  ? layoutOptions.background.topColor : layoutOptions.background.bottomColor;\n        }\n        return layoutOptions.background.color;\n    }\n    _private__cleanupIfPaneIsEmpty(pane) {\n        if (pane._internal_dataSources().length === 0 && this._private__panes.length > 1) {\n            this._private__panes.splice(this._internal_getPaneIndex(pane), 1);\n            this._internal_fullUpdate();\n        }\n    }\n    constructor(invalidateHandler, options, horzScaleBehavior){\n        this._private__panes = [];\n        this._private__serieses = [];\n        this._private__width = 0;\n        this._private__hoveredSource = null;\n        this._private__priceScalesOptionsChanged = new Delegate();\n        this._private__crosshairMoved = new Delegate();\n        this._private__gradientColorsCache = null;\n        this._private__invalidateHandler = invalidateHandler;\n        this._private__options = options;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__colorParser = new ColorParser(this._private__options.layout.colorParsers);\n        this._private__rendererOptionsProvider = new PriceAxisRendererOptionsProvider(this);\n        this._private__timeScale = new TimeScale(this, options.timeScale, this._private__options.localization, horzScaleBehavior);\n        this._private__crosshair = new Crosshair(this, options.crosshair);\n        this._private__magnet = new Magnet(options.crosshair);\n        this._private__getOrCreatePane(0);\n        this._private__panes[0]._internal_setStretchFactor(DEFAULT_STRETCH_FACTOR * 2);\n        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */ );\n        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */ );\n    }\n}\nfunction fillUpDownCandlesticksColors(options) {\n    if (options.borderColor !== undefined) {\n        options.borderUpColor = options.borderColor;\n        options.borderDownColor = options.borderColor;\n    }\n    if (options.wickColor !== undefined) {\n        options.wickUpColor = options.wickColor;\n        options.wickDownColor = options.wickColor;\n    }\n}\n/**\n * Represents the type of the last price animation for series such as area or line.\n */ var LastPriceAnimationMode;\n(function(LastPriceAnimationMode) {\n    /**\n     * Animation is always disabled\n     */ LastPriceAnimationMode[LastPriceAnimationMode[\"Disabled\"] = 0] = \"Disabled\";\n    /**\n     * Animation is always enabled.\n     */ LastPriceAnimationMode[LastPriceAnimationMode[\"Continuous\"] = 1] = \"Continuous\";\n    /**\n     * Animation is active after new data.\n     */ LastPriceAnimationMode[LastPriceAnimationMode[\"OnDataUpdate\"] = 2] = \"OnDataUpdate\";\n})(LastPriceAnimationMode || (LastPriceAnimationMode = {}));\nfunction precisionByMinMove(minMove) {\n    if (minMove >= 1) {\n        return 0;\n    }\n    let i = 0;\n    for(; i < 8; i++){\n        const intPart = Math.round(minMove);\n        const fractPart = Math.abs(intPart - minMove);\n        if (fractPart < 1e-8) {\n            return i;\n        }\n        minMove = minMove * 10;\n    }\n    return i;\n}\n/**\n * Represents the source of data to be used for the horizontal price line.\n */ var PriceLineSource;\n(function(PriceLineSource) {\n    /**\n     * Use the last bar data.\n     */ PriceLineSource[PriceLineSource[\"LastBar\"] = 0] = \"LastBar\";\n    /**\n     * Use the last visible data of the chart viewport.\n     */ PriceLineSource[PriceLineSource[\"LastVisible\"] = 1] = \"LastVisible\";\n})(PriceLineSource || (PriceLineSource = {}));\n/**\n * Represents a type of color.\n */ var ColorType;\n(function(ColorType) {\n    /** Solid color */ ColorType[\"Solid\"] = \"solid\";\n    /** Vertical gradient color */ ColorType[\"VerticalGradient\"] = \"gradient\";\n})(ColorType || (ColorType = {}));\n/**\n * Check if a time value is a business day object.\n *\n * @param time - The time to check.\n * @returns `true` if `time` is a {@link BusinessDay} object, false otherwise.\n */ function isBusinessDay(time) {\n    return !isNumber(time) && !isString(time);\n}\n/**\n * Check if a time value is a UTC timestamp number.\n *\n * @param time - The time to check.\n * @returns `true` if `time` is a {@link UTCTimestamp} number, false otherwise.\n */ function isUTCTimestamp(time) {\n    return isNumber(time);\n}\n/**\n * Represents the type of a tick mark on the time axis.\n */ var TickMarkType;\n(function(TickMarkType) {\n    /**\n     * The start of the year (e.g. it's the first tick mark in a year).\n     */ TickMarkType[TickMarkType[\"Year\"] = 0] = \"Year\";\n    /**\n     * The start of the month (e.g. it's the first tick mark in a month).\n     */ TickMarkType[TickMarkType[\"Month\"] = 1] = \"Month\";\n    /**\n     * A day of the month.\n     */ TickMarkType[TickMarkType[\"DayOfMonth\"] = 2] = \"DayOfMonth\";\n    /**\n     * A time without seconds.\n     */ TickMarkType[TickMarkType[\"Time\"] = 3] = \"Time\";\n    /**\n     * A time with seconds.\n     */ TickMarkType[TickMarkType[\"TimeWithSeconds\"] = 4] = \"TimeWithSeconds\";\n})(TickMarkType || (TickMarkType = {}));\nconst getMonth = (date)=>date.getUTCMonth() + 1;\nconst getDay = (date)=>date.getUTCDate();\nconst getYear = (date)=>date.getUTCFullYear();\nconst dd = (date)=>numberToStringWithLeadingZero(getDay(date), 2);\nconst MMMM = (date, locale)=>new Date(date.getUTCFullYear(), date.getUTCMonth(), 1).toLocaleString(locale, {\n        month: 'long'\n    });\n_c = MMMM;\nconst MMM = (date, locale)=>new Date(date.getUTCFullYear(), date.getUTCMonth(), 1).toLocaleString(locale, {\n        month: 'short'\n    });\n_c1 = MMM;\nconst MM = (date)=>numberToStringWithLeadingZero(getMonth(date), 2);\n_c2 = MM;\nconst yy = (date)=>numberToStringWithLeadingZero(getYear(date) % 100, 2);\nconst yyyy = (date)=>numberToStringWithLeadingZero(getYear(date), 4);\nfunction formatDate(date, format, locale) {\n    return format.replace(/yyyy/g, yyyy(date)).replace(/yy/g, yy(date)).replace(/MMMM/g, MMMM(date, locale)).replace(/MMM/g, MMM(date, locale)).replace(/MM/g, MM(date)).replace(/dd/g, dd(date));\n}\nclass DateFormatter {\n    _internal_format(date) {\n        return formatDate(date, this._private__dateFormat, this._private__locale);\n    }\n    constructor(dateFormat = 'yyyy-MM-dd', locale = 'default'){\n        this._private__dateFormat = dateFormat;\n        this._private__locale = locale;\n    }\n}\nclass TimeFormatter {\n    _internal_format(date) {\n        return this._private__formatStr.replace('%h', numberToStringWithLeadingZero(date.getUTCHours(), 2)).replace('%m', numberToStringWithLeadingZero(date.getUTCMinutes(), 2)).replace('%s', numberToStringWithLeadingZero(date.getUTCSeconds(), 2));\n    }\n    constructor(format){\n        this._private__formatStr = format || '%h:%m:%s';\n    }\n}\nconst defaultParams = {\n    _internal_dateFormat: 'yyyy-MM-dd',\n    _internal_timeFormat: '%h:%m:%s',\n    _internal_dateTimeSeparator: ' ',\n    _internal_locale: 'default'\n};\nclass DateTimeFormatter {\n    _internal_format(dateTime) {\n        return \"\".concat(this._private__dateFormatter._internal_format(dateTime)).concat(this._private__separator).concat(this._private__timeFormatter._internal_format(dateTime));\n    }\n    constructor(params = {}){\n        const formatterParams = {\n            ...defaultParams,\n            ...params\n        };\n        this._private__dateFormatter = new DateFormatter(formatterParams._internal_dateFormat, formatterParams._internal_locale);\n        this._private__timeFormatter = new TimeFormatter(formatterParams._internal_timeFormat);\n        this._private__separator = formatterParams._internal_dateTimeSeparator;\n    }\n}\nfunction defaultTickMarkFormatter(timePoint, tickMarkType, locale) {\n    const formatOptions = {};\n    switch(tickMarkType){\n        case 0 /* TickMarkType.Year */ :\n            formatOptions.year = 'numeric';\n            break;\n        case 1 /* TickMarkType.Month */ :\n            formatOptions.month = 'short';\n            break;\n        case 2 /* TickMarkType.DayOfMonth */ :\n            formatOptions.day = 'numeric';\n            break;\n        case 3 /* TickMarkType.Time */ :\n            formatOptions.hour12 = false;\n            formatOptions.hour = '2-digit';\n            formatOptions.minute = '2-digit';\n            break;\n        case 4 /* TickMarkType.TimeWithSeconds */ :\n            formatOptions.hour12 = false;\n            formatOptions.hour = '2-digit';\n            formatOptions.minute = '2-digit';\n            formatOptions.second = '2-digit';\n            break;\n    }\n    const date = timePoint._internal_businessDay === undefined ? new Date(timePoint._internal_timestamp * 1000) : new Date(Date.UTC(timePoint._internal_businessDay.year, timePoint._internal_businessDay.month - 1, timePoint._internal_businessDay.day));\n    // from given date we should use only as UTC date or timestamp\n    // but to format as locale date we can convert UTC date to local date\n    const localDateFromUtc = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n    return localDateFromUtc.toLocaleString(locale, formatOptions);\n}\nfunction hours(count) {\n    return count * 60 * 60 * 1000;\n}\nfunction minutes(count) {\n    return count * 60 * 1000;\n}\nfunction seconds(count) {\n    return count * 1000;\n}\nconst intradayWeightDivisors = [\n    {\n        _internal_divisor: seconds(1),\n        _internal_weight: 10 /* TickMarkWeight.Second */ \n    },\n    {\n        _internal_divisor: minutes(1),\n        _internal_weight: 20 /* TickMarkWeight.Minute1 */ \n    },\n    {\n        _internal_divisor: minutes(5),\n        _internal_weight: 21 /* TickMarkWeight.Minute5 */ \n    },\n    {\n        _internal_divisor: minutes(30),\n        _internal_weight: 22 /* TickMarkWeight.Minute30 */ \n    },\n    {\n        _internal_divisor: hours(1),\n        _internal_weight: 30 /* TickMarkWeight.Hour1 */ \n    },\n    {\n        _internal_divisor: hours(3),\n        _internal_weight: 31 /* TickMarkWeight.Hour3 */ \n    },\n    {\n        _internal_divisor: hours(6),\n        _internal_weight: 32 /* TickMarkWeight.Hour6 */ \n    },\n    {\n        _internal_divisor: hours(12),\n        _internal_weight: 33 /* TickMarkWeight.Hour12 */ \n    }\n];\nfunction weightByTime(currentDate, prevDate) {\n    if (currentDate.getUTCFullYear() !== prevDate.getUTCFullYear()) {\n        return 70 /* TickMarkWeight.Year */ ;\n    } else if (currentDate.getUTCMonth() !== prevDate.getUTCMonth()) {\n        return 60 /* TickMarkWeight.Month */ ;\n    } else if (currentDate.getUTCDate() !== prevDate.getUTCDate()) {\n        return 50 /* TickMarkWeight.Day */ ;\n    }\n    for(let i = intradayWeightDivisors.length - 1; i >= 0; --i){\n        if (Math.floor(prevDate.getTime() / intradayWeightDivisors[i]._internal_divisor) !== Math.floor(currentDate.getTime() / intradayWeightDivisors[i]._internal_divisor)) {\n            return intradayWeightDivisors[i]._internal_weight;\n        }\n    }\n    return 0 /* TickMarkWeight.LessThanSecond */ ;\n}\nfunction cast(t) {\n    return t;\n}\nfunction fillWeightsForPoints(sortedTimePoints) {\n    let startIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    if (sortedTimePoints.length === 0) {\n        return;\n    }\n    let prevTime = startIndex === 0 ? null : cast(sortedTimePoints[startIndex - 1].time)._internal_timestamp;\n    let prevDate = prevTime !== null ? new Date(prevTime * 1000) : null;\n    let totalTimeDiff = 0;\n    for(let index = startIndex; index < sortedTimePoints.length; ++index){\n        const currentPoint = sortedTimePoints[index];\n        const currentDate = new Date(cast(currentPoint.time)._internal_timestamp * 1000);\n        if (prevDate !== null) {\n            currentPoint.timeWeight = weightByTime(currentDate, prevDate);\n        }\n        totalTimeDiff += cast(currentPoint.time)._internal_timestamp - (prevTime || cast(currentPoint.time)._internal_timestamp);\n        prevTime = cast(currentPoint.time)._internal_timestamp;\n        prevDate = currentDate;\n    }\n    if (startIndex === 0 && sortedTimePoints.length > 1) {\n        // let's guess a weight for the first point\n        // let's say the previous point was average time back in the history\n        const averageTimeDiff = Math.ceil(totalTimeDiff / (sortedTimePoints.length - 1));\n        const approxPrevDate = new Date((cast(sortedTimePoints[0].time)._internal_timestamp - averageTimeDiff) * 1000);\n        sortedTimePoints[0].timeWeight = weightByTime(new Date(cast(sortedTimePoints[0].time)._internal_timestamp * 1000), approxPrevDate);\n    }\n}\nfunction businessDayConverter(time) {\n    let businessDay = time;\n    if (isString(time)) {\n        businessDay = stringToBusinessDay(time);\n    }\n    if (!isBusinessDay(businessDay)) {\n        throw new Error('time must be of type BusinessDay');\n    }\n    const date = new Date(Date.UTC(businessDay.year, businessDay.month - 1, businessDay.day, 0, 0, 0, 0));\n    return {\n        _internal_timestamp: Math.round(date.getTime() / 1000),\n        _internal_businessDay: businessDay\n    };\n}\nfunction timestampConverter(time) {\n    if (!isUTCTimestamp(time)) {\n        throw new Error('time must be of type isUTCTimestamp');\n    }\n    return {\n        _internal_timestamp: time\n    };\n}\nfunction selectTimeConverter(data) {\n    if (data.length === 0) {\n        return null;\n    }\n    if (isBusinessDay(data[0].time) || isString(data[0].time)) {\n        return businessDayConverter;\n    }\n    return timestampConverter;\n}\nconst validDateRegex = /^\\d\\d\\d\\d-\\d\\d-\\d\\d$/;\nfunction convertTime(time) {\n    if (isUTCTimestamp(time)) {\n        return timestampConverter(time);\n    }\n    if (!isBusinessDay(time)) {\n        return businessDayConverter(stringToBusinessDay(time));\n    }\n    return businessDayConverter(time);\n}\nfunction stringToBusinessDay(value) {\n    {\n        // in some browsers (I look at your Chrome) the Date constructor may accept invalid date string\n        // but parses them in 'implementation specific' way\n        // for example 2019-1-1 isn't the same as 2019-01-01 (for Chrome both are 'valid' date strings)\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=968939\n        // so, we need to be sure that date has valid format to avoid strange behavior and hours of debugging\n        // but let's do this in development build only because of perf\n        if (!validDateRegex.test(value)) {\n            throw new Error(\"Invalid date string=\".concat(value, \", expected format=yyyy-mm-dd\"));\n        }\n    }\n    const d = new Date(value);\n    if (isNaN(d.getTime())) {\n        throw new Error(\"Invalid date string=\".concat(value, \", expected format=yyyy-mm-dd\"));\n    }\n    return {\n        day: d.getUTCDate(),\n        month: d.getUTCMonth() + 1,\n        year: d.getUTCFullYear()\n    };\n}\nfunction convertStringToBusinessDay(value) {\n    if (isString(value.time)) {\n        value.time = stringToBusinessDay(value.time);\n    }\n}\nfunction convertStringsToBusinessDays(data) {\n    return data.forEach(convertStringToBusinessDay);\n}\n// eslint-disable-next-line complexity\nfunction weightToTickMarkType(weight, timeVisible, secondsVisible) {\n    switch(weight){\n        case 0 /* TickMarkWeight.LessThanSecond */ :\n        case 10 /* TickMarkWeight.Second */ :\n            return timeVisible ? secondsVisible ? 4 /* TickMarkType.TimeWithSeconds */  : 3 /* TickMarkType.Time */  : 2 /* TickMarkType.DayOfMonth */ ;\n        case 20 /* TickMarkWeight.Minute1 */ :\n        case 21 /* TickMarkWeight.Minute5 */ :\n        case 22 /* TickMarkWeight.Minute30 */ :\n        case 30 /* TickMarkWeight.Hour1 */ :\n        case 31 /* TickMarkWeight.Hour3 */ :\n        case 32 /* TickMarkWeight.Hour6 */ :\n        case 33 /* TickMarkWeight.Hour12 */ :\n            return timeVisible ? 3 /* TickMarkType.Time */  : 2 /* TickMarkType.DayOfMonth */ ;\n        case 50 /* TickMarkWeight.Day */ :\n            return 2 /* TickMarkType.DayOfMonth */ ;\n        case 60 /* TickMarkWeight.Month */ :\n            return 1 /* TickMarkType.Month */ ;\n        case 70 /* TickMarkWeight.Year */ :\n            return 0 /* TickMarkType.Year */ ;\n    }\n}\nclass HorzScaleBehaviorTime {\n    options() {\n        return this._private__options;\n    }\n    setOptions(options) {\n        this._private__options = options;\n        this.updateFormatter(options.localization);\n    }\n    preprocessData(data) {\n        if (Array.isArray(data)) {\n            convertStringsToBusinessDays(data);\n        } else {\n            convertStringToBusinessDay(data);\n        }\n    }\n    createConverterToInternalObj(data) {\n        return ensureNotNull(selectTimeConverter(data));\n    }\n    key(item) {\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof item === 'object' && \"_internal_timestamp\" in item) {\n            return item._internal_timestamp;\n        } else {\n            return this.key(this.convertHorzItemToInternal(item));\n        }\n    }\n    cacheKey(item) {\n        const time = item;\n        return time._internal_businessDay === undefined ? new Date(time._internal_timestamp * 1000).getTime() : new Date(Date.UTC(time._internal_businessDay.year, time._internal_businessDay.month - 1, time._internal_businessDay.day)).getTime();\n    }\n    convertHorzItemToInternal(item) {\n        return convertTime(item);\n    }\n    updateFormatter(options) {\n        if (!this._private__options) {\n            return;\n        }\n        const dateFormat = options.dateFormat;\n        if (this._private__options.timeScale.timeVisible) {\n            this._private__dateTimeFormatter = new DateTimeFormatter({\n                _internal_dateFormat: dateFormat,\n                _internal_timeFormat: this._private__options.timeScale.secondsVisible ? '%h:%m:%s' : '%h:%m',\n                _internal_dateTimeSeparator: '   ',\n                _internal_locale: options.locale\n            });\n        } else {\n            this._private__dateTimeFormatter = new DateFormatter(dateFormat, options.locale);\n        }\n    }\n    formatHorzItem(item) {\n        const tp = item;\n        return this._private__dateTimeFormatter._internal_format(new Date(tp._internal_timestamp * 1000));\n    }\n    formatTickmark(tickMark, localizationOptions) {\n        const tickMarkType = weightToTickMarkType(tickMark.weight, this._private__options.timeScale.timeVisible, this._private__options.timeScale.secondsVisible);\n        const options = this._private__options.timeScale;\n        if (options.tickMarkFormatter !== undefined) {\n            const tickMarkString = options.tickMarkFormatter(tickMark.originalTime, tickMarkType, localizationOptions.locale);\n            if (tickMarkString !== null) {\n                return tickMarkString;\n            }\n        }\n        return defaultTickMarkFormatter(tickMark.time, tickMarkType, localizationOptions.locale);\n    }\n    maxTickMarkWeight(tickMarks) {\n        let maxWeight = tickMarks.reduce(markWithGreaterWeight$2, tickMarks[0]).weight;\n        // special case: it looks strange if 15:00 is bold but 14:00 is not\n        // so if maxWeight > TickMarkWeight.Hour1 and < TickMarkWeight.Day reduce it to TickMarkWeight.Hour1\n        if (maxWeight > 30 /* TickMarkWeight.Hour1 */  && maxWeight < 50 /* TickMarkWeight.Day */ ) {\n            maxWeight = 30 /* TickMarkWeight.Hour1 */ ;\n        }\n        return maxWeight;\n    }\n    fillWeightsForPoints(sortedTimePoints, startIndex) {\n        fillWeightsForPoints(sortedTimePoints, startIndex);\n    }\n    static _internal_applyDefaults(options) {\n        return merge({\n            localization: {\n                dateFormat: 'dd MMM \\'yy'\n            }\n        }, options !== null && options !== void 0 ? options : {});\n    }\n}\n/**\n * When you're trying to use the library in server-side context (for instance in SSR)\n * you don't have some browser-specific variables like navigator or window\n * and if the library will use them on the top level of the library\n * the import will fail due ReferenceError\n * thus, this allows use the navigator on the top level and being imported in server-side context as well\n * See issue #446\n */ // eslint-disable-next-line @typescript-eslint/tslint/config\nconst isRunningOnClientSide = typeof window !== 'undefined';\nfunction isFF() {\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    return window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n}\nfunction isIOS() {\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    return /iPhone|iPad|iPod/.test(window.navigator.platform);\n}\nfunction isChrome() {\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    return window.chrome !== undefined;\n}\n// Determine whether the browser is running on windows.\nfunction isWindows() {\n    var _navigator_userAgentData, _navigator;\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    // more accurate if available\n    if ((_navigator = navigator) === null || _navigator === void 0 ? void 0 : (_navigator_userAgentData = _navigator.userAgentData) === null || _navigator_userAgentData === void 0 ? void 0 : _navigator_userAgentData.platform) {\n        return navigator.userAgentData.platform === 'Windows';\n    }\n    return navigator.userAgent.toLowerCase().indexOf('win') >= 0;\n}\n// Determine whether the browser is Chromium based.\nfunction isChromiumBased() {\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    if (!navigator.userAgentData) {\n        return false;\n    }\n    return navigator.userAgentData.brands.some((brand)=>{\n        return brand.brand.includes('Chromium');\n    });\n}\n/// <reference types=\"_build-time-constants\" />\nfunction warn(msg) {\n    {\n        // eslint-disable-next-line no-console\n        console.warn(msg);\n    }\n}\n// on Hi-DPI CSS size * Device Pixel Ratio should be integer to avoid smoothing\n// For chart widget we decrease the size because we must be inside container.\n// For time axis this is not important, since it just affects space for pane widgets\nfunction suggestChartSize(originalSize) {\n    const integerWidth = Math.floor(originalSize.width);\n    const integerHeight = Math.floor(originalSize.height);\n    const width = integerWidth - integerWidth % 2;\n    const height = integerHeight - integerHeight % 2;\n    return (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n        width,\n        height\n    });\n}\nfunction suggestTimeScaleHeight(originalHeight) {\n    return originalHeight + originalHeight % 2;\n}\nfunction suggestPriceScaleWidth(originalWidth) {\n    return originalWidth + originalWidth % 2;\n}\nfunction preventScrollByWheelClick(el) {\n    if (!isChrome()) {\n        return;\n    }\n    el.addEventListener('mousedown', (e)=>{\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (e.button === 1 /* MouseEventButton.Middle */ ) {\n            // prevent incorrect scrolling event\n            e.preventDefault();\n            return false;\n        }\n        return undefined;\n    });\n}\n// TODO: get rid of a lot of boolean flags, probably we should replace it with some enum\nclass MouseEventHandler {\n    _internal_destroy() {\n        if (this._private__unsubscribeOutsideMouseEvents !== null) {\n            this._private__unsubscribeOutsideMouseEvents();\n            this._private__unsubscribeOutsideMouseEvents = null;\n        }\n        if (this._private__unsubscribeOutsideTouchEvents !== null) {\n            this._private__unsubscribeOutsideTouchEvents();\n            this._private__unsubscribeOutsideTouchEvents = null;\n        }\n        if (this._private__unsubscribeMousemove !== null) {\n            this._private__unsubscribeMousemove();\n            this._private__unsubscribeMousemove = null;\n        }\n        if (this._private__unsubscribeRootMouseEvents !== null) {\n            this._private__unsubscribeRootMouseEvents();\n            this._private__unsubscribeRootMouseEvents = null;\n        }\n        if (this._private__unsubscribeRootTouchEvents !== null) {\n            this._private__unsubscribeRootTouchEvents();\n            this._private__unsubscribeRootTouchEvents = null;\n        }\n        if (this._private__unsubscribeMobileSafariEvents !== null) {\n            this._private__unsubscribeMobileSafariEvents();\n            this._private__unsubscribeMobileSafariEvents = null;\n        }\n        this._private__clearLongTapTimeout();\n        this._private__resetClickTimeout();\n    }\n    _private__mouseEnterHandler(enterEvent) {\n        if (this._private__unsubscribeMousemove) {\n            this._private__unsubscribeMousemove();\n        }\n        const boundMouseMoveHandler = this._private__mouseMoveHandler.bind(this);\n        this._private__unsubscribeMousemove = ()=>{\n            this._private__target.removeEventListener('mousemove', boundMouseMoveHandler);\n        };\n        this._private__target.addEventListener('mousemove', boundMouseMoveHandler);\n        if (this._private__firesTouchEvents(enterEvent)) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(enterEvent);\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseEnterEvent);\n        this._private__acceptMouseLeave = true;\n    }\n    _private__resetClickTimeout() {\n        if (this._private__clickTimeoutId !== null) {\n            clearTimeout(this._private__clickTimeoutId);\n        }\n        this._private__clickCount = 0;\n        this._private__clickTimeoutId = null;\n        this._private__clickPosition = {\n            _internal_x: Number.NEGATIVE_INFINITY,\n            _internal_y: Number.POSITIVE_INFINITY\n        };\n    }\n    _private__resetTapTimeout() {\n        if (this._private__tapTimeoutId !== null) {\n            clearTimeout(this._private__tapTimeoutId);\n        }\n        this._private__tapCount = 0;\n        this._private__tapTimeoutId = null;\n        this._private__tapPosition = {\n            _internal_x: Number.NEGATIVE_INFINITY,\n            _internal_y: Number.POSITIVE_INFINITY\n        };\n    }\n    _private__mouseMoveHandler(moveEvent) {\n        if (this._private__mousePressed || this._private__touchMoveStartPosition !== null) {\n            return;\n        }\n        if (this._private__firesTouchEvents(moveEvent)) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(moveEvent);\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseMoveEvent);\n        this._private__acceptMouseLeave = true;\n    }\n    _private__touchMoveHandler(moveEvent) {\n        const touch = touchWithId(moveEvent.changedTouches, ensureNotNull(this._private__activeTouchId));\n        if (touch === null) {\n            return;\n        }\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(moveEvent);\n        if (this._private__startPinchMiddlePoint !== null) {\n            return;\n        }\n        if (this._private__preventTouchDragProcess) {\n            return;\n        }\n        // prevent pinch if move event comes faster than the second touch\n        this._private__pinchPrevented = true;\n        const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(touch), ensureNotNull(this._private__touchMoveStartPosition));\n        const { _internal_xOffset: xOffset, _internal_yOffset: yOffset, _internal_manhattanDistance: manhattanDistance } = moveInfo;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (!this._private__touchMoveExceededManhattanDistance && manhattanDistance < 5 /* Constants.CancelTapManhattanDistance */ ) {\n            return;\n        }\n        if (!this._private__touchMoveExceededManhattanDistance) {\n            // first time when current position exceeded manhattan distance\n            // vertical drag is more important than horizontal drag\n            // because we scroll the page vertically often than horizontally\n            const correctedXOffset = xOffset * 0.5;\n            // a drag can be only if touch page scroll isn't allowed\n            const isVertDrag = yOffset >= correctedXOffset && !this._private__options._internal_treatVertTouchDragAsPageScroll();\n            const isHorzDrag = correctedXOffset > yOffset && !this._private__options._internal_treatHorzTouchDragAsPageScroll();\n            // if drag event happened then we should revert preventDefault state to original one\n            // and try to process the drag event\n            // else we shouldn't prevent default of the event and ignore processing the drag event\n            if (!isVertDrag && !isHorzDrag) {\n                this._private__preventTouchDragProcess = true;\n            }\n            this._private__touchMoveExceededManhattanDistance = true;\n            // if manhattan distance is more that 5 - we should cancel tap event\n            this._private__cancelTap = true;\n            this._private__clearLongTapTimeout();\n            this._private__resetTapTimeout();\n        }\n        if (!this._private__preventTouchDragProcess) {\n            const compatEvent = this._private__makeCompatEvent(moveEvent, touch);\n            this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchMoveEvent);\n            // we should prevent default in case of touch only\n            // to prevent scroll of the page\n            preventDefault(moveEvent);\n        }\n    }\n    _private__mouseMoveWithDownHandler(moveEvent) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (moveEvent.button !== 0 /* MouseEventButton.Left */ ) {\n            return;\n        }\n        const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(moveEvent), ensureNotNull(this._private__mouseMoveStartPosition));\n        const { _internal_manhattanDistance: manhattanDistance } = moveInfo;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (manhattanDistance >= 5 /* Constants.CancelClickManhattanDistance */ ) {\n            // if manhattan distance is more that 5 - we should cancel click event\n            this._private__cancelClick = true;\n            this._private__resetClickTimeout();\n        }\n        if (this._private__cancelClick) {\n            // if this._cancelClick is true, that means that minimum manhattan distance is already exceeded\n            const compatEvent = this._private__makeCompatEvent(moveEvent);\n            this._private__processMouseEvent(compatEvent, this._private__handler._internal_pressedMouseMoveEvent);\n        }\n    }\n    _private__touchMouseMoveWithDownInfo(currentPosition, startPosition) {\n        const xOffset = Math.abs(startPosition._internal_x - currentPosition._internal_x);\n        const yOffset = Math.abs(startPosition._internal_y - currentPosition._internal_y);\n        const manhattanDistance = xOffset + yOffset;\n        return {\n            _internal_xOffset: xOffset,\n            _internal_yOffset: yOffset,\n            _internal_manhattanDistance: manhattanDistance\n        };\n    }\n    // eslint-disable-next-line complexity\n    _private__touchEndHandler(touchEndEvent) {\n        let touch = touchWithId(touchEndEvent.changedTouches, ensureNotNull(this._private__activeTouchId));\n        if (touch === null && touchEndEvent.touches.length === 0) {\n            // something went wrong, somehow we missed the required touchend event\n            // probably the browser has not sent this event\n            touch = touchEndEvent.changedTouches[0];\n        }\n        if (touch === null) {\n            return;\n        }\n        this._private__activeTouchId = null;\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(touchEndEvent);\n        this._private__clearLongTapTimeout();\n        this._private__touchMoveStartPosition = null;\n        if (this._private__unsubscribeRootTouchEvents) {\n            this._private__unsubscribeRootTouchEvents();\n            this._private__unsubscribeRootTouchEvents = null;\n        }\n        const compatEvent = this._private__makeCompatEvent(touchEndEvent, touch);\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchEndEvent);\n        ++this._private__tapCount;\n        if (this._private__tapTimeoutId && this._private__tapCount > 1) {\n            // check that both clicks are near enough\n            const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(touch), this._private__tapPosition);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n            if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */  && !this._private__cancelTap) {\n                this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);\n            }\n            this._private__resetTapTimeout();\n        } else {\n            if (!this._private__cancelTap) {\n                this._private__processTouchEvent(compatEvent, this._private__handler._internal_tapEvent);\n                // do not fire mouse events if tap handler was executed\n                // prevent click event on new dom element (who appeared after tap)\n                if (this._private__handler._internal_tapEvent) {\n                    preventDefault(touchEndEvent);\n                }\n            }\n        }\n        // prevent, for example, safari's dblclick-to-zoom or fast-click after long-tap\n        // we handle mouseDoubleClickEvent here ourselves\n        if (this._private__tapCount === 0) {\n            preventDefault(touchEndEvent);\n        }\n        if (touchEndEvent.touches.length === 0) {\n            if (this._private__longTapActive) {\n                this._private__longTapActive = false;\n                // prevent native click event\n                preventDefault(touchEndEvent);\n            }\n        }\n    }\n    _private__mouseUpHandler(mouseUpEvent) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (mouseUpEvent.button !== 0 /* MouseEventButton.Left */ ) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(mouseUpEvent);\n        this._private__mouseMoveStartPosition = null;\n        this._private__mousePressed = false;\n        if (this._private__unsubscribeRootMouseEvents) {\n            this._private__unsubscribeRootMouseEvents();\n            this._private__unsubscribeRootMouseEvents = null;\n        }\n        if (isFF()) {\n            const rootElement = this._private__target.ownerDocument.documentElement;\n            rootElement.removeEventListener('mouseleave', this._private__onFirefoxOutsideMouseUp);\n        }\n        if (this._private__firesTouchEvents(mouseUpEvent)) {\n            return;\n        }\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseUpEvent);\n        ++this._private__clickCount;\n        if (this._private__clickTimeoutId && this._private__clickCount > 1) {\n            // check that both clicks are near enough\n            const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(mouseUpEvent), this._private__clickPosition);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n            if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */  && !this._private__cancelClick) {\n                this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);\n            }\n            this._private__resetClickTimeout();\n        } else {\n            if (!this._private__cancelClick) {\n                this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseClickEvent);\n            }\n        }\n    }\n    _private__clearLongTapTimeout() {\n        if (this._private__longTapTimeoutId === null) {\n            return;\n        }\n        clearTimeout(this._private__longTapTimeoutId);\n        this._private__longTapTimeoutId = null;\n    }\n    _private__touchStartHandler(downEvent) {\n        if (this._private__activeTouchId !== null) {\n            return;\n        }\n        const touch = downEvent.changedTouches[0];\n        this._private__activeTouchId = touch.identifier;\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(downEvent);\n        const rootElement = this._private__target.ownerDocument.documentElement;\n        this._private__cancelTap = false;\n        this._private__touchMoveExceededManhattanDistance = false;\n        this._private__preventTouchDragProcess = false;\n        this._private__touchMoveStartPosition = getPosition(touch);\n        if (this._private__unsubscribeRootTouchEvents) {\n            this._private__unsubscribeRootTouchEvents();\n            this._private__unsubscribeRootTouchEvents = null;\n        }\n        {\n            const boundTouchMoveWithDownHandler = this._private__touchMoveHandler.bind(this);\n            const boundTouchEndHandler = this._private__touchEndHandler.bind(this);\n            this._private__unsubscribeRootTouchEvents = ()=>{\n                rootElement.removeEventListener('touchmove', boundTouchMoveWithDownHandler);\n                rootElement.removeEventListener('touchend', boundTouchEndHandler);\n            };\n            rootElement.addEventListener('touchmove', boundTouchMoveWithDownHandler, {\n                passive: false\n            });\n            rootElement.addEventListener('touchend', boundTouchEndHandler, {\n                passive: false\n            });\n            this._private__clearLongTapTimeout();\n            this._private__longTapTimeoutId = setTimeout(this._private__longTapHandler.bind(this, downEvent), 240 /* Delay.LongTap */ );\n        }\n        const compatEvent = this._private__makeCompatEvent(downEvent, touch);\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchStartEvent);\n        if (!this._private__tapTimeoutId) {\n            this._private__tapCount = 0;\n            this._private__tapTimeoutId = setTimeout(this._private__resetTapTimeout.bind(this), 500 /* Delay.ResetClick */ );\n            this._private__tapPosition = getPosition(touch);\n        }\n    }\n    _private__mouseDownHandler(downEvent) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (downEvent.button !== 0 /* MouseEventButton.Left */ ) {\n            return;\n        }\n        const rootElement = this._private__target.ownerDocument.documentElement;\n        if (isFF()) {\n            rootElement.addEventListener('mouseleave', this._private__onFirefoxOutsideMouseUp);\n        }\n        this._private__cancelClick = false;\n        this._private__mouseMoveStartPosition = getPosition(downEvent);\n        if (this._private__unsubscribeRootMouseEvents) {\n            this._private__unsubscribeRootMouseEvents();\n            this._private__unsubscribeRootMouseEvents = null;\n        }\n        {\n            const boundMouseMoveWithDownHandler = this._private__mouseMoveWithDownHandler.bind(this);\n            const boundMouseUpHandler = this._private__mouseUpHandler.bind(this);\n            this._private__unsubscribeRootMouseEvents = ()=>{\n                rootElement.removeEventListener('mousemove', boundMouseMoveWithDownHandler);\n                rootElement.removeEventListener('mouseup', boundMouseUpHandler);\n            };\n            rootElement.addEventListener('mousemove', boundMouseMoveWithDownHandler);\n            rootElement.addEventListener('mouseup', boundMouseUpHandler);\n        }\n        this._private__mousePressed = true;\n        if (this._private__firesTouchEvents(downEvent)) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(downEvent);\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDownEvent);\n        if (!this._private__clickTimeoutId) {\n            this._private__clickCount = 0;\n            this._private__clickTimeoutId = setTimeout(this._private__resetClickTimeout.bind(this), 500 /* Delay.ResetClick */ );\n            this._private__clickPosition = getPosition(downEvent);\n        }\n    }\n    _private__init() {\n        this._private__target.addEventListener('mouseenter', this._private__mouseEnterHandler.bind(this));\n        // Do not show context menu when something went wrong\n        this._private__target.addEventListener('touchcancel', this._private__clearLongTapTimeout.bind(this));\n        {\n            const doc = this._private__target.ownerDocument;\n            const outsideHandler = (event)=>{\n                if (!this._private__handler._internal_mouseDownOutsideEvent) {\n                    return;\n                }\n                if (event.composed && this._private__target.contains(event.composedPath()[0])) {\n                    return;\n                }\n                if (event.target && this._private__target.contains(event.target)) {\n                    return;\n                }\n                this._private__handler._internal_mouseDownOutsideEvent();\n            };\n            this._private__unsubscribeOutsideTouchEvents = ()=>{\n                doc.removeEventListener('touchstart', outsideHandler);\n            };\n            this._private__unsubscribeOutsideMouseEvents = ()=>{\n                doc.removeEventListener('mousedown', outsideHandler);\n            };\n            doc.addEventListener('mousedown', outsideHandler);\n            doc.addEventListener('touchstart', outsideHandler, {\n                passive: true\n            });\n        }\n        if (isIOS()) {\n            this._private__unsubscribeMobileSafariEvents = ()=>{\n                this._private__target.removeEventListener('dblclick', this._private__onMobileSafariDoubleClick);\n            };\n            this._private__target.addEventListener('dblclick', this._private__onMobileSafariDoubleClick);\n        }\n        this._private__target.addEventListener('mouseleave', this._private__mouseLeaveHandler.bind(this));\n        this._private__target.addEventListener('touchstart', this._private__touchStartHandler.bind(this), {\n            passive: true\n        });\n        preventScrollByWheelClick(this._private__target);\n        this._private__target.addEventListener('mousedown', this._private__mouseDownHandler.bind(this));\n        this._private__initPinch();\n        // Hey mobile Safari, what's up?\n        // If mobile Safari doesn't have any touchmove handler with passive=false\n        // it treats a touchstart and the following touchmove events as cancelable=false,\n        // so we can't prevent them (as soon we subscribe on touchmove inside touchstart's handler).\n        // And we'll get scroll of the page along with chart's one instead of only chart's scroll.\n        this._private__target.addEventListener('touchmove', ()=>{}, {\n            passive: false\n        });\n    }\n    _private__initPinch() {\n        if (this._private__handler._internal_pinchStartEvent === undefined && this._private__handler._internal_pinchEvent === undefined && this._private__handler._internal_pinchEndEvent === undefined) {\n            return;\n        }\n        this._private__target.addEventListener('touchstart', (event)=>this._private__checkPinchState(event.touches), {\n            passive: true\n        });\n        this._private__target.addEventListener('touchmove', (event)=>{\n            if (event.touches.length !== 2 || this._private__startPinchMiddlePoint === null) {\n                return;\n            }\n            if (this._private__handler._internal_pinchEvent !== undefined) {\n                const currentDistance = getDistance(event.touches[0], event.touches[1]);\n                const scale = currentDistance / this._private__startPinchDistance;\n                this._private__handler._internal_pinchEvent(this._private__startPinchMiddlePoint, scale);\n                preventDefault(event);\n            }\n        }, {\n            passive: false\n        });\n        this._private__target.addEventListener('touchend', (event)=>{\n            this._private__checkPinchState(event.touches);\n        });\n    }\n    _private__checkPinchState(touches) {\n        if (touches.length === 1) {\n            this._private__pinchPrevented = false;\n        }\n        if (touches.length !== 2 || this._private__pinchPrevented || this._private__longTapActive) {\n            this._private__stopPinch();\n        } else {\n            this._private__startPinch(touches);\n        }\n    }\n    _private__startPinch(touches) {\n        const box = getBoundingClientRect(this._private__target);\n        this._private__startPinchMiddlePoint = {\n            _internal_x: (touches[0].clientX - box.left + (touches[1].clientX - box.left)) / 2,\n            _internal_y: (touches[0].clientY - box.top + (touches[1].clientY - box.top)) / 2\n        };\n        this._private__startPinchDistance = getDistance(touches[0], touches[1]);\n        if (this._private__handler._internal_pinchStartEvent !== undefined) {\n            this._private__handler._internal_pinchStartEvent();\n        }\n        this._private__clearLongTapTimeout();\n    }\n    _private__stopPinch() {\n        if (this._private__startPinchMiddlePoint === null) {\n            return;\n        }\n        this._private__startPinchMiddlePoint = null;\n        if (this._private__handler._internal_pinchEndEvent !== undefined) {\n            this._private__handler._internal_pinchEndEvent();\n        }\n    }\n    _private__mouseLeaveHandler(event) {\n        if (this._private__unsubscribeMousemove) {\n            this._private__unsubscribeMousemove();\n        }\n        if (this._private__firesTouchEvents(event)) {\n            return;\n        }\n        if (!this._private__acceptMouseLeave) {\n            // mobile Safari sometimes emits mouse leave event for no reason, there is no way to handle it in other way\n            // just ignore this event if there was no mouse move or mouse enter events\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(event);\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseLeaveEvent);\n        // accept all mouse leave events if it's not an iOS device\n        this._private__acceptMouseLeave = !isIOS();\n    }\n    _private__longTapHandler(event) {\n        const touch = touchWithId(event.touches, ensureNotNull(this._private__activeTouchId));\n        if (touch === null) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(event, touch);\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_longTapEvent);\n        this._private__cancelTap = true;\n        // long tap is active until touchend event with 0 touches occurred\n        this._private__longTapActive = true;\n    }\n    _private__firesTouchEvents(e) {\n        if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents !== undefined) {\n            return e.sourceCapabilities.firesTouchEvents;\n        }\n        return eventTimeStamp(e) < this._private__lastTouchEventTimeStamp + 500 /* Delay.PreventFiresTouchEvents */ ;\n    }\n    _private__processTouchEvent(event, callback) {\n        if (callback) {\n            callback.call(this._private__handler, event);\n        }\n    }\n    _private__processMouseEvent(event, callback) {\n        if (!callback) {\n            return;\n        }\n        callback.call(this._private__handler, event);\n    }\n    _private__makeCompatEvent(event, touch) {\n        // TouchEvent has no clientX/Y coordinates:\n        // We have to use the last Touch instead\n        const eventLike = touch || event;\n        const box = this._private__target.getBoundingClientRect() || {\n            left: 0,\n            top: 0\n        };\n        return {\n            clientX: eventLike.clientX,\n            clientY: eventLike.clientY,\n            pageX: eventLike.pageX,\n            pageY: eventLike.pageY,\n            screenX: eventLike.screenX,\n            screenY: eventLike.screenY,\n            localX: eventLike.clientX - box.left,\n            localY: eventLike.clientY - box.top,\n            ctrlKey: event.ctrlKey,\n            altKey: event.altKey,\n            shiftKey: event.shiftKey,\n            metaKey: event.metaKey,\n            _internal_isTouch: !event.type.startsWith('mouse') && event.type !== 'contextmenu' && event.type !== 'click',\n            _internal_srcType: event.type,\n            _internal_target: eventLike.target,\n            _internal_view: event.view,\n            _internal_preventDefault: ()=>{\n                if (event.type !== 'touchstart') {\n                    // touchstart is passive and cannot be prevented\n                    preventDefault(event);\n                }\n            }\n        };\n    }\n    constructor(target, handler, options){\n        this._private__clickCount = 0;\n        this._private__clickTimeoutId = null;\n        this._private__clickPosition = {\n            _internal_x: Number.NEGATIVE_INFINITY,\n            _internal_y: Number.POSITIVE_INFINITY\n        };\n        this._private__tapCount = 0;\n        this._private__tapTimeoutId = null;\n        this._private__tapPosition = {\n            _internal_x: Number.NEGATIVE_INFINITY,\n            _internal_y: Number.POSITIVE_INFINITY\n        };\n        this._private__longTapTimeoutId = null;\n        this._private__longTapActive = false;\n        this._private__mouseMoveStartPosition = null;\n        this._private__touchMoveStartPosition = null;\n        this._private__touchMoveExceededManhattanDistance = false;\n        this._private__cancelClick = false;\n        this._private__cancelTap = false;\n        this._private__unsubscribeOutsideMouseEvents = null;\n        this._private__unsubscribeOutsideTouchEvents = null;\n        this._private__unsubscribeMobileSafariEvents = null;\n        this._private__unsubscribeMousemove = null;\n        this._private__unsubscribeRootMouseEvents = null;\n        this._private__unsubscribeRootTouchEvents = null;\n        this._private__startPinchMiddlePoint = null;\n        this._private__startPinchDistance = 0;\n        this._private__pinchPrevented = false;\n        this._private__preventTouchDragProcess = false;\n        this._private__mousePressed = false;\n        this._private__lastTouchEventTimeStamp = 0;\n        // for touchstart/touchmove/touchend events we handle only first touch\n        // i.e. we don't support several active touches at the same time (except pinch event)\n        this._private__activeTouchId = null;\n        // accept all mouse leave events if it's not an iOS device\n        // see _mouseEnterHandler, _mouseMoveHandler, _mouseLeaveHandler\n        this._private__acceptMouseLeave = !isIOS();\n        /**\n         * In Firefox mouse events dont't fire if the mouse position is outside of the browser's border.\n         * To prevent the mouse from hanging while pressed we're subscribing on the mouseleave event of the document element.\n         * We're subscribing on mouseleave, but this event is actually fired on mouseup outside of the browser's border.\n         */ this._private__onFirefoxOutsideMouseUp = (mouseUpEvent)=>{\n            this._private__mouseUpHandler(mouseUpEvent);\n        };\n        /**\n         * Safari doesn't fire touchstart/mousedown events on double tap since iOS 13.\n         * There are two possible solutions:\n         * 1) Call preventDefault in touchEnd handler. But it also prevents click event from firing.\n         * 2) Add listener on dblclick event that fires with the preceding mousedown/mouseup.\n         * https://developer.apple.com/forums/thread/125073\n         */ this._private__onMobileSafariDoubleClick = (dblClickEvent)=>{\n            if (this._private__firesTouchEvents(dblClickEvent)) {\n                const compatEvent = this._private__makeCompatEvent(dblClickEvent);\n                ++this._private__tapCount;\n                if (this._private__tapTimeoutId && this._private__tapCount > 1) {\n                    const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__tapPosition);\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n                    if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */  && !this._private__cancelTap) {\n                        this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);\n                    }\n                    this._private__resetTapTimeout();\n                }\n            } else {\n                const compatEvent = this._private__makeCompatEvent(dblClickEvent);\n                ++this._private__clickCount;\n                if (this._private__clickTimeoutId && this._private__clickCount > 1) {\n                    const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__clickPosition);\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n                    if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */  && !this._private__cancelClick) {\n                        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);\n                    }\n                    this._private__resetClickTimeout();\n                }\n            }\n        };\n        this._private__target = target;\n        this._private__handler = handler;\n        this._private__options = options;\n        this._private__init();\n    }\n}\nfunction getBoundingClientRect(element) {\n    return element.getBoundingClientRect() || {\n        left: 0,\n        top: 0\n    };\n}\nfunction getDistance(p1, p2) {\n    const xDiff = p1.clientX - p2.clientX;\n    const yDiff = p1.clientY - p2.clientY;\n    return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\nfunction preventDefault(event) {\n    if (event.cancelable) {\n        event.preventDefault();\n    }\n}\nfunction getPosition(eventLike) {\n    return {\n        _internal_x: eventLike.pageX,\n        _internal_y: eventLike.pageY\n    };\n}\nfunction eventTimeStamp(e) {\n    // for some reason e.timestamp is always 0 on iPad with magic mouse, so we use performance.now() as a fallback\n    return e.timeStamp || performance.now();\n}\nfunction touchWithId(touches, id) {\n    for(let i = 0; i < touches.length; ++i){\n        if (touches[i].identifier === id) {\n            return touches[i];\n        }\n    }\n    return null;\n}\nclass PaneSeparator {\n    _internal_destroy() {\n        if (this._private__mouseEventHandler !== null) {\n            this._private__mouseEventHandler._internal_destroy();\n        }\n    }\n    _internal_getElement() {\n        return this._private__rowElement;\n    }\n    _internal_getSize() {\n        return (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: this._private__topPane._internal_getSize().width,\n            height: 1 /* SeparatorConstants.SeparatorHeight */ \n        });\n    }\n    _internal_getBitmapSize() {\n        return (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: this._private__topPane._internal_getBitmapSize().width,\n            height: 1 /* SeparatorConstants.SeparatorHeight */  * window.devicePixelRatio\n        });\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        ctx.fillStyle = this._private__chartWidget._internal_options()['layout'].panes.separatorColor;\n        ctx.fillRect(x, y, bitmapSize.width, bitmapSize.height);\n    }\n    _internal_update() {\n        this._private__updateBorderColor();\n        if (this._private__chartWidget._internal_options()['layout'].panes.enableResize !== this._private__resizeEnabled) {\n            this._private__resizeEnabled = this._private__chartWidget._internal_options()['layout'].panes.enableResize;\n            if (this._private__resizeEnabled) {\n                this._private__addResizableHandle();\n            } else {\n                if (this._private__handle !== null) {\n                    this._private__cell.removeChild(this._private__handle._internal_backgroundElement);\n                    this._private__cell.removeChild(this._private__handle._internal_element);\n                    this._private__handle = null;\n                }\n                if (this._private__mouseEventHandler !== null) {\n                    this._private__mouseEventHandler._internal_destroy();\n                    this._private__mouseEventHandler = null;\n                }\n            }\n        }\n    }\n    _private__addResizableHandle() {\n        const backgroundElement = document.createElement('div');\n        const bgStyle = backgroundElement.style;\n        bgStyle.position = 'fixed';\n        bgStyle.display = 'none';\n        bgStyle.zIndex = '49';\n        bgStyle.top = '0';\n        bgStyle.left = '0';\n        bgStyle.width = '100%';\n        bgStyle.height = '100%';\n        bgStyle.cursor = 'row-resize';\n        this._private__cell.appendChild(backgroundElement);\n        const element = document.createElement('div');\n        const style = element.style;\n        style.position = 'absolute';\n        style.zIndex = '50';\n        style.top = '-4px';\n        style.height = '9px';\n        style.width = '100%';\n        style.backgroundColor = '';\n        style.cursor = 'row-resize';\n        this._private__cell.appendChild(element);\n        const handlers = {\n            _internal_mouseEnterEvent: this._private__mouseOverEvent.bind(this),\n            _internal_mouseLeaveEvent: this._private__mouseLeaveEvent.bind(this),\n            _internal_mouseDownEvent: this._private__mouseDownEvent.bind(this),\n            _internal_touchStartEvent: this._private__mouseDownEvent.bind(this),\n            _internal_pressedMouseMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\n            _internal_touchMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\n            _internal_mouseUpEvent: this._private__mouseUpEvent.bind(this),\n            _internal_touchEndEvent: this._private__mouseUpEvent.bind(this)\n        };\n        this._private__mouseEventHandler = new MouseEventHandler(element, handlers, {\n            _internal_treatVertTouchDragAsPageScroll: ()=>false,\n            _internal_treatHorzTouchDragAsPageScroll: ()=>true\n        });\n        this._private__handle = {\n            _internal_element: element,\n            _internal_backgroundElement: backgroundElement\n        };\n    }\n    _private__updateBorderColor() {\n        this._private__cell.style.background = this._private__chartWidget._internal_options()['layout'].panes.separatorColor;\n    }\n    _private__mouseOverEvent(event) {\n        if (this._private__handle !== null) {\n            this._private__handle._internal_element.style.backgroundColor = this._private__chartWidget._internal_options()['layout'].panes.separatorHoverColor;\n        }\n    }\n    _private__mouseLeaveEvent(event) {\n        if (this._private__handle !== null && this._private__resizeInfo === null) {\n            this._private__handle._internal_element.style.backgroundColor = '';\n        }\n    }\n    _private__mouseDownEvent(event) {\n        if (this._private__handle === null) {\n            return;\n        }\n        const totalStretch = this._private__topPane._internal_state()._internal_stretchFactor() + this._private__bottomPane._internal_state()._internal_stretchFactor();\n        const totalHeight = this._private__topPane._internal_getSize().height + this._private__bottomPane._internal_getSize().height;\n        const pixelStretchFactor = totalStretch / totalHeight;\n        const minPaneStretch = 30 /* SeparatorConstants.MinPaneHeight */  * pixelStretchFactor;\n        if (totalStretch <= minPaneStretch * 2) {\n            // cannot resize panes that already have less than minimal height\n            // that's possible if there are many panes on the chart\n            return;\n        }\n        this._private__resizeInfo = {\n            _internal_startY: event.pageY,\n            _internal_prevStretchTopPane: this._private__topPane._internal_state()._internal_stretchFactor(),\n            _internal_maxPaneStretch: totalStretch - minPaneStretch,\n            _internal_totalStretch: totalStretch,\n            _internal_pixelStretchFactor: pixelStretchFactor,\n            _internal_minPaneStretch: minPaneStretch\n        };\n        this._private__handle._internal_backgroundElement.style.display = 'block';\n    }\n    _private__pressedMouseMoveEvent(event) {\n        const resizeInfo = this._private__resizeInfo;\n        if (resizeInfo === null) {\n            return;\n        }\n        const deltaY = event.pageY - resizeInfo._internal_startY;\n        const deltaStretchFactor = deltaY * resizeInfo._internal_pixelStretchFactor;\n        const upperPaneNewStretch = clamp(resizeInfo._internal_prevStretchTopPane + deltaStretchFactor, resizeInfo._internal_minPaneStretch, resizeInfo._internal_maxPaneStretch);\n        this._private__topPane._internal_state()._internal_setStretchFactor(upperPaneNewStretch);\n        this._private__bottomPane._internal_state()._internal_setStretchFactor(resizeInfo._internal_totalStretch - upperPaneNewStretch);\n        this._private__chartWidget._internal_model()._internal_fullUpdate();\n    }\n    _private__mouseUpEvent(event) {\n        if (this._private__resizeInfo === null || this._private__handle === null) {\n            return;\n        }\n        this._private__resizeInfo = null;\n        this._private__handle._internal_backgroundElement.style.display = 'none';\n    }\n    constructor(chartWidget, topPaneIndex, bottomPaneIndex){\n        this._private__handle = null;\n        this._private__mouseEventHandler = null;\n        this._private__resizeEnabled = true;\n        this._private__resizeInfo = null;\n        this._private__chartWidget = chartWidget;\n        this._private__topPane = chartWidget._internal_paneWidgets()[topPaneIndex];\n        this._private__bottomPane = chartWidget._internal_paneWidgets()[bottomPaneIndex];\n        this._private__rowElement = document.createElement('tr');\n        this._private__rowElement.style.height = 1 /* SeparatorConstants.SeparatorHeight */  + 'px';\n        this._private__cell = document.createElement('td');\n        this._private__cell.style.position = 'relative';\n        this._private__cell.style.padding = '0';\n        this._private__cell.style.margin = '0';\n        this._private__cell.setAttribute('colspan', '3');\n        this._private__updateBorderColor();\n        this._private__rowElement.appendChild(this._private__cell);\n        this._private__resizeEnabled = this._private__chartWidget._internal_options()['layout'].panes.enableResize;\n        if (!this._private__resizeEnabled) {\n            this._private__handle = null;\n            this._private__mouseEventHandler = null;\n        } else {\n            this._private__addResizableHandle();\n        }\n    }\n}\nfunction distanceBetweenPoints(pos1, pos2) {\n    return pos1._internal_position - pos2._internal_position;\n}\nfunction speedPxPerMSec(pos1, pos2, maxSpeed) {\n    const speed = (pos1._internal_position - pos2._internal_position) / (pos1._internal_time - pos2._internal_time);\n    return Math.sign(speed) * Math.min(Math.abs(speed), maxSpeed);\n}\nfunction durationMSec(speed, dumpingCoeff) {\n    const lnDumpingCoeff = Math.log(dumpingCoeff);\n    return Math.log(1 /* Constants.EpsilonDistance */  * lnDumpingCoeff / -speed) / lnDumpingCoeff;\n}\nclass KineticAnimation {\n    _internal_addPosition(position, time) {\n        if (this._private__position1 !== null) {\n            if (this._private__position1._internal_time === time) {\n                this._private__position1._internal_position = position;\n                return;\n            }\n            if (Math.abs(this._private__position1._internal_position - position) < this._private__minMove) {\n                return;\n            }\n        }\n        this._private__position4 = this._private__position3;\n        this._private__position3 = this._private__position2;\n        this._private__position2 = this._private__position1;\n        this._private__position1 = {\n            _internal_time: time,\n            _internal_position: position\n        };\n    }\n    _internal_start(position, time) {\n        if (this._private__position1 === null || this._private__position2 === null) {\n            return;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n        if (time - this._private__position1._internal_time > 50 /* Constants.MaxStartDelay */ ) {\n            return;\n        }\n        // To calculate all the rest parameters we should calculate the speed af first\n        let totalDistance = 0;\n        const speed1 = speedPxPerMSec(this._private__position1, this._private__position2, this._private__maxSpeed);\n        const distance1 = distanceBetweenPoints(this._private__position1, this._private__position2);\n        // We're calculating weighted average speed\n        // Than more distance for a segment, than more its weight\n        const speedItems = [\n            speed1\n        ];\n        const distanceItems = [\n            distance1\n        ];\n        totalDistance += distance1;\n        if (this._private__position3 !== null) {\n            const speed2 = speedPxPerMSec(this._private__position2, this._private__position3, this._private__maxSpeed);\n            // stop at this moment if direction of the segment is opposite\n            if (Math.sign(speed2) === Math.sign(speed1)) {\n                const distance2 = distanceBetweenPoints(this._private__position2, this._private__position3);\n                speedItems.push(speed2);\n                distanceItems.push(distance2);\n                totalDistance += distance2;\n                if (this._private__position4 !== null) {\n                    const speed3 = speedPxPerMSec(this._private__position3, this._private__position4, this._private__maxSpeed);\n                    if (Math.sign(speed3) === Math.sign(speed1)) {\n                        const distance3 = distanceBetweenPoints(this._private__position3, this._private__position4);\n                        speedItems.push(speed3);\n                        distanceItems.push(distance3);\n                        totalDistance += distance3;\n                    }\n                }\n            }\n        }\n        let resultSpeed = 0;\n        for(let i = 0; i < speedItems.length; ++i){\n            resultSpeed += distanceItems[i] / totalDistance * speedItems[i];\n        }\n        if (Math.abs(resultSpeed) < this._private__minSpeed) {\n            return;\n        }\n        this._private__animationStartPosition = {\n            _internal_position: position,\n            _internal_time: time\n        };\n        this._private__speedPxPerMsec = resultSpeed;\n        this._private__durationMsecs = durationMSec(Math.abs(resultSpeed), this._private__dumpingCoeff);\n    }\n    _internal_getPosition(time) {\n        const startPosition = ensureNotNull(this._private__animationStartPosition);\n        const durationMsecs = time - startPosition._internal_time;\n        return startPosition._internal_position + this._private__speedPxPerMsec * (Math.pow(this._private__dumpingCoeff, durationMsecs) - 1) / Math.log(this._private__dumpingCoeff);\n    }\n    _internal_finished(time) {\n        return this._private__animationStartPosition === null || this._private__progressDuration(time) === this._private__durationMsecs;\n    }\n    _private__progressDuration(time) {\n        const startPosition = ensureNotNull(this._private__animationStartPosition);\n        const progress = time - startPosition._internal_time;\n        return Math.min(progress, this._private__durationMsecs);\n    }\n    constructor(minSpeed, maxSpeed, dumpingCoeff, minMove){\n        this._private__position1 = null;\n        this._private__position2 = null;\n        this._private__position3 = null;\n        this._private__position4 = null;\n        this._private__animationStartPosition = null;\n        this._private__durationMsecs = 0;\n        this._private__speedPxPerMsec = 0;\n        this._private__minSpeed = minSpeed;\n        this._private__maxSpeed = maxSpeed;\n        this._private__dumpingCoeff = dumpingCoeff;\n        this._private__minMove = minMove;\n    }\n}\nconst svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"35\" height=\"19\" fill=\"none\"><g fill-rule=\"evenodd\" clip-path=\"url(#a)\" clip-rule=\"evenodd\"><path fill=\"var(--stroke)\" d=\"M2 0H0v10h6v9h21.4l.5-1.3 6-15 1-2.7H23.7l-.5 1.3-.2.6a5 5 0 0 0-7-.9V0H2Zm20 17h4l5.2-13 .8-2h-7l-1 2.5-.2.5-1.5 3.8-.3.7V17Zm-.8-10a3 3 0 0 0 .7-2.7A3 3 0 1 0 16.8 7h4.4ZM14 7V2H2v6h6v9h4V7h2Z\"/><path fill=\"var(--fill)\" d=\"M14 2H2v6h6v9h6V2Zm12 15h-7l6-15h7l-6 15Zm-7-9a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z\"/></g><defs><clipPath id=\"a\"><path fill=\"var(--stroke)\" d=\"M0 0h35v19H0z\"/></clipPath></defs></svg>';\nconst css = \"a#tv-attr-logo{--fill:#131722;--stroke:#fff;position:absolute;left:10px;bottom:10px;height:19px;width:35px;margin:0;padding:0;border:0;z-index:3;}a#tv-attr-logo[data-dark]{--fill:#D1D4DC;--stroke:#131722;}\";\n// This widget doesn't support dynamically responding to options changes\n// because it is expected that the `attributionLogo` option won't be changed\n// and this saves some bundle size.\nclass AttributionLogoWidget {\n    _internal_update() {\n        this._private__render();\n    }\n    _internal_removeElement() {\n        if (this._private__element) {\n            this._private__container.removeChild(this._private__element);\n        }\n        if (this._private__cssElement) {\n            this._private__container.removeChild(this._private__cssElement);\n        }\n        this._private__element = undefined;\n        this._private__cssElement = undefined;\n    }\n    _private__shouldUpdate() {\n        return this._private__visible !== this._private__shouldBeVisible() || this._private__theme !== this._private__themeToUse();\n    }\n    _private__themeToUse() {\n        return this._private__chart._internal_model()._internal_colorParser()._internal_colorStringToGrayscale(this._private__chart._internal_options()['layout'].textColor) > 160 ? 'dark' : 'light';\n    }\n    _private__shouldBeVisible() {\n        return this._private__chart._internal_options()['layout'].attributionLogo;\n    }\n    _private__getUTMSource() {\n        const url = new URL(location.href);\n        if (!url.hostname) {\n            // ignore local testing\n            return '';\n        }\n        return '&utm_source=' + url.hostname + url.pathname;\n    }\n    _private__render() {\n        if (!this._private__shouldUpdate()) {\n            return;\n        }\n        this._internal_removeElement();\n        this._private__visible = this._private__shouldBeVisible();\n        if (this._private__visible) {\n            this._private__theme = this._private__themeToUse();\n            this._private__cssElement = document.createElement('style');\n            this._private__cssElement.innerText = css;\n            this._private__element = document.createElement('a');\n            this._private__element.href = \"https://www.tradingview.com/?utm_medium=lwc-link&utm_campaign=lwc-chart\".concat(this._private__getUTMSource());\n            this._private__element.title = 'Charting by TradingView';\n            this._private__element.id = 'tv-attr-logo';\n            this._private__element.target = '_blank';\n            this._private__element.innerHTML = svg;\n            this._private__element.toggleAttribute('data-dark', this._private__theme === 'dark');\n            this._private__container.appendChild(this._private__cssElement);\n            this._private__container.appendChild(this._private__element);\n        }\n    }\n    constructor(container, chart){\n        this._private__element = undefined;\n        this._private__cssElement = undefined;\n        this._private__theme = undefined;\n        this._private__visible = false;\n        this._private__container = container;\n        this._private__chart = chart;\n        this._private__render();\n    }\n}\nfunction createBoundCanvas(parentElement, size) {\n    const doc = ensureNotNull(parentElement.ownerDocument);\n    const canvas = doc.createElement('canvas');\n    parentElement.appendChild(canvas);\n    const binding = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.bindCanvasElementBitmapSizeTo)(canvas, {\n        type: 'device-pixel-content-box',\n        options: {\n            allowResizeObserver: true\n        },\n        transform: (bitmapSize, canvasElementClientSize)=>({\n                width: Math.max(bitmapSize.width, canvasElementClientSize.width),\n                height: Math.max(bitmapSize.height, canvasElementClientSize.height)\n            })\n    });\n    binding.resizeCanvasElement(size);\n    return binding;\n}\nfunction releaseCanvas(canvas) {\n    var _canvas_getContext;\n    // This function fixes the iOS Safari error \"Total canvas memory use exceeds the maximum limit\".\n    // Seems that iOS Safari stores canvas elements for some additional time internally.\n    // So if we create/destroy a lot of canvas elements in a short period of time we can get this error.\n    // We resize the canvas to 1x1 pixels to force it to release memmory resources.\n    canvas.width = 1;\n    canvas.height = 1;\n    (_canvas_getContext = canvas.getContext('2d')) === null || _canvas_getContext === void 0 ? void 0 : _canvas_getContext.clearRect(0, 0, 1, 1);\n}\nfunction drawBackground(renderer, target, isHovered, hitTestData) {\n    if (renderer._internal_drawBackground) {\n        renderer._internal_drawBackground(target, isHovered, hitTestData);\n    }\n}\nfunction drawForeground(renderer, target, isHovered, hitTestData) {\n    renderer._internal_draw(target, isHovered, hitTestData);\n}\nfunction drawSourceViews(paneViewsGetter, drawRendererFn, source, pane) {\n    const views = paneViewsGetter(source, pane);\n    for (const view of views){\n        const renderer = view._internal_renderer(pane);\n        if (renderer !== null) {\n            drawRendererFn(renderer);\n        }\n    }\n}\nfunction hasPriceScale(source) {\n    return source._internal_priceScale !== undefined;\n}\nfunction buildPriceAxisViewsGetter(zOrder, priceScaleId) {\n    return (source)=>{\n        var _source__internal_priceScale, _source__internal_pricePaneViews;\n        if (!hasPriceScale(source)) {\n            return [];\n        }\n        var _source__internal_priceScale__internal_id;\n        const psId = (_source__internal_priceScale__internal_id = (_source__internal_priceScale = source._internal_priceScale()) === null || _source__internal_priceScale === void 0 ? void 0 : _source__internal_priceScale._internal_id()) !== null && _source__internal_priceScale__internal_id !== void 0 ? _source__internal_priceScale__internal_id : '';\n        if (psId !== priceScaleId) {\n            // exclude if source is using a different price scale.\n            return [];\n        }\n        var _source__internal_pricePaneViews1;\n        return (_source__internal_pricePaneViews1 = (_source__internal_pricePaneViews = source._internal_pricePaneViews) === null || _source__internal_pricePaneViews === void 0 ? void 0 : _source__internal_pricePaneViews.call(source, zOrder)) !== null && _source__internal_pricePaneViews1 !== void 0 ? _source__internal_pricePaneViews1 : [];\n    };\n}\nfunction recalculateOverlapping(views, direction, scaleHeight, rendererOptions) {\n    if (!views.length) {\n        return;\n    }\n    let currentGroupStart = 0;\n    const initLabelHeight = views[0]._internal_height(rendererOptions, true);\n    let spaceBeforeCurrentGroup = direction === 1 ? scaleHeight / 2 - (views[0]._internal_getFixedCoordinate() - initLabelHeight / 2) : views[0]._internal_getFixedCoordinate() - initLabelHeight / 2 - scaleHeight / 2;\n    spaceBeforeCurrentGroup = Math.max(0, spaceBeforeCurrentGroup);\n    for(let i = 1; i < views.length; i++){\n        const view = views[i];\n        const prev = views[i - 1];\n        const height = prev._internal_height(rendererOptions, false);\n        const coordinate = view._internal_getFixedCoordinate();\n        const prevFixedCoordinate = prev._internal_getFixedCoordinate();\n        const overlap = direction === 1 ? coordinate > prevFixedCoordinate - height : coordinate < prevFixedCoordinate + height;\n        if (overlap) {\n            const fixedCoordinate = prevFixedCoordinate - height * direction;\n            view._internal_setFixedCoordinate(fixedCoordinate);\n            const edgePoint = fixedCoordinate - direction * height / 2;\n            const outOfViewport = direction === 1 ? edgePoint < 0 : edgePoint > scaleHeight;\n            if (outOfViewport && spaceBeforeCurrentGroup > 0) {\n                // shift the whole group up or down\n                const desiredGroupShift = direction === 1 ? -1 - edgePoint : edgePoint - scaleHeight;\n                const possibleShift = Math.min(desiredGroupShift, spaceBeforeCurrentGroup);\n                for(let k = currentGroupStart; k < views.length; k++){\n                    views[k]._internal_setFixedCoordinate(views[k]._internal_getFixedCoordinate() + direction * possibleShift);\n                }\n                spaceBeforeCurrentGroup -= possibleShift;\n            }\n        } else {\n            currentGroupStart = i;\n            spaceBeforeCurrentGroup = direction === 1 ? prevFixedCoordinate - height - coordinate : coordinate - (prevFixedCoordinate + height);\n        }\n    }\n}\nfunction priceScaleCrosshairLabelVisible(crosshair) {\n    return crosshair.mode !== 2 /* CrosshairMode.Hidden */  && crosshair.horzLine.visible && crosshair.horzLine.labelVisible;\n}\nclass PriceAxisWidget {\n    _internal_destroy() {\n        this._private__mouseEventHandler._internal_destroy();\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\n        this._private__topCanvasBinding.dispose();\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__canvasBinding.canvasElement);\n        this._private__canvasBinding.dispose();\n        if (this._private__priceScale !== null) {\n            this._private__priceScale._internal_onMarksChanged()._internal_unsubscribeAll(this);\n        }\n        this._private__priceScale = null;\n    }\n    _internal_getElement() {\n        return this._private__cell;\n    }\n    _internal_fontSize() {\n        return this._private__layoutOptions.fontSize;\n    }\n    _internal_rendererOptions() {\n        const options = this._private__rendererOptionsProvider._internal_options();\n        const isFontChanged = this._private__font !== options._internal_font;\n        if (isFontChanged) {\n            this._private__widthCache._internal_reset();\n            this._private__font = options._internal_font;\n        }\n        return options;\n    }\n    _internal_optimalWidth() {\n        if (this._private__priceScale === null) {\n            return 0;\n        }\n        let tickMarkMaxWidth = 0;\n        const rendererOptions = this._internal_rendererOptions();\n        const ctx = ensureNotNull(this._private__canvasBinding.canvasElement.getContext('2d', {\n            colorSpace: this._private__pane._internal_chart()._internal_options().layout.colorSpace\n        }));\n        ctx.save();\n        const tickMarks = this._private__priceScale._internal_marks();\n        ctx.font = this._private__baseFont();\n        if (tickMarks.length > 0) {\n            tickMarkMaxWidth = Math.max(this._private__widthCache._internal_measureText(ctx, tickMarks[0]._internal_label), this._private__widthCache._internal_measureText(ctx, tickMarks[tickMarks.length - 1]._internal_label));\n        }\n        const views = this._private__backLabels();\n        for(let j = views.length; j--;){\n            const width = this._private__widthCache._internal_measureText(ctx, views[j]._internal_text());\n            if (width > tickMarkMaxWidth) {\n                tickMarkMaxWidth = width;\n            }\n        }\n        const firstValue = this._private__priceScale._internal_firstValue();\n        if (firstValue !== null && this._private__size !== null && priceScaleCrosshairLabelVisible(this._private__options.crosshair)) {\n            const topValue = this._private__priceScale._internal_coordinateToPrice(1, firstValue);\n            const bottomValue = this._private__priceScale._internal_coordinateToPrice(this._private__size.height - 2, firstValue);\n            tickMarkMaxWidth = Math.max(tickMarkMaxWidth, this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.floor(Math.min(topValue, bottomValue)) + 0.11111111111111, firstValue)), this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.ceil(Math.max(topValue, bottomValue)) - 0.11111111111111, firstValue)));\n        }\n        ctx.restore();\n        const resultTickMarksMaxWidth = tickMarkMaxWidth || 34 /* Constants.DefaultOptimalWidth */ ;\n        const res = Math.ceil(rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_paddingInner + rendererOptions._internal_paddingOuter + 5 /* Constants.LabelOffset */  + resultTickMarksMaxWidth);\n        // make it even, remove this after migration to perfect fancy canvas\n        return suggestPriceScaleWidth(res);\n    }\n    _internal_setSize(newSize) {\n        if (this._private__size === null || !(0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this._private__size, newSize)) {\n            this._private__size = newSize;\n            this._private__isSettingSize = true;\n            this._private__canvasBinding.resizeCanvasElement(newSize);\n            this._private__topCanvasBinding.resizeCanvasElement(newSize);\n            this._private__isSettingSize = false;\n            this._private__cell.style.width = \"\".concat(newSize.width, \"px\");\n            this._private__cell.style.height = \"\".concat(newSize.height, \"px\");\n        }\n    }\n    _internal_getWidth() {\n        return ensureNotNull(this._private__size).width;\n    }\n    _internal_setPriceScale(priceScale) {\n        if (this._private__priceScale === priceScale) {\n            return;\n        }\n        if (this._private__priceScale !== null) {\n            this._private__priceScale._internal_onMarksChanged()._internal_unsubscribeAll(this);\n        }\n        this._private__priceScale = priceScale;\n        priceScale._internal_onMarksChanged()._internal_subscribe(this._private__onMarksChanged.bind(this), this);\n    }\n    _internal_priceScale() {\n        return this._private__priceScale;\n    }\n    _internal_reset() {\n        const pane = this._private__pane._internal_state();\n        const model = this._private__pane._internal_chart()._internal_model();\n        model._internal_resetPriceScale(pane, ensureNotNull(this._internal_priceScale()));\n    }\n    _internal_paint(type) {\n        if (this._private__size === null) {\n            return;\n        }\n        const canvasOptions = {\n            colorSpace: this._private__pane._internal_chart()._internal_options().layout.colorSpace\n        };\n        if (type !== 1 /* InvalidationLevel.Cursor */ ) {\n            this._private__alignLabels();\n            this._private__canvasBinding.applySuggestedBitmapSize();\n            const target = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__canvasBinding, canvasOptions);\n            if (target !== null) {\n                target.useBitmapCoordinateSpace((scope)=>{\n                    this._private__drawBackground(scope);\n                    this._private__drawBorder(scope);\n                });\n                this._private__pane._internal_drawAdditionalSources(target, this._private__sourceBottomPaneViews);\n                this._private__drawTickMarks(target);\n                this._private__pane._internal_drawAdditionalSources(target, this._private__sourcePaneViews);\n                this._private__drawBackLabels(target);\n            }\n        }\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\n        const topTarget = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__topCanvasBinding, canvasOptions);\n        if (topTarget !== null) {\n            topTarget.useBitmapCoordinateSpace((param)=>{\n                let { context: ctx, bitmapSize } = param;\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\n            });\n            this._private__drawCrosshairLabel(topTarget);\n            this._private__pane._internal_drawAdditionalSources(topTarget, this._private__sourceTopPaneViews);\n        }\n    }\n    _internal_getBitmapSize() {\n        return this._private__canvasBinding.bitmapSize;\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\n        }\n    }\n    _internal_update() {\n        var // this call has side-effect - it regenerates marks on the price scale\n        _this__private__priceScale;\n        (_this__private__priceScale = this._private__priceScale) === null || _this__private__priceScale === void 0 ? void 0 : _this__private__priceScale._internal_marks();\n    }\n    _private__mouseDownEvent(e) {\n        if (this._private__priceScale === null || this._private__priceScale._internal_isEmpty() || !this._private__options['handleScale'].axisPressedMouseMove.price) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const pane = this._private__pane._internal_state();\n        this._private__mousedown = true;\n        model._internal_startScalePrice(pane, this._private__priceScale, e.localY);\n    }\n    _private__pressedMouseMoveEvent(e) {\n        if (this._private__priceScale === null || !this._private__options['handleScale'].axisPressedMouseMove.price) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const pane = this._private__pane._internal_state();\n        const priceScale = this._private__priceScale;\n        model._internal_scalePriceTo(pane, priceScale, e.localY);\n    }\n    _private__mouseDownOutsideEvent() {\n        if (this._private__priceScale === null || !this._private__options['handleScale'].axisPressedMouseMove.price) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const pane = this._private__pane._internal_state();\n        const priceScale = this._private__priceScale;\n        if (this._private__mousedown) {\n            this._private__mousedown = false;\n            model._internal_endScalePrice(pane, priceScale);\n        }\n    }\n    _private__mouseUpEvent(e) {\n        if (this._private__priceScale === null || !this._private__options['handleScale'].axisPressedMouseMove.price) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const pane = this._private__pane._internal_state();\n        this._private__mousedown = false;\n        model._internal_endScalePrice(pane, this._private__priceScale);\n    }\n    _private__mouseDoubleClickEvent(e) {\n        if (this._private__options['handleScale'].axisDoubleClickReset.price) {\n            this._internal_reset();\n        }\n    }\n    _private__mouseEnterEvent(e) {\n        if (this._private__priceScale === null) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        if (model._internal_options()['handleScale'].axisPressedMouseMove.price && !this._private__priceScale._internal_isPercentage() && !this._private__priceScale._internal_isIndexedTo100()) {\n            this._private__setCursor(1 /* CursorType.NsResize */ );\n        }\n    }\n    _private__mouseLeaveEvent(e) {\n        this._private__setCursor(0 /* CursorType.Default */ );\n    }\n    _private__backLabels() {\n        const res = [];\n        const priceScale = this._private__priceScale === null ? undefined : this._private__priceScale;\n        const addViewsForSources = (sources)=>{\n            for(let i = 0; i < sources.length; ++i){\n                const source = sources[i];\n                const views = source._internal_priceAxisViews(this._private__pane._internal_state(), priceScale);\n                for(let j = 0; j < views.length; j++){\n                    res.push(views[j]);\n                }\n            }\n        };\n        // calculate max and min coordinates for views on selection\n        // crosshair individually\n        addViewsForSources(this._private__pane._internal_state()._internal_orderedSources());\n        return res;\n    }\n    _private__drawBackground(param) {\n        let { context: ctx, bitmapSize } = param;\n        const { width, height } = bitmapSize;\n        const model = this._private__pane._internal_state()._internal_model();\n        const topColor = model._internal_backgroundTopColor();\n        const bottomColor = model._internal_backgroundBottomColor();\n        if (topColor === bottomColor) {\n            clearRect(ctx, 0, 0, width, height, topColor);\n        } else {\n            clearRectWithGradient(ctx, 0, 0, width, height, topColor, bottomColor);\n        }\n    }\n    _private__drawBorder(param) {\n        let { context: ctx, bitmapSize, horizontalPixelRatio } = param;\n        if (this._private__size === null || this._private__priceScale === null || !this._private__priceScale._internal_options().borderVisible) {\n            return;\n        }\n        ctx.fillStyle = this._private__priceScale._internal_options().borderColor;\n        const borderSize = Math.max(1, Math.floor(this._internal_rendererOptions()._internal_borderSize * horizontalPixelRatio));\n        let left;\n        if (this._private__isLeft) {\n            left = bitmapSize.width - borderSize;\n        } else {\n            left = 0;\n        }\n        ctx.fillRect(left, 0, borderSize, bitmapSize.height);\n    }\n    _private__drawTickMarks(target) {\n        if (this._private__size === null || this._private__priceScale === null) {\n            return;\n        }\n        const tickMarks = this._private__priceScale._internal_marks();\n        const priceScaleOptions = this._private__priceScale._internal_options();\n        const rendererOptions = this._internal_rendererOptions();\n        const tickMarkLeftX = this._private__isLeft ? this._private__size.width - rendererOptions._internal_tickLength : 0;\n        if (priceScaleOptions.borderVisible && priceScaleOptions.ticksVisible) {\n            target.useBitmapCoordinateSpace((param)=>{\n                let { context: ctx, horizontalPixelRatio, verticalPixelRatio } = param;\n                ctx.fillStyle = priceScaleOptions.borderColor;\n                const tickHeight = Math.max(1, Math.floor(verticalPixelRatio));\n                const tickOffset = Math.floor(verticalPixelRatio * 0.5);\n                const tickLength = Math.round(rendererOptions._internal_tickLength * horizontalPixelRatio);\n                ctx.beginPath();\n                for (const tickMark of tickMarks){\n                    ctx.rect(Math.floor(tickMarkLeftX * horizontalPixelRatio), Math.round(tickMark._internal_coord * verticalPixelRatio) - tickOffset, tickLength, tickHeight);\n                }\n                ctx.fill();\n            });\n        }\n        target.useMediaCoordinateSpace((param)=>{\n            let { context: ctx } = param;\n            ctx.font = this._private__baseFont();\n            var _priceScaleOptions_textColor;\n            ctx.fillStyle = (_priceScaleOptions_textColor = priceScaleOptions.textColor) !== null && _priceScaleOptions_textColor !== void 0 ? _priceScaleOptions_textColor : this._private__layoutOptions.textColor;\n            ctx.textAlign = this._private__isLeft ? 'right' : 'left';\n            ctx.textBaseline = 'middle';\n            const textLeftX = this._private__isLeft ? Math.round(tickMarkLeftX - rendererOptions._internal_paddingInner) : Math.round(tickMarkLeftX + rendererOptions._internal_tickLength + rendererOptions._internal_paddingInner);\n            const yMidCorrections = tickMarks.map((mark)=>this._private__widthCache._internal_yMidCorrection(ctx, mark._internal_label));\n            for(let i = tickMarks.length; i--;){\n                const tickMark = tickMarks[i];\n                ctx.fillText(tickMark._internal_label, textLeftX, tickMark._internal_coord + yMidCorrections[i]);\n            }\n        });\n    }\n    _private__alignLabels() {\n        if (this._private__size === null || this._private__priceScale === null) {\n            return;\n        }\n        let center = this._private__size.height / 2;\n        const views = [];\n        const orderedSources = this._private__priceScale._internal_orderedSources().slice(); // Copy of array\n        const pane = this._private__pane;\n        const paneState = pane._internal_state();\n        const rendererOptions = this._internal_rendererOptions();\n        // if we are default price scale, append labels from no-scale\n        const isDefault = this._private__priceScale === paneState._internal_defaultVisiblePriceScale();\n        if (isDefault) {\n            this._private__pane._internal_state()._internal_orderedSources().forEach((source)=>{\n                if (paneState._internal_isOverlay(source)) {\n                    orderedSources.push(source);\n                }\n            });\n        }\n        // we can use any, but let's use the first source as \"center\" one\n        const centerSource = this._private__priceScale._internal_dataSources()[0];\n        const priceScale = this._private__priceScale;\n        const updateForSources = (sources)=>{\n            sources.forEach((source)=>{\n                const sourceViews = source._internal_priceAxisViews(paneState, priceScale);\n                // never align selected sources\n                sourceViews.forEach((view)=>{\n                    view._internal_setFixedCoordinate(null);\n                    if (view._internal_isVisible()) {\n                        views.push(view);\n                    }\n                });\n                if (centerSource === source && sourceViews.length > 0) {\n                    center = sourceViews[0]._internal_coordinate();\n                }\n            });\n        };\n        // crosshair individually\n        updateForSources(orderedSources);\n        views.forEach((view)=>view._internal_setFixedCoordinate(view._internal_coordinate()));\n        const options = this._private__priceScale._internal_options();\n        if (!options.alignLabels) {\n            return;\n        }\n        this._private__fixLabelOverlap(views, rendererOptions, center);\n    }\n    _private__fixLabelOverlap(views, rendererOptions, center) {\n        if (this._private__size === null) {\n            return;\n        }\n        // split into two parts\n        const top = views.filter((view)=>view._internal_coordinate() <= center);\n        const bottom = views.filter((view)=>view._internal_coordinate() > center);\n        // sort top from center to top\n        top.sort((l, r)=>r._internal_coordinate() - l._internal_coordinate());\n        // share center label\n        if (top.length && bottom.length) {\n            bottom.push(top[0]);\n        }\n        bottom.sort((l, r)=>l._internal_coordinate() - r._internal_coordinate());\n        for (const view of views){\n            const halfHeight = Math.floor(view._internal_height(rendererOptions) / 2);\n            const coordinate = view._internal_coordinate();\n            if (coordinate > -halfHeight && coordinate < halfHeight) {\n                view._internal_setFixedCoordinate(halfHeight);\n            }\n            if (coordinate > this._private__size.height - halfHeight && coordinate < this._private__size.height + halfHeight) {\n                view._internal_setFixedCoordinate(this._private__size.height - halfHeight);\n            }\n        }\n        recalculateOverlapping(top, 1, this._private__size.height, rendererOptions);\n        recalculateOverlapping(bottom, -1, this._private__size.height, rendererOptions);\n    }\n    _private__drawBackLabels(target) {\n        if (this._private__size === null) {\n            return;\n        }\n        const views = this._private__backLabels();\n        const rendererOptions = this._internal_rendererOptions();\n        const align = this._private__isLeft ? 'right' : 'left';\n        views.forEach((view)=>{\n            if (view._internal_isAxisLabelVisible()) {\n                const renderer = view._internal_renderer(ensureNotNull(this._private__priceScale));\n                renderer._internal_draw(target, rendererOptions, this._private__widthCache, align);\n            }\n        });\n    }\n    _private__drawCrosshairLabel(target) {\n        if (this._private__size === null || this._private__priceScale === null) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const views = []; // array of arrays\n        const pane = this._private__pane._internal_state();\n        const v = model._internal_crosshairSource()._internal_priceAxisViews(pane, this._private__priceScale);\n        if (v.length) {\n            views.push(v);\n        }\n        const ro = this._internal_rendererOptions();\n        const align = this._private__isLeft ? 'right' : 'left';\n        views.forEach((arr)=>{\n            arr.forEach((view)=>{\n                view._internal_renderer(ensureNotNull(this._private__priceScale))._internal_draw(target, ro, this._private__widthCache, align);\n            });\n        });\n    }\n    _private__setCursor(type) {\n        this._private__cell.style.cursor = type === 1 /* CursorType.NsResize */  ? 'ns-resize' : 'default';\n    }\n    _private__onMarksChanged() {\n        const width = this._internal_optimalWidth();\n        // avoid price scale is shrunk\n        // using < instead !== to avoid infinite changes\n        if (this._private__prevOptimalWidth < width) {\n            this._private__pane._internal_chart()._internal_model()._internal_fullUpdate();\n        }\n        this._private__prevOptimalWidth = width;\n    }\n    _private__baseFont() {\n        return makeFont(this._private__layoutOptions.fontSize, this._private__layoutOptions.fontFamily);\n    }\n    constructor(pane, options, rendererOptionsProvider, side){\n        this._private__priceScale = null;\n        this._private__size = null;\n        this._private__mousedown = false;\n        this._private__widthCache = new TextWidthCache(200);\n        this._private__font = null;\n        this._private__prevOptimalWidth = 0;\n        this._private__isSettingSize = false;\n        this._private__canvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (this._private__isSettingSize) {\n                return;\n            }\n            this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();\n        };\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (this._private__isSettingSize) {\n                return;\n            }\n            this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();\n        };\n        this._private__pane = pane;\n        this._private__options = options;\n        this._private__layoutOptions = options['layout'];\n        this._private__rendererOptionsProvider = rendererOptionsProvider;\n        this._private__isLeft = side === 'left';\n        this._private__sourcePaneViews = buildPriceAxisViewsGetter('normal', side);\n        this._private__sourceTopPaneViews = buildPriceAxisViewsGetter('top', side);\n        this._private__sourceBottomPaneViews = buildPriceAxisViewsGetter('bottom', side);\n        this._private__cell = document.createElement('div');\n        this._private__cell.style.height = '100%';\n        this._private__cell.style.overflow = 'hidden';\n        this._private__cell.style.width = '25px';\n        this._private__cell.style.left = '0';\n        this._private__cell.style.position = 'relative';\n        this._private__canvasBinding = createBoundCanvas(this._private__cell, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        const canvas = this._private__canvasBinding.canvasElement;\n        canvas.style.position = 'absolute';\n        canvas.style.zIndex = '1';\n        canvas.style.left = '0';\n        canvas.style.top = '0';\n        this._private__topCanvasBinding = createBoundCanvas(this._private__cell, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\n        topCanvas.style.position = 'absolute';\n        topCanvas.style.zIndex = '2';\n        topCanvas.style.left = '0';\n        topCanvas.style.top = '0';\n        const handler = {\n            _internal_mouseDownEvent: this._private__mouseDownEvent.bind(this),\n            _internal_touchStartEvent: this._private__mouseDownEvent.bind(this),\n            _internal_pressedMouseMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\n            _internal_touchMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\n            _internal_mouseDownOutsideEvent: this._private__mouseDownOutsideEvent.bind(this),\n            _internal_mouseUpEvent: this._private__mouseUpEvent.bind(this),\n            _internal_touchEndEvent: this._private__mouseUpEvent.bind(this),\n            _internal_mouseDoubleClickEvent: this._private__mouseDoubleClickEvent.bind(this),\n            _internal_doubleTapEvent: this._private__mouseDoubleClickEvent.bind(this),\n            _internal_mouseEnterEvent: this._private__mouseEnterEvent.bind(this),\n            _internal_mouseLeaveEvent: this._private__mouseLeaveEvent.bind(this)\n        };\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, handler, {\n            _internal_treatVertTouchDragAsPageScroll: ()=>!this._private__options['handleScroll'].vertTouchDrag,\n            _internal_treatHorzTouchDragAsPageScroll: ()=>true\n        });\n    }\n}\nfunction sourceBottomPaneViews$1(source, pane) {\n    var _source__internal_bottomPaneViews;\n    var _source__internal_bottomPaneViews1;\n    return (_source__internal_bottomPaneViews1 = (_source__internal_bottomPaneViews = source._internal_bottomPaneViews) === null || _source__internal_bottomPaneViews === void 0 ? void 0 : _source__internal_bottomPaneViews.call(source, pane)) !== null && _source__internal_bottomPaneViews1 !== void 0 ? _source__internal_bottomPaneViews1 : [];\n}\nfunction sourcePaneViews$1(source, pane) {\n    var _source__internal_paneViews;\n    var _source__internal_paneViews1;\n    return (_source__internal_paneViews1 = (_source__internal_paneViews = source._internal_paneViews) === null || _source__internal_paneViews === void 0 ? void 0 : _source__internal_paneViews.call(source, pane)) !== null && _source__internal_paneViews1 !== void 0 ? _source__internal_paneViews1 : [];\n}\nfunction sourceLabelPaneViews(source, pane) {\n    var _source__internal_labelPaneViews;\n    var _source__internal_labelPaneViews1;\n    return (_source__internal_labelPaneViews1 = (_source__internal_labelPaneViews = source._internal_labelPaneViews) === null || _source__internal_labelPaneViews === void 0 ? void 0 : _source__internal_labelPaneViews.call(source, pane)) !== null && _source__internal_labelPaneViews1 !== void 0 ? _source__internal_labelPaneViews1 : [];\n}\nfunction sourceTopPaneViews$1(source, pane) {\n    var _source__internal_topPaneViews;\n    var _source__internal_topPaneViews1;\n    return (_source__internal_topPaneViews1 = (_source__internal_topPaneViews = source._internal_topPaneViews) === null || _source__internal_topPaneViews === void 0 ? void 0 : _source__internal_topPaneViews.call(source, pane)) !== null && _source__internal_topPaneViews1 !== void 0 ? _source__internal_topPaneViews1 : [];\n}\nclass PaneWidget {\n    _internal_destroy() {\n        if (this._private__leftPriceAxisWidget !== null) {\n            this._private__leftPriceAxisWidget._internal_destroy();\n        }\n        if (this._private__rightPriceAxisWidget !== null) {\n            this._private__rightPriceAxisWidget._internal_destroy();\n        }\n        this._private__attributionLogoWidget = null;\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\n        this._private__topCanvasBinding.dispose();\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__canvasBinding.canvasElement);\n        this._private__canvasBinding.dispose();\n        if (this._private__state !== null) {\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\n            this._private__state._internal_destroy();\n        }\n        this._private__mouseEventHandler._internal_destroy();\n    }\n    _internal_state() {\n        return ensureNotNull(this._private__state);\n    }\n    _internal_setState(pane) {\n        if (this._private__state !== null) {\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\n        }\n        this._private__state = pane;\n        if (this._private__state !== null) {\n            this._private__state._internal_onDestroyed()._internal_subscribe(PaneWidget.prototype._private__onStateDestroyed.bind(this), this, true);\n        }\n        this._internal_updatePriceAxisWidgetsStates();\n        if (this._private__chart._internal_paneWidgets().indexOf(this) === this._private__chart._internal_paneWidgets().length - 1) {\n            var _this__private__attributionLogoWidget;\n            this._private__attributionLogoWidget = (_this__private__attributionLogoWidget = this._private__attributionLogoWidget) !== null && _this__private__attributionLogoWidget !== void 0 ? _this__private__attributionLogoWidget : new AttributionLogoWidget(this._private__paneCell, this._private__chart);\n            this._private__attributionLogoWidget._internal_update();\n        } else {\n            var _this__private__attributionLogoWidget1;\n            (_this__private__attributionLogoWidget1 = this._private__attributionLogoWidget) === null || _this__private__attributionLogoWidget1 === void 0 ? void 0 : _this__private__attributionLogoWidget1._internal_removeElement();\n            this._private__attributionLogoWidget = null;\n        }\n    }\n    _internal_chart() {\n        return this._private__chart;\n    }\n    _internal_getElement() {\n        return this._private__rowElement;\n    }\n    _internal_updatePriceAxisWidgetsStates() {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__recreatePriceAxisWidgets();\n        if (this._private__model()._internal_serieses().length === 0) {\n            return;\n        }\n        if (this._private__leftPriceAxisWidget !== null) {\n            const leftPriceScale = this._private__state._internal_leftPriceScale();\n            this._private__leftPriceAxisWidget._internal_setPriceScale(ensureNotNull(leftPriceScale));\n        }\n        if (this._private__rightPriceAxisWidget !== null) {\n            const rightPriceScale = this._private__state._internal_rightPriceScale();\n            this._private__rightPriceAxisWidget._internal_setPriceScale(ensureNotNull(rightPriceScale));\n        }\n    }\n    _internal_updatePriceAxisWidgets() {\n        if (this._private__leftPriceAxisWidget !== null) {\n            this._private__leftPriceAxisWidget._internal_update();\n        }\n        if (this._private__rightPriceAxisWidget !== null) {\n            this._private__rightPriceAxisWidget._internal_update();\n        }\n    }\n    _internal_stretchFactor() {\n        return this._private__state !== null ? this._private__state._internal_stretchFactor() : 0;\n    }\n    _internal_setStretchFactor(stretchFactor) {\n        if (this._private__state) {\n            this._private__state._internal_setStretchFactor(stretchFactor);\n        }\n    }\n    _internal_mouseEnterEvent(event) {\n        if (!this._private__state) {\n            return;\n        }\n        this._private__onMouseEvent();\n        const x = event.localX;\n        const y = event.localY;\n        this._private__setCrosshairPosition(x, y, event);\n    }\n    _internal_mouseDownEvent(event) {\n        this._private__onMouseEvent();\n        this._private__mouseTouchDownEvent();\n        this._private__setCrosshairPosition(event.localX, event.localY, event);\n    }\n    _internal_mouseMoveEvent(event) {\n        if (!this._private__state) {\n            return;\n        }\n        this._private__onMouseEvent();\n        const x = event.localX;\n        const y = event.localY;\n        this._private__setCrosshairPosition(x, y, event);\n    }\n    _internal_mouseClickEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__onMouseEvent();\n        this._private__fireClickedDelegate(event);\n    }\n    _internal_mouseDoubleClickEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__fireMouseClickDelegate(this._private__dblClicked, event);\n    }\n    _internal_doubleTapEvent(event) {\n        this._internal_mouseDoubleClickEvent(event);\n    }\n    _internal_pressedMouseMoveEvent(event) {\n        this._private__onMouseEvent();\n        this._private__pressedMouseTouchMoveEvent(event);\n        this._private__setCrosshairPosition(event.localX, event.localY, event);\n    }\n    _internal_mouseUpEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__onMouseEvent();\n        this._private__longTap = false;\n        this._private__endScroll(event);\n    }\n    _internal_tapEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__fireClickedDelegate(event);\n    }\n    _internal_longTapEvent(event) {\n        this._private__longTap = true;\n        if (this._private__startTrackPoint === null) {\n            const point = {\n                x: event.localX,\n                y: event.localY\n            };\n            this._private__startTrackingMode(point, point, event);\n        }\n    }\n    _internal_mouseLeaveEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__onMouseEvent();\n        this._private__state._internal_model()._internal_setHoveredSource(null);\n        this._private__clearCrosshairPosition();\n    }\n    _internal_clicked() {\n        return this._private__clicked;\n    }\n    _internal_dblClicked() {\n        return this._private__dblClicked;\n    }\n    _internal_pinchStartEvent() {\n        this._private__prevPinchScale = 1;\n        this._private__model()._internal_stopTimeScaleAnimation();\n    }\n    _internal_pinchEvent(middlePoint, scale) {\n        if (!this._private__chart._internal_options()['handleScale'].pinch) {\n            return;\n        }\n        const zoomScale = (scale - this._private__prevPinchScale) * 5;\n        this._private__prevPinchScale = scale;\n        this._private__model()._internal_zoomTime(middlePoint._internal_x, zoomScale);\n    }\n    _internal_touchStartEvent(event) {\n        this._private__longTap = false;\n        this._private__exitTrackingModeOnNextTry = this._private__startTrackPoint !== null;\n        this._private__mouseTouchDownEvent();\n        const crosshair = this._private__model()._internal_crosshairSource();\n        if (this._private__startTrackPoint !== null && crosshair._internal_visible()) {\n            this._private__initCrosshairPosition = {\n                x: crosshair._internal_appliedX(),\n                y: crosshair._internal_appliedY()\n            };\n            this._private__startTrackPoint = {\n                x: event.localX,\n                y: event.localY\n            };\n        }\n    }\n    _internal_touchMoveEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        const x = event.localX;\n        const y = event.localY;\n        if (this._private__startTrackPoint !== null) {\n            // tracking mode: move crosshair\n            this._private__exitTrackingModeOnNextTry = false;\n            const origPoint = ensureNotNull(this._private__initCrosshairPosition);\n            const newX = origPoint.x + (x - this._private__startTrackPoint.x);\n            const newY = origPoint.y + (y - this._private__startTrackPoint.y);\n            this._private__setCrosshairPosition(newX, newY, event);\n            return;\n        }\n        this._private__pressedMouseTouchMoveEvent(event);\n    }\n    _internal_touchEndEvent(event) {\n        if (this._internal_chart()._internal_options().trackingMode.exitMode === 0 /* TrackingModeExitMode.OnTouchEnd */ ) {\n            this._private__exitTrackingModeOnNextTry = true;\n        }\n        this._private__tryExitTrackingMode();\n        this._private__endScroll(event);\n    }\n    _internal_hitTest(x, y) {\n        const state = this._private__state;\n        if (state === null) {\n            return null;\n        }\n        return hitTestPane(state, x, y);\n    }\n    _internal_setPriceAxisSize(width, position) {\n        const priceAxisWidget = position === 'left' ? this._private__leftPriceAxisWidget : this._private__rightPriceAxisWidget;\n        ensureNotNull(priceAxisWidget)._internal_setSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width,\n            height: this._private__size.height\n        }));\n    }\n    _internal_getSize() {\n        return this._private__size;\n    }\n    _internal_setSize(newSize) {\n        if ((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this._private__size, newSize)) {\n            return;\n        }\n        this._private__size = newSize;\n        this._private__isSettingSize = true;\n        this._private__canvasBinding.resizeCanvasElement(newSize);\n        this._private__topCanvasBinding.resizeCanvasElement(newSize);\n        this._private__isSettingSize = false;\n        this._private__paneCell.style.width = newSize.width + 'px';\n        this._private__paneCell.style.height = newSize.height + 'px';\n    }\n    _internal_recalculatePriceScales() {\n        const pane = ensureNotNull(this._private__state);\n        pane._internal_recalculatePriceScale(pane._internal_leftPriceScale());\n        pane._internal_recalculatePriceScale(pane._internal_rightPriceScale());\n        for (const source of pane._internal_dataSources()){\n            if (pane._internal_isOverlay(source)) {\n                const priceScale = source._internal_priceScale();\n                if (priceScale !== null) {\n                    pane._internal_recalculatePriceScale(priceScale);\n                }\n                // for overlay drawings price scale is owner's price scale\n                // however owner's price scale could not contain ds\n                source._internal_updateAllViews();\n            }\n        }\n        for (const primitive of pane._internal_primitives()){\n            primitive._internal_updateAllViews();\n        }\n    }\n    _internal_getBitmapSize() {\n        return this._private__canvasBinding.bitmapSize;\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\n        }\n    }\n    _internal_paint(type) {\n        if (type === 0 /* InvalidationLevel.None */ ) {\n            return;\n        }\n        if (this._private__state === null) {\n            return;\n        }\n        if (type > 1 /* InvalidationLevel.Cursor */ ) {\n            this._internal_recalculatePriceScales();\n        }\n        if (this._private__leftPriceAxisWidget !== null) {\n            this._private__leftPriceAxisWidget._internal_paint(type);\n        }\n        if (this._private__rightPriceAxisWidget !== null) {\n            this._private__rightPriceAxisWidget._internal_paint(type);\n        }\n        const canvasOptions = {\n            colorSpace: this._private__chart._internal_options().layout.colorSpace\n        };\n        if (type !== 1 /* InvalidationLevel.Cursor */ ) {\n            this._private__canvasBinding.applySuggestedBitmapSize();\n            const target = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__canvasBinding, canvasOptions);\n            if (target !== null) {\n                target.useBitmapCoordinateSpace((scope)=>{\n                    this._private__drawBackground(scope);\n                });\n                if (this._private__state) {\n                    this._private__drawSources(target, sourceBottomPaneViews$1);\n                    this._private__drawGrid(target);\n                    this._private__drawSources(target, sourcePaneViews$1);\n                    this._private__drawSources(target, sourceLabelPaneViews);\n                }\n            }\n        }\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\n        const topTarget = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__topCanvasBinding, canvasOptions);\n        if (topTarget !== null) {\n            topTarget.useBitmapCoordinateSpace((param)=>{\n                let { context: ctx, bitmapSize } = param;\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\n            });\n            this._private__drawCrosshair(topTarget);\n            this._private__drawSources(topTarget, sourceTopPaneViews$1);\n            this._private__drawSources(topTarget, sourceLabelPaneViews);\n        }\n    }\n    _internal_leftPriceAxisWidget() {\n        return this._private__leftPriceAxisWidget;\n    }\n    _internal_rightPriceAxisWidget() {\n        return this._private__rightPriceAxisWidget;\n    }\n    _internal_drawAdditionalSources(target, paneViewsGetter) {\n        this._private__drawSources(target, paneViewsGetter);\n    }\n    _private__onStateDestroyed() {\n        if (this._private__state !== null) {\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\n        }\n        this._private__state = null;\n    }\n    _private__fireClickedDelegate(event) {\n        this._private__fireMouseClickDelegate(this._private__clicked, event);\n    }\n    _private__fireMouseClickDelegate(delegate, event) {\n        const x = event.localX;\n        const y = event.localY;\n        if (delegate._internal_hasListeners()) {\n            delegate._internal_fire(this._private__model()._internal_timeScale()._internal_coordinateToIndex(x), {\n                x,\n                y\n            }, event);\n        }\n    }\n    _private__drawBackground(param) {\n        let { context: ctx, bitmapSize } = param;\n        const { width, height } = bitmapSize;\n        const model = this._private__model();\n        const topColor = model._internal_backgroundTopColor();\n        const bottomColor = model._internal_backgroundBottomColor();\n        if (topColor === bottomColor) {\n            clearRect(ctx, 0, 0, width, height, bottomColor);\n        } else {\n            clearRectWithGradient(ctx, 0, 0, width, height, topColor, bottomColor);\n        }\n    }\n    _private__drawGrid(target) {\n        const state = ensureNotNull(this._private__state);\n        const paneView = state._internal_grid()._internal_paneView();\n        const renderer = paneView._internal_renderer(state);\n        if (renderer !== null) {\n            renderer._internal_draw(target, false);\n        }\n    }\n    _private__drawCrosshair(target) {\n        this._private__drawSourceImpl(target, sourcePaneViews$1, drawForeground, this._private__model()._internal_crosshairSource());\n    }\n    _private__drawSources(target, paneViewsGetter) {\n        const state = ensureNotNull(this._private__state);\n        const sources = state._internal_orderedSources();\n        const panePrimitives = state._internal_primitives();\n        for (const panePrimitive of panePrimitives){\n            this._private__drawSourceImpl(target, paneViewsGetter, drawBackground, panePrimitive);\n        }\n        for (const source of sources){\n            this._private__drawSourceImpl(target, paneViewsGetter, drawBackground, source);\n        }\n        for (const panePrimitive of panePrimitives){\n            this._private__drawSourceImpl(target, paneViewsGetter, drawForeground, panePrimitive);\n        }\n        for (const source of sources){\n            this._private__drawSourceImpl(target, paneViewsGetter, drawForeground, source);\n        }\n    }\n    _private__drawSourceImpl(target, paneViewsGetter, drawFn, source) {\n        const state = ensureNotNull(this._private__state);\n        const hoveredSource = state._internal_model()._internal_hoveredSource();\n        const isHovered = hoveredSource !== null && hoveredSource._internal_source === source;\n        const objecId = hoveredSource !== null && isHovered && hoveredSource._internal_object !== undefined ? hoveredSource._internal_object._internal_hitTestData : undefined;\n        const drawRendererFn = (renderer)=>drawFn(renderer, target, isHovered, objecId);\n        drawSourceViews(paneViewsGetter, drawRendererFn, source, state);\n    }\n    _private__recreatePriceAxisWidgets() {\n        if (this._private__state === null) {\n            return;\n        }\n        const chart = this._private__chart;\n        const leftAxisVisible = this._private__state._internal_leftPriceScale()._internal_options().visible;\n        const rightAxisVisible = this._private__state._internal_rightPriceScale()._internal_options().visible;\n        if (!leftAxisVisible && this._private__leftPriceAxisWidget !== null) {\n            this._private__leftAxisCell.removeChild(this._private__leftPriceAxisWidget._internal_getElement());\n            this._private__leftPriceAxisWidget._internal_destroy();\n            this._private__leftPriceAxisWidget = null;\n        }\n        if (!rightAxisVisible && this._private__rightPriceAxisWidget !== null) {\n            this._private__rightAxisCell.removeChild(this._private__rightPriceAxisWidget._internal_getElement());\n            this._private__rightPriceAxisWidget._internal_destroy();\n            this._private__rightPriceAxisWidget = null;\n        }\n        const rendererOptionsProvider = chart._internal_model()._internal_rendererOptionsProvider();\n        if (leftAxisVisible && this._private__leftPriceAxisWidget === null) {\n            this._private__leftPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, 'left');\n            this._private__leftAxisCell.appendChild(this._private__leftPriceAxisWidget._internal_getElement());\n        }\n        if (rightAxisVisible && this._private__rightPriceAxisWidget === null) {\n            this._private__rightPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, 'right');\n            this._private__rightAxisCell.appendChild(this._private__rightPriceAxisWidget._internal_getElement());\n        }\n    }\n    _private__preventScroll(event) {\n        return event._internal_isTouch && this._private__longTap || this._private__startTrackPoint !== null;\n    }\n    _private__correctXCoord(x) {\n        return Math.max(0, Math.min(x, this._private__size.width - 1));\n    }\n    _private__correctYCoord(y) {\n        return Math.max(0, Math.min(y, this._private__size.height - 1));\n    }\n    _private__setCrosshairPosition(x, y, event) {\n        this._private__model()._internal_setAndSaveCurrentPosition(this._private__correctXCoord(x), this._private__correctYCoord(y), event, ensureNotNull(this._private__state));\n    }\n    _private__clearCrosshairPosition() {\n        this._private__model()._internal_clearCurrentPosition();\n    }\n    _private__tryExitTrackingMode() {\n        if (this._private__exitTrackingModeOnNextTry) {\n            this._private__startTrackPoint = null;\n            this._private__clearCrosshairPosition();\n        }\n    }\n    _private__startTrackingMode(startTrackPoint, crossHairPosition, event) {\n        this._private__startTrackPoint = startTrackPoint;\n        this._private__exitTrackingModeOnNextTry = false;\n        this._private__setCrosshairPosition(crossHairPosition.x, crossHairPosition.y, event);\n        const crosshair = this._private__model()._internal_crosshairSource();\n        this._private__initCrosshairPosition = {\n            x: crosshair._internal_appliedX(),\n            y: crosshair._internal_appliedY()\n        };\n    }\n    _private__model() {\n        return this._private__chart._internal_model();\n    }\n    _private__endScroll(event) {\n        if (!this._private__isScrolling) {\n            return;\n        }\n        const model = this._private__model();\n        const state = this._internal_state();\n        model._internal_endScrollPrice(state, state._internal_defaultPriceScale());\n        this._private__startScrollingPos = null;\n        this._private__isScrolling = false;\n        model._internal_endScrollTime();\n        if (this._private__scrollXAnimation !== null) {\n            const startAnimationTime = performance.now();\n            const timeScale = model._internal_timeScale();\n            this._private__scrollXAnimation._internal_start(timeScale._internal_rightOffset(), startAnimationTime);\n            if (!this._private__scrollXAnimation._internal_finished(startAnimationTime)) {\n                model._internal_setTimeScaleAnimation(this._private__scrollXAnimation);\n            }\n        }\n    }\n    _private__onMouseEvent() {\n        this._private__startTrackPoint = null;\n    }\n    _private__mouseTouchDownEvent() {\n        if (!this._private__state) {\n            return;\n        }\n        this._private__model()._internal_stopTimeScaleAnimation();\n        if (document.activeElement !== document.body && document.activeElement !== document.documentElement) {\n            // If any focusable element except the page itself is focused, remove the focus\n            ensureNotNull(document.activeElement).blur();\n        } else {\n            // Clear selection\n            const selection = document.getSelection();\n            if (selection !== null) {\n                selection.removeAllRanges();\n            }\n        }\n        const priceScale = this._private__state._internal_defaultPriceScale();\n        if (priceScale._internal_isEmpty() || this._private__model()._internal_timeScale()._internal_isEmpty()) {\n            return;\n        }\n    }\n    // eslint-disable-next-line complexity\n    _private__pressedMouseTouchMoveEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        const model = this._private__model();\n        const timeScale = model._internal_timeScale();\n        if (timeScale._internal_isEmpty()) {\n            return;\n        }\n        const chartOptions = this._private__chart._internal_options();\n        const scrollOptions = chartOptions['handleScroll'];\n        const kineticScrollOptions = chartOptions.kineticScroll;\n        if ((!scrollOptions.pressedMouseMove || event._internal_isTouch) && (!scrollOptions.horzTouchDrag && !scrollOptions.vertTouchDrag || !event._internal_isTouch)) {\n            return;\n        }\n        const priceScale = this._private__state._internal_defaultPriceScale();\n        const now = performance.now();\n        if (this._private__startScrollingPos === null && !this._private__preventScroll(event)) {\n            this._private__startScrollingPos = {\n                x: event.clientX,\n                y: event.clientY,\n                _internal_timestamp: now,\n                _internal_localX: event.localX,\n                _internal_localY: event.localY\n            };\n        }\n        if (this._private__startScrollingPos !== null && !this._private__isScrolling && (this._private__startScrollingPos.x !== event.clientX || this._private__startScrollingPos.y !== event.clientY)) {\n            if (event._internal_isTouch && kineticScrollOptions.touch || !event._internal_isTouch && kineticScrollOptions.mouse) {\n                const barSpacing = timeScale._internal_barSpacing();\n                this._private__scrollXAnimation = new KineticAnimation(0.2 /* KineticScrollConstants.MinScrollSpeed */  / barSpacing, 7 /* KineticScrollConstants.MaxScrollSpeed */  / barSpacing, 0.997 /* KineticScrollConstants.DumpingCoeff */ , 15 /* KineticScrollConstants.ScrollMinMove */  / barSpacing);\n                this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), this._private__startScrollingPos._internal_timestamp);\n            } else {\n                this._private__scrollXAnimation = null;\n            }\n            if (!priceScale._internal_isEmpty()) {\n                model._internal_startScrollPrice(this._private__state, priceScale, event.localY);\n            }\n            model._internal_startScrollTime(event.localX);\n            this._private__isScrolling = true;\n        }\n        if (this._private__isScrolling) {\n            // this allows scrolling not default price scales\n            if (!priceScale._internal_isEmpty()) {\n                model._internal_scrollPriceTo(this._private__state, priceScale, event.localY);\n            }\n            model._internal_scrollTimeTo(event.localX);\n            if (this._private__scrollXAnimation !== null) {\n                this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), now);\n            }\n        }\n    }\n    constructor(chart, state){\n        this._private__size = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        });\n        this._private__leftPriceAxisWidget = null;\n        this._private__rightPriceAxisWidget = null;\n        this._private__attributionLogoWidget = null;\n        this._private__startScrollingPos = null;\n        this._private__isScrolling = false;\n        this._private__clicked = new Delegate();\n        this._private__dblClicked = new Delegate();\n        this._private__prevPinchScale = 0;\n        this._private__longTap = false;\n        this._private__startTrackPoint = null;\n        this._private__exitTrackingModeOnNextTry = false;\n        this._private__initCrosshairPosition = null;\n        this._private__scrollXAnimation = null;\n        this._private__isSettingSize = false;\n        this._private__canvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (this._private__isSettingSize || this._private__state === null) {\n                return;\n            }\n            this._private__model()._internal_lightUpdate();\n        };\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (this._private__isSettingSize || this._private__state === null) {\n                return;\n            }\n            this._private__model()._internal_lightUpdate();\n        };\n        this._private__chart = chart;\n        this._private__state = state;\n        this._private__state._internal_onDestroyed()._internal_subscribe(this._private__onStateDestroyed.bind(this), this, true);\n        this._private__paneCell = document.createElement('td');\n        this._private__paneCell.style.padding = '0';\n        this._private__paneCell.style.position = 'relative';\n        const paneWrapper = document.createElement('div');\n        paneWrapper.style.width = '100%';\n        paneWrapper.style.height = '100%';\n        paneWrapper.style.position = 'relative';\n        paneWrapper.style.overflow = 'hidden';\n        this._private__leftAxisCell = document.createElement('td');\n        this._private__leftAxisCell.style.padding = '0';\n        this._private__rightAxisCell = document.createElement('td');\n        this._private__rightAxisCell.style.padding = '0';\n        this._private__paneCell.appendChild(paneWrapper);\n        this._private__canvasBinding = createBoundCanvas(paneWrapper, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        const canvas = this._private__canvasBinding.canvasElement;\n        canvas.style.position = 'absolute';\n        canvas.style.zIndex = '1';\n        canvas.style.left = '0';\n        canvas.style.top = '0';\n        this._private__topCanvasBinding = createBoundCanvas(paneWrapper, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\n        topCanvas.style.position = 'absolute';\n        topCanvas.style.zIndex = '2';\n        topCanvas.style.left = '0';\n        topCanvas.style.top = '0';\n        this._private__rowElement = document.createElement('tr');\n        this._private__rowElement.appendChild(this._private__leftAxisCell);\n        this._private__rowElement.appendChild(this._private__paneCell);\n        this._private__rowElement.appendChild(this._private__rightAxisCell);\n        this._internal_updatePriceAxisWidgetsStates();\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, this, {\n            _internal_treatVertTouchDragAsPageScroll: ()=>this._private__startTrackPoint === null && !this._private__chart._internal_options()['handleScroll'].vertTouchDrag,\n            _internal_treatHorzTouchDragAsPageScroll: ()=>this._private__startTrackPoint === null && !this._private__chart._internal_options()['handleScroll'].horzTouchDrag\n        });\n    }\n}\nclass PriceAxisStub {\n    _internal_destroy() {\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__canvasBinding.canvasElement);\n        this._private__canvasBinding.dispose();\n    }\n    _internal_getElement() {\n        return this._private__cell;\n    }\n    _internal_getSize() {\n        return this._private__size;\n    }\n    _internal_setSize(newSize) {\n        if (!(0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this._private__size, newSize)) {\n            this._private__size = newSize;\n            this._private__canvasBinding.resizeCanvasElement(newSize);\n            this._private__cell.style.width = \"\".concat(newSize.width, \"px\");\n            this._private__cell.style.height = \"\".concat(newSize.height, \"px\");\n            this._private__invalidated = true;\n        }\n    }\n    _internal_paint(type) {\n        if (type < 3 /* InvalidationLevel.Full */  && !this._private__invalidated) {\n            return;\n        }\n        if (this._private__size.width === 0 || this._private__size.height === 0) {\n            return;\n        }\n        this._private__invalidated = false;\n        this._private__canvasBinding.applySuggestedBitmapSize();\n        const target = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__canvasBinding, {\n            colorSpace: this._private__options.layout.colorSpace\n        });\n        if (target !== null) {\n            target.useBitmapCoordinateSpace((scope)=>{\n                this._private__drawBackground(scope);\n                this._private__drawBorder(scope);\n            });\n        }\n    }\n    _internal_getBitmapSize() {\n        return this._private__canvasBinding.bitmapSize;\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\n        }\n    }\n    _private__drawBorder(param) {\n        let { context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio } = param;\n        if (!this._private__borderVisible()) {\n            return;\n        }\n        ctx.fillStyle = this._private__options.timeScale.borderColor;\n        const horzBorderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * horizontalPixelRatio);\n        const vertBorderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * verticalPixelRatio);\n        const left = this._private__isLeft ? bitmapSize.width - horzBorderSize : 0;\n        ctx.fillRect(left, 0, horzBorderSize, vertBorderSize);\n    }\n    _private__drawBackground(param) {\n        let { context: ctx, bitmapSize } = param;\n        clearRect(ctx, 0, 0, bitmapSize.width, bitmapSize.height, this._private__bottomColor());\n    }\n    constructor(side, options, params, borderVisible, bottomColor){\n        this._private__invalidated = true;\n        this._private__size = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        });\n        this._private__canvasSuggestedBitmapSizeChangedHandler = ()=>this._internal_paint(3 /* InvalidationLevel.Full */ );\n        this._private__isLeft = side === 'left';\n        this._private__rendererOptionsProvider = params._internal_rendererOptionsProvider;\n        this._private__options = options;\n        this._private__borderVisible = borderVisible;\n        this._private__bottomColor = bottomColor;\n        this._private__cell = document.createElement('div');\n        this._private__cell.style.width = '25px';\n        this._private__cell.style.height = '100%';\n        this._private__cell.style.overflow = 'hidden';\n        this._private__canvasBinding = createBoundCanvas(this._private__cell, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n    }\n}\nfunction buildTimeAxisViewsGetter(zOrder) {\n    return (source)=>{\n        var _source__internal_timePaneViews;\n        var _source__internal_timePaneViews1;\n        return (_source__internal_timePaneViews1 = (_source__internal_timePaneViews = source._internal_timePaneViews) === null || _source__internal_timePaneViews === void 0 ? void 0 : _source__internal_timePaneViews.call(source, zOrder)) !== null && _source__internal_timePaneViews1 !== void 0 ? _source__internal_timePaneViews1 : [];\n    };\n}\nconst sourcePaneViews = buildTimeAxisViewsGetter('normal');\nconst sourceTopPaneViews = buildTimeAxisViewsGetter('top');\nconst sourceBottomPaneViews = buildTimeAxisViewsGetter('bottom');\nclass TimeAxisWidget {\n    _internal_destroy() {\n        this._private__mouseEventHandler._internal_destroy();\n        if (this._private__leftStub !== null) {\n            this._private__leftStub._internal_destroy();\n        }\n        if (this._private__rightStub !== null) {\n            this._private__rightStub._internal_destroy();\n        }\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\n        this._private__topCanvasBinding.dispose();\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__canvasBinding.canvasElement);\n        this._private__canvasBinding.dispose();\n    }\n    _internal_getElement() {\n        return this._private__element;\n    }\n    _internal_leftStub() {\n        return this._private__leftStub;\n    }\n    _internal_rightStub() {\n        return this._private__rightStub;\n    }\n    _internal_mouseDownEvent(event) {\n        if (this._private__mouseDown) {\n            return;\n        }\n        this._private__mouseDown = true;\n        const model = this._private__chart._internal_model();\n        if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options()['handleScale'].axisPressedMouseMove.time) {\n            return;\n        }\n        model._internal_startScaleTime(event.localX);\n    }\n    _internal_touchStartEvent(event) {\n        this._internal_mouseDownEvent(event);\n    }\n    _internal_mouseDownOutsideEvent() {\n        const model = this._private__chart._internal_model();\n        if (!model._internal_timeScale()._internal_isEmpty() && this._private__mouseDown) {\n            this._private__mouseDown = false;\n            if (this._private__chart._internal_options()['handleScale'].axisPressedMouseMove.time) {\n                model._internal_endScaleTime();\n            }\n        }\n    }\n    _internal_pressedMouseMoveEvent(event) {\n        const model = this._private__chart._internal_model();\n        if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options()['handleScale'].axisPressedMouseMove.time) {\n            return;\n        }\n        model._internal_scaleTimeTo(event.localX);\n    }\n    _internal_touchMoveEvent(event) {\n        this._internal_pressedMouseMoveEvent(event);\n    }\n    _internal_mouseUpEvent() {\n        this._private__mouseDown = false;\n        const model = this._private__chart._internal_model();\n        if (model._internal_timeScale()._internal_isEmpty() && !this._private__chart._internal_options()['handleScale'].axisPressedMouseMove.time) {\n            return;\n        }\n        model._internal_endScaleTime();\n    }\n    _internal_touchEndEvent() {\n        this._internal_mouseUpEvent();\n    }\n    _internal_mouseDoubleClickEvent() {\n        if (this._private__chart._internal_options()['handleScale'].axisDoubleClickReset.time) {\n            this._private__chart._internal_model()._internal_resetTimeScale();\n        }\n    }\n    _internal_doubleTapEvent() {\n        this._internal_mouseDoubleClickEvent();\n    }\n    _internal_mouseEnterEvent() {\n        if (this._private__chart._internal_model()._internal_options()['handleScale'].axisPressedMouseMove.time) {\n            this._private__setCursor(1 /* CursorType.EwResize */ );\n        }\n    }\n    _internal_mouseLeaveEvent() {\n        this._private__setCursor(0 /* CursorType.Default */ );\n    }\n    _internal_getSize() {\n        return this._private__size;\n    }\n    _internal_sizeChanged() {\n        return this._private__sizeChanged;\n    }\n    _internal_setSizes(timeAxisSize, leftStubWidth, rightStubWidth) {\n        if (!(0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this._private__size, timeAxisSize)) {\n            this._private__size = timeAxisSize;\n            this._private__isSettingSize = true;\n            this._private__canvasBinding.resizeCanvasElement(timeAxisSize);\n            this._private__topCanvasBinding.resizeCanvasElement(timeAxisSize);\n            this._private__isSettingSize = false;\n            this._private__cell.style.width = \"\".concat(timeAxisSize.width, \"px\");\n            this._private__cell.style.height = \"\".concat(timeAxisSize.height, \"px\");\n            this._private__sizeChanged._internal_fire(timeAxisSize);\n        }\n        if (this._private__leftStub !== null) {\n            this._private__leftStub._internal_setSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: leftStubWidth,\n                height: timeAxisSize.height\n            }));\n        }\n        if (this._private__rightStub !== null) {\n            this._private__rightStub._internal_setSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: rightStubWidth,\n                height: timeAxisSize.height\n            }));\n        }\n    }\n    _internal_optimalHeight() {\n        const rendererOptions = this._private__getRendererOptions();\n        return Math.ceil(// rendererOptions.offsetSize +\n        rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_fontSize + rendererOptions._internal_paddingTop + rendererOptions._internal_paddingBottom + rendererOptions._internal_labelBottomOffset);\n    }\n    _internal_update() {\n        // this call has side-effect - it regenerates marks on the time scale\n        this._private__chart._internal_model()._internal_timeScale()._internal_marks();\n    }\n    _internal_getBitmapSize() {\n        return this._private__canvasBinding.bitmapSize;\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\n        }\n    }\n    _internal_paint(type) {\n        if (type === 0 /* InvalidationLevel.None */ ) {\n            return;\n        }\n        const canvasOptions = {\n            colorSpace: this._private__options.colorSpace\n        };\n        if (type !== 1 /* InvalidationLevel.Cursor */ ) {\n            this._private__canvasBinding.applySuggestedBitmapSize();\n            const target = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__canvasBinding, canvasOptions);\n            if (target !== null) {\n                target.useBitmapCoordinateSpace((scope)=>{\n                    this._private__drawBackground(scope);\n                    this._private__drawBorder(scope);\n                    this._private__drawAdditionalSources(target, sourceBottomPaneViews);\n                });\n                this._private__drawTickMarks(target);\n                this._private__drawAdditionalSources(target, sourcePaneViews);\n            // atm we don't have sources to be drawn on time axis except crosshair which is rendered on top level canvas\n            // so let's don't call this code at all for now\n            // this._drawLabels(this._chart.model().dataSources(), target);\n            }\n            if (this._private__leftStub !== null) {\n                this._private__leftStub._internal_paint(type);\n            }\n            if (this._private__rightStub !== null) {\n                this._private__rightStub._internal_paint(type);\n            }\n        }\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\n        const topTarget = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__topCanvasBinding, canvasOptions);\n        if (topTarget !== null) {\n            topTarget.useBitmapCoordinateSpace((param)=>{\n                let { context: ctx, bitmapSize } = param;\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\n            });\n            this._private__drawLabels([\n                ...this._private__chart._internal_model()._internal_serieses(),\n                this._private__chart._internal_model()._internal_crosshairSource()\n            ], topTarget);\n            this._private__drawAdditionalSources(topTarget, sourceTopPaneViews);\n        }\n    }\n    _private__drawAdditionalSources(target, axisViewsGetter) {\n        const sources = this._private__chart._internal_model()._internal_serieses();\n        for (const source of sources){\n            drawSourceViews(axisViewsGetter, (renderer)=>drawBackground(renderer, target, false, undefined), source, undefined);\n        }\n        for (const source of sources){\n            drawSourceViews(axisViewsGetter, (renderer)=>drawForeground(renderer, target, false, undefined), source, undefined);\n        }\n    }\n    _private__drawBackground(param) {\n        let { context: ctx, bitmapSize } = param;\n        clearRect(ctx, 0, 0, bitmapSize.width, bitmapSize.height, this._private__chart._internal_model()._internal_backgroundBottomColor());\n    }\n    _private__drawBorder(param) {\n        let { context: ctx, bitmapSize, verticalPixelRatio } = param;\n        if (this._private__chart._internal_options().timeScale.borderVisible) {\n            ctx.fillStyle = this._private__lineColor();\n            const borderSize = Math.max(1, Math.floor(this._private__getRendererOptions()._internal_borderSize * verticalPixelRatio));\n            ctx.fillRect(0, 0, bitmapSize.width, borderSize);\n        }\n    }\n    _private__drawTickMarks(target) {\n        const timeScale = this._private__chart._internal_model()._internal_timeScale();\n        const tickMarks = timeScale._internal_marks();\n        if (!tickMarks || tickMarks.length === 0) {\n            return;\n        }\n        const maxWeight = this._private__horzScaleBehavior.maxTickMarkWeight(tickMarks);\n        const rendererOptions = this._private__getRendererOptions();\n        const options = timeScale._internal_options();\n        if (options.borderVisible && options.ticksVisible) {\n            target.useBitmapCoordinateSpace((param)=>{\n                let { context: ctx, horizontalPixelRatio, verticalPixelRatio } = param;\n                ctx.strokeStyle = this._private__lineColor();\n                ctx.fillStyle = this._private__lineColor();\n                const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n                const tickOffset = Math.floor(horizontalPixelRatio * 0.5);\n                ctx.beginPath();\n                const tickLen = Math.round(rendererOptions._internal_tickLength * verticalPixelRatio);\n                for(let index = tickMarks.length; index--;){\n                    const x = Math.round(tickMarks[index].coord * horizontalPixelRatio);\n                    ctx.rect(x - tickOffset, 0, tickWidth, tickLen);\n                }\n                ctx.fill();\n            });\n        }\n        target.useMediaCoordinateSpace((param)=>{\n            let { context: ctx } = param;\n            const yText = rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_paddingTop + rendererOptions._internal_fontSize / 2;\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = this._private__textColor();\n            // draw base marks\n            ctx.font = this._private__baseFont();\n            for (const tickMark of tickMarks){\n                if (tickMark.weight < maxWeight) {\n                    const coordinate = tickMark.needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark.coord, tickMark.label) : tickMark.coord;\n                    ctx.fillText(tickMark.label, coordinate, yText);\n                }\n            }\n            if (this._private__chart._internal_options().timeScale.allowBoldLabels) {\n                ctx.font = this._private__baseBoldFont();\n            }\n            for (const tickMark of tickMarks){\n                if (tickMark.weight >= maxWeight) {\n                    const coordinate = tickMark.needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark.coord, tickMark.label) : tickMark.coord;\n                    ctx.fillText(tickMark.label, coordinate, yText);\n                }\n            }\n        });\n    }\n    _private__alignTickMarkLabelCoordinate(ctx, coordinate, labelText) {\n        const labelWidth = this._private__widthCache._internal_measureText(ctx, labelText);\n        const labelWidthHalf = labelWidth / 2;\n        const leftTextCoordinate = Math.floor(coordinate - labelWidthHalf) + 0.5;\n        if (leftTextCoordinate < 0) {\n            coordinate = coordinate + Math.abs(0 - leftTextCoordinate);\n        } else if (leftTextCoordinate + labelWidth > this._private__size.width) {\n            coordinate = coordinate - Math.abs(this._private__size.width - (leftTextCoordinate + labelWidth));\n        }\n        return coordinate;\n    }\n    _private__drawLabels(sources, target) {\n        const rendererOptions = this._private__getRendererOptions();\n        for (const source of sources){\n            for (const view of source._internal_timeAxisViews()){\n                view._internal_renderer()._internal_draw(target, rendererOptions);\n            }\n        }\n    }\n    _private__lineColor() {\n        return this._private__chart._internal_options().timeScale.borderColor;\n    }\n    _private__textColor() {\n        return this._private__options.textColor;\n    }\n    _private__fontSize() {\n        return this._private__options.fontSize;\n    }\n    _private__baseFont() {\n        return makeFont(this._private__fontSize(), this._private__options.fontFamily);\n    }\n    _private__baseBoldFont() {\n        return makeFont(this._private__fontSize(), this._private__options.fontFamily, 'bold');\n    }\n    _private__getRendererOptions() {\n        if (this._private__rendererOptions === null) {\n            this._private__rendererOptions = {\n                _internal_borderSize: 1 /* Constants.BorderSize */ ,\n                _internal_baselineOffset: NaN,\n                _internal_paddingTop: NaN,\n                _internal_paddingBottom: NaN,\n                _internal_paddingHorizontal: NaN,\n                _internal_tickLength: 5 /* Constants.TickLength */ ,\n                _internal_fontSize: NaN,\n                _internal_font: '',\n                _internal_widthCache: new TextWidthCache(),\n                _internal_labelBottomOffset: 0\n            };\n        }\n        const rendererOptions = this._private__rendererOptions;\n        const newFont = this._private__baseFont();\n        if (rendererOptions._internal_font !== newFont) {\n            const fontSize = this._private__fontSize();\n            rendererOptions._internal_fontSize = fontSize;\n            rendererOptions._internal_font = newFont;\n            rendererOptions._internal_paddingTop = 3 * fontSize / 12;\n            rendererOptions._internal_paddingBottom = 3 * fontSize / 12;\n            rendererOptions._internal_paddingHorizontal = 9 * fontSize / 12;\n            rendererOptions._internal_baselineOffset = 0;\n            rendererOptions._internal_labelBottomOffset = 4 * fontSize / 12;\n            rendererOptions._internal_widthCache._internal_reset();\n        }\n        return this._private__rendererOptions;\n    }\n    _private__setCursor(type) {\n        this._private__cell.style.cursor = type === 1 /* CursorType.EwResize */  ? 'ew-resize' : 'default';\n    }\n    _private__recreateStubs() {\n        const model = this._private__chart._internal_model();\n        const options = model._internal_options();\n        if (!options.leftPriceScale.visible && this._private__leftStub !== null) {\n            this._private__leftStubCell.removeChild(this._private__leftStub._internal_getElement());\n            this._private__leftStub._internal_destroy();\n            this._private__leftStub = null;\n        }\n        if (!options.rightPriceScale.visible && this._private__rightStub !== null) {\n            this._private__rightStubCell.removeChild(this._private__rightStub._internal_getElement());\n            this._private__rightStub._internal_destroy();\n            this._private__rightStub = null;\n        }\n        const rendererOptionsProvider = this._private__chart._internal_model()._internal_rendererOptionsProvider();\n        const params = {\n            _internal_rendererOptionsProvider: rendererOptionsProvider\n        };\n        const borderVisibleGetter = ()=>{\n            return options.leftPriceScale.borderVisible && model._internal_timeScale()._internal_options().borderVisible;\n        };\n        const bottomColorGetter = ()=>model._internal_backgroundBottomColor();\n        if (options.leftPriceScale.visible && this._private__leftStub === null) {\n            this._private__leftStub = new PriceAxisStub('left', options, params, borderVisibleGetter, bottomColorGetter);\n            this._private__leftStubCell.appendChild(this._private__leftStub._internal_getElement());\n        }\n        if (options.rightPriceScale.visible && this._private__rightStub === null) {\n            this._private__rightStub = new PriceAxisStub('right', options, params, borderVisibleGetter, bottomColorGetter);\n            this._private__rightStubCell.appendChild(this._private__rightStub._internal_getElement());\n        }\n    }\n    constructor(chartWidget, horzScaleBehavior){\n        this._private__leftStub = null;\n        this._private__rightStub = null;\n        this._private__rendererOptions = null;\n        this._private__mouseDown = false;\n        this._private__size = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        });\n        this._private__sizeChanged = new Delegate();\n        this._private__widthCache = new TextWidthCache(5);\n        this._private__isSettingSize = false;\n        this._private__canvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (!this._private__isSettingSize) {\n                this._private__chart._internal_model()._internal_lightUpdate();\n            }\n        };\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (!this._private__isSettingSize) {\n                this._private__chart._internal_model()._internal_lightUpdate();\n            }\n        };\n        this._private__chart = chartWidget;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__options = chartWidget._internal_options()['layout'];\n        this._private__element = document.createElement('tr');\n        this._private__leftStubCell = document.createElement('td');\n        this._private__leftStubCell.style.padding = '0';\n        this._private__rightStubCell = document.createElement('td');\n        this._private__rightStubCell.style.padding = '0';\n        this._private__cell = document.createElement('td');\n        this._private__cell.style.height = '25px';\n        this._private__cell.style.padding = '0';\n        this._private__dv = document.createElement('div');\n        this._private__dv.style.width = '100%';\n        this._private__dv.style.height = '100%';\n        this._private__dv.style.position = 'relative';\n        this._private__dv.style.overflow = 'hidden';\n        this._private__cell.appendChild(this._private__dv);\n        this._private__canvasBinding = createBoundCanvas(this._private__dv, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        const canvas = this._private__canvasBinding.canvasElement;\n        canvas.style.position = 'absolute';\n        canvas.style.zIndex = '1';\n        canvas.style.left = '0';\n        canvas.style.top = '0';\n        this._private__topCanvasBinding = createBoundCanvas(this._private__dv, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\n        topCanvas.style.position = 'absolute';\n        topCanvas.style.zIndex = '2';\n        topCanvas.style.left = '0';\n        topCanvas.style.top = '0';\n        this._private__element.appendChild(this._private__leftStubCell);\n        this._private__element.appendChild(this._private__cell);\n        this._private__element.appendChild(this._private__rightStubCell);\n        this._private__recreateStubs();\n        this._private__chart._internal_model()._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__recreateStubs.bind(this), this);\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, this, {\n            _internal_treatVertTouchDragAsPageScroll: ()=>true,\n            _internal_treatHorzTouchDragAsPageScroll: ()=>!this._private__chart._internal_options()['handleScroll'].horzTouchDrag\n        });\n    }\n}\nconst windowsChrome = isChromiumBased() && isWindows();\nclass ChartWidget {\n    _internal_model() {\n        return this._private__model;\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_paneWidgets() {\n        return this._private__paneWidgets;\n    }\n    _internal_timeAxisWidget() {\n        return this._private__timeAxisWidget;\n    }\n    _internal_destroy() {\n        this._private__setMouseWheelEventListener(false);\n        if (this._private__drawRafId !== 0) {\n            window.cancelAnimationFrame(this._private__drawRafId);\n        }\n        this._private__model._internal_crosshairMoved()._internal_unsubscribeAll(this);\n        this._private__model._internal_timeScale()._internal_optionsApplied()._internal_unsubscribeAll(this);\n        this._private__model._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);\n        this._private__model._internal_destroy();\n        for (const paneWidget of this._private__paneWidgets){\n            this._private__tableElement.removeChild(paneWidget._internal_getElement());\n            paneWidget._internal_clicked()._internal_unsubscribeAll(this);\n            paneWidget._internal_dblClicked()._internal_unsubscribeAll(this);\n            paneWidget._internal_destroy();\n        }\n        this._private__paneWidgets = [];\n        for (const paneSeparator of this._private__paneSeparators){\n            this._private__destroySeparator(paneSeparator);\n        }\n        this._private__paneSeparators = [];\n        ensureNotNull(this._private__timeAxisWidget)._internal_destroy();\n        if (this._private__element.parentElement !== null) {\n            this._private__element.parentElement.removeChild(this._private__element);\n        }\n        this._private__crosshairMoved._internal_destroy();\n        this._private__clicked._internal_destroy();\n        this._private__dblClicked._internal_destroy();\n        this._private__uninstallObserver();\n    }\n    _internal_resize(width, height) {\n        let forceRepaint = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        if (this._private__height === height && this._private__width === width) {\n            return;\n        }\n        const sizeHint = suggestChartSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width,\n            height\n        }));\n        this._private__height = sizeHint.height;\n        this._private__width = sizeHint.width;\n        const heightStr = this._private__height + 'px';\n        const widthStr = this._private__width + 'px';\n        ensureNotNull(this._private__element).style.height = heightStr;\n        ensureNotNull(this._private__element).style.width = widthStr;\n        this._private__tableElement.style.height = heightStr;\n        this._private__tableElement.style.width = widthStr;\n        if (forceRepaint) {\n            this._private__drawImpl(InvalidateMask._internal_full(), performance.now());\n        } else {\n            this._private__model._internal_fullUpdate();\n        }\n    }\n    _internal_paint(invalidateMask) {\n        if (invalidateMask === undefined) {\n            invalidateMask = InvalidateMask._internal_full();\n        }\n        for(let i = 0; i < this._private__paneWidgets.length; i++){\n            this._private__paneWidgets[i]._internal_paint(invalidateMask._internal_invalidateForPane(i)._internal_level);\n        }\n        if (this._private__options.timeScale.visible) {\n            this._private__timeAxisWidget._internal_paint(invalidateMask._internal_fullInvalidation());\n        }\n    }\n    _internal_applyOptions(options) {\n        var _options_layout;\n        const currentlyHasMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);\n        // we don't need to merge options here because it's done in chart model\n        // and since both model and widget share the same object it will be done automatically for widget as well\n        // not ideal solution for sure, but it work's for now ¯\\_(ツ)_/¯\n        this._private__model._internal_applyOptions(options);\n        const shouldHaveMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);\n        if (shouldHaveMouseWheelListener !== currentlyHasMouseWheelListener) {\n            this._private__setMouseWheelEventListener(shouldHaveMouseWheelListener);\n        }\n        if ((_options_layout = options['layout']) === null || _options_layout === void 0 ? void 0 : _options_layout.panes) {\n            this._private__applyPanesOptions();\n        }\n        this._private__updateTimeAxisVisibility();\n        this._private__applyAutoSizeOptions(options);\n    }\n    _internal_clicked() {\n        return this._private__clicked;\n    }\n    _internal_dblClicked() {\n        return this._private__dblClicked;\n    }\n    _internal_crosshairMoved() {\n        return this._private__crosshairMoved;\n    }\n    _internal_takeScreenshot() {\n        if (this._private__invalidateMask !== null) {\n            this._private__drawImpl(this._private__invalidateMask, performance.now());\n            this._private__invalidateMask = null;\n        }\n        const screeshotBitmapSize = this._private__traverseLayout(null);\n        const screenshotCanvas = document.createElement('canvas');\n        screenshotCanvas.width = screeshotBitmapSize.width;\n        screenshotCanvas.height = screeshotBitmapSize.height;\n        const ctx = ensureNotNull(screenshotCanvas.getContext('2d'));\n        this._private__traverseLayout(ctx);\n        return screenshotCanvas;\n    }\n    _internal_getPriceAxisWidth(position) {\n        if (position === \"left\" /* DefaultPriceScaleId.Left */  && !this._private__isLeftAxisVisible()) {\n            return 0;\n        }\n        if (position === \"right\" /* DefaultPriceScaleId.Right */  && !this._private__isRightAxisVisible()) {\n            return 0;\n        }\n        if (this._private__paneWidgets.length === 0) {\n            return 0;\n        }\n        // we don't need to worry about exactly pane widget here\n        // because all pane widgets have the same width of price axis widget\n        // see _adjustSizeImpl\n        const priceAxisWidget = position === \"left\" /* DefaultPriceScaleId.Left */  ? this._private__paneWidgets[0]._internal_leftPriceAxisWidget() : this._private__paneWidgets[0]._internal_rightPriceAxisWidget();\n        return ensureNotNull(priceAxisWidget)._internal_getWidth();\n    }\n    _internal_autoSizeActive() {\n        return this._private__options.autoSize && this._private__observer !== null;\n    }\n    _internal_element() {\n        return this._private__element;\n    }\n    _internal_setCursorStyle(style) {\n        this._private__cursorStyleOverride = style;\n        if (this._private__cursorStyleOverride) {\n            this._internal_element().style.setProperty('cursor', style);\n        } else {\n            this._internal_element().style.removeProperty('cursor');\n        }\n    }\n    _internal_getCursorOverrideStyle() {\n        return this._private__cursorStyleOverride;\n    }\n    _internal_paneSize(paneIndex) {\n        return ensureDefined(this._private__paneWidgets[paneIndex])._internal_getSize();\n    }\n    _private__applyPanesOptions() {\n        this._private__paneSeparators.forEach((separator)=>{\n            separator._internal_update();\n        });\n    }\n    // eslint-disable-next-line complexity\n    _private__applyAutoSizeOptions(options) {\n        if (options.autoSize === undefined && this._private__observer && (options.width !== undefined || options.height !== undefined)) {\n            warn(\"You should turn autoSize off explicitly before specifying sizes; try adding options.autoSize: false to new options\");\n            return;\n        }\n        if (options.autoSize && !this._private__observer) {\n            // installing observer will override resize if successful\n            this._private__installObserver();\n        }\n        if (options.autoSize === false && this._private__observer !== null) {\n            this._private__uninstallObserver();\n        }\n        if (!options.autoSize && (options.width !== undefined || options.height !== undefined)) {\n            this._internal_resize(options.width || this._private__width, options.height || this._private__height);\n        }\n    }\n    /**\n     * Traverses the widget's layout (pane and axis child widgets),\n     * draws the screenshot (if rendering context is passed) and returns the screenshot bitmap size\n     *\n     * @param ctx - if passed, used to draw the screenshot of widget\n     * @returns screenshot bitmap size\n     */ _private__traverseLayout(ctx) {\n        let totalWidth = 0;\n        let totalHeight = 0;\n        const firstPane = this._private__paneWidgets[0];\n        const drawPriceAxises = (position, targetX)=>{\n            let targetY = 0;\n            for(let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++){\n                const paneWidget = this._private__paneWidgets[paneIndex];\n                const priceAxisWidget = ensureNotNull(position === 'left' ? paneWidget._internal_leftPriceAxisWidget() : paneWidget._internal_rightPriceAxisWidget());\n                const bitmapSize = priceAxisWidget._internal_getBitmapSize();\n                if (ctx !== null) {\n                    priceAxisWidget._internal_drawBitmap(ctx, targetX, targetY);\n                }\n                targetY += bitmapSize.height;\n                if (paneIndex < this._private__paneWidgets.length - 1) {\n                    const separator = this._private__paneSeparators[paneIndex];\n                    const separatorBitmapSize = separator._internal_getBitmapSize();\n                    if (ctx !== null) {\n                        separator._internal_drawBitmap(ctx, targetX, targetY);\n                    }\n                    targetY += separatorBitmapSize.height;\n                }\n            }\n        };\n        // draw left price scale if exists\n        if (this._private__isLeftAxisVisible()) {\n            drawPriceAxises('left', 0);\n            const leftAxisBitmapWidth = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getBitmapSize().width;\n            totalWidth += leftAxisBitmapWidth;\n        }\n        for(let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++){\n            const paneWidget = this._private__paneWidgets[paneIndex];\n            const bitmapSize = paneWidget._internal_getBitmapSize();\n            if (ctx !== null) {\n                paneWidget._internal_drawBitmap(ctx, totalWidth, totalHeight);\n            }\n            totalHeight += bitmapSize.height;\n            if (paneIndex < this._private__paneWidgets.length - 1) {\n                const separator = this._private__paneSeparators[paneIndex];\n                const separatorBitmapSize = separator._internal_getBitmapSize();\n                if (ctx !== null) {\n                    separator._internal_drawBitmap(ctx, totalWidth, totalHeight);\n                }\n                totalHeight += separatorBitmapSize.height;\n            }\n        }\n        const firstPaneBitmapWidth = firstPane._internal_getBitmapSize().width;\n        totalWidth += firstPaneBitmapWidth;\n        // draw right price scale if exists\n        if (this._private__isRightAxisVisible()) {\n            drawPriceAxises('right', totalWidth);\n            const rightAxisBitmapWidth = ensureNotNull(firstPane._internal_rightPriceAxisWidget())._internal_getBitmapSize().width;\n            totalWidth += rightAxisBitmapWidth;\n        }\n        const drawStub = (position, targetX, targetY)=>{\n            const stub = ensureNotNull(position === 'left' ? this._private__timeAxisWidget._internal_leftStub() : this._private__timeAxisWidget._internal_rightStub());\n            stub._internal_drawBitmap(ensureNotNull(ctx), targetX, targetY);\n        };\n        // draw time scale and stubs\n        if (this._private__options.timeScale.visible) {\n            const timeAxisBitmapSize = this._private__timeAxisWidget._internal_getBitmapSize();\n            if (ctx !== null) {\n                let targetX = 0;\n                if (this._private__isLeftAxisVisible()) {\n                    drawStub('left', targetX, totalHeight);\n                    targetX = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getBitmapSize().width;\n                }\n                this._private__timeAxisWidget._internal_drawBitmap(ctx, targetX, totalHeight);\n                targetX += timeAxisBitmapSize.width;\n                if (this._private__isRightAxisVisible()) {\n                    drawStub('right', targetX, totalHeight);\n                }\n            }\n            totalHeight += timeAxisBitmapSize.height;\n        }\n        return (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: totalWidth,\n            height: totalHeight\n        });\n    }\n    // eslint-disable-next-line complexity\n    _private__adjustSizeImpl() {\n        let totalStretch = 0;\n        let leftPriceAxisWidth = 0;\n        let rightPriceAxisWidth = 0;\n        for (const paneWidget of this._private__paneWidgets){\n            if (this._private__isLeftAxisVisible()) {\n                leftPriceAxisWidth = Math.max(leftPriceAxisWidth, ensureNotNull(paneWidget._internal_leftPriceAxisWidget())._internal_optimalWidth(), this._private__options.leftPriceScale.minimumWidth);\n            }\n            if (this._private__isRightAxisVisible()) {\n                rightPriceAxisWidth = Math.max(rightPriceAxisWidth, ensureNotNull(paneWidget._internal_rightPriceAxisWidget())._internal_optimalWidth(), this._private__options.rightPriceScale.minimumWidth);\n            }\n            totalStretch += paneWidget._internal_stretchFactor();\n        }\n        leftPriceAxisWidth = suggestPriceScaleWidth(leftPriceAxisWidth);\n        rightPriceAxisWidth = suggestPriceScaleWidth(rightPriceAxisWidth);\n        const width = this._private__width;\n        const height = this._private__height;\n        const paneWidth = Math.max(width - leftPriceAxisWidth - rightPriceAxisWidth, 0);\n        const separatorCount = this._private__paneSeparators.length;\n        const separatorHeight = 1 /* SeparatorConstants.SeparatorHeight */ ;\n        const separatorsHeight = separatorHeight * separatorCount;\n        const timeAxisVisible = this._private__options.timeScale.visible;\n        let timeAxisHeight = timeAxisVisible ? Math.max(this._private__timeAxisWidget._internal_optimalHeight(), this._private__options.timeScale.minimumHeight) : 0;\n        timeAxisHeight = suggestTimeScaleHeight(timeAxisHeight);\n        const otherWidgetHeight = separatorsHeight + timeAxisHeight;\n        const totalPaneHeight = height < otherWidgetHeight ? 0 : height - otherWidgetHeight;\n        const stretchPixels = totalPaneHeight / totalStretch;\n        let accumulatedHeight = 0;\n        const pixelRatio = window.devicePixelRatio || 1;\n        for(let paneIndex = 0; paneIndex < this._private__paneWidgets.length; ++paneIndex){\n            const paneWidget = this._private__paneWidgets[paneIndex];\n            paneWidget._internal_setState(this._private__model._internal_panes()[paneIndex]);\n            let paneHeight = 0;\n            let calculatePaneHeight = 0;\n            if (paneIndex === this._private__paneWidgets.length - 1) {\n                calculatePaneHeight = Math.ceil((totalPaneHeight - accumulatedHeight) * pixelRatio) / pixelRatio;\n            } else {\n                calculatePaneHeight = Math.round(paneWidget._internal_stretchFactor() * stretchPixels * pixelRatio) / pixelRatio;\n            }\n            paneHeight = Math.max(calculatePaneHeight, 2);\n            accumulatedHeight += paneHeight;\n            paneWidget._internal_setSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: paneWidth,\n                height: paneHeight\n            }));\n            if (this._private__isLeftAxisVisible()) {\n                paneWidget._internal_setPriceAxisSize(leftPriceAxisWidth, 'left');\n            }\n            if (this._private__isRightAxisVisible()) {\n                paneWidget._internal_setPriceAxisSize(rightPriceAxisWidth, 'right');\n            }\n            if (paneWidget._internal_state()) {\n                this._private__model._internal_setPaneHeight(paneWidget._internal_state(), paneHeight);\n            }\n        }\n        this._private__timeAxisWidget._internal_setSizes((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: timeAxisVisible ? paneWidth : 0,\n            height: timeAxisHeight\n        }), timeAxisVisible ? leftPriceAxisWidth : 0, timeAxisVisible ? rightPriceAxisWidth : 0);\n        this._private__model._internal_setWidth(paneWidth);\n        if (this._private__leftPriceAxisWidth !== leftPriceAxisWidth) {\n            this._private__leftPriceAxisWidth = leftPriceAxisWidth;\n        }\n        if (this._private__rightPriceAxisWidth !== rightPriceAxisWidth) {\n            this._private__rightPriceAxisWidth = rightPriceAxisWidth;\n        }\n    }\n    _private__setMouseWheelEventListener(add) {\n        if (add) {\n            this._private__element.addEventListener('wheel', this._private__onWheelBound, {\n                passive: false\n            });\n            return;\n        }\n        this._private__element.removeEventListener('wheel', this._private__onWheelBound);\n    }\n    _private__determineWheelSpeedAdjustment(event) {\n        switch(event.deltaMode){\n            case event.DOM_DELTA_PAGE:\n                // one screen at time scroll mode\n                return 120;\n            case event.DOM_DELTA_LINE:\n                // one line at time scroll mode\n                return 32;\n        }\n        if (!windowsChrome) {\n            return 1;\n        }\n        // Chromium on Windows has a bug where the scroll speed isn't correctly\n        // adjusted for high density displays. We need to correct for this so that\n        // scroll speed is consistent between browsers.\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1001735\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1207308\n        return 1 / window.devicePixelRatio;\n    }\n    _private__onMousewheel(event) {\n        if ((event.deltaX === 0 || !this._private__options['handleScroll'].mouseWheel) && (event.deltaY === 0 || !this._private__options['handleScale'].mouseWheel)) {\n            return;\n        }\n        const scrollSpeedAdjustment = this._private__determineWheelSpeedAdjustment(event);\n        const deltaX = scrollSpeedAdjustment * event.deltaX / 100;\n        const deltaY = -(scrollSpeedAdjustment * event.deltaY / 100);\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        if (deltaY !== 0 && this._private__options['handleScale'].mouseWheel) {\n            const zoomScale = Math.sign(deltaY) * Math.min(1, Math.abs(deltaY));\n            const scrollPosition = event.clientX - this._private__element.getBoundingClientRect().left;\n            this._internal_model()._internal_zoomTime(scrollPosition, zoomScale);\n        }\n        if (deltaX !== 0 && this._private__options['handleScroll'].mouseWheel) {\n            this._internal_model()._internal_scrollChart(deltaX * -80); // 80 is a made up coefficient, and minus is for the \"natural\" scroll\n        }\n    }\n    _private__drawImpl(invalidateMask, time) {\n        const invalidationType = invalidateMask._internal_fullInvalidation();\n        // actions for full invalidation ONLY (not shared with light)\n        if (invalidationType === 3 /* InvalidationLevel.Full */ ) {\n            this._private__updateGui();\n        }\n        // light or full invalidate actions\n        if (invalidationType === 3 /* InvalidationLevel.Full */  || invalidationType === 2 /* InvalidationLevel.Light */ ) {\n            var _this__private__invalidateMask;\n            this._private__applyMomentaryAutoScale(invalidateMask);\n            this._private__applyTimeScaleInvalidations(invalidateMask, time);\n            this._private__timeAxisWidget._internal_update();\n            this._private__paneWidgets.forEach((pane)=>{\n                pane._internal_updatePriceAxisWidgets();\n            });\n            // In the case a full invalidation has been postponed during the draw, reapply\n            // the timescale invalidations. A full invalidation would mean there is a change\n            // in the timescale width (caused by price scale changes) that needs to be drawn\n            // right away to avoid flickering.\n            if (((_this__private__invalidateMask = this._private__invalidateMask) === null || _this__private__invalidateMask === void 0 ? void 0 : _this__private__invalidateMask._internal_fullInvalidation()) === 3 /* InvalidationLevel.Full */ ) {\n                this._private__invalidateMask._internal_merge(invalidateMask);\n                this._private__updateGui();\n                this._private__applyMomentaryAutoScale(this._private__invalidateMask);\n                this._private__applyTimeScaleInvalidations(this._private__invalidateMask, time);\n                invalidateMask = this._private__invalidateMask;\n                this._private__invalidateMask = null;\n            }\n        }\n        this._internal_paint(invalidateMask);\n    }\n    _private__applyTimeScaleInvalidations(invalidateMask, time) {\n        for (const tsInvalidation of invalidateMask._internal_timeScaleInvalidations()){\n            this._private__applyTimeScaleInvalidation(tsInvalidation, time);\n        }\n    }\n    _private__applyMomentaryAutoScale(invalidateMask) {\n        const panes = this._private__model._internal_panes();\n        for(let i = 0; i < panes.length; i++){\n            if (invalidateMask._internal_invalidateForPane(i)._internal_autoScale) {\n                panes[i]._internal_momentaryAutoScale();\n            }\n        }\n    }\n    _private__applyTimeScaleInvalidation(invalidation, time) {\n        const timeScale = this._private__model._internal_timeScale();\n        switch(invalidation._internal_type){\n            case 0 /* TimeScaleInvalidationType.FitContent */ :\n                timeScale._internal_fitContent();\n                break;\n            case 1 /* TimeScaleInvalidationType.ApplyRange */ :\n                timeScale._internal_setLogicalRange(invalidation._internal_value);\n                break;\n            case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */ :\n                timeScale._internal_setBarSpacing(invalidation._internal_value);\n                break;\n            case 3 /* TimeScaleInvalidationType.ApplyRightOffset */ :\n                timeScale._internal_setRightOffset(invalidation._internal_value);\n                break;\n            case 4 /* TimeScaleInvalidationType.Reset */ :\n                timeScale._internal_restoreDefault();\n                break;\n            case 5 /* TimeScaleInvalidationType.Animation */ :\n                if (!invalidation._internal_value._internal_finished(time)) {\n                    timeScale._internal_setRightOffset(invalidation._internal_value._internal_getPosition(time));\n                }\n                break;\n        }\n    }\n    _private__invalidateHandler(invalidateMask) {\n        if (this._private__invalidateMask !== null) {\n            this._private__invalidateMask._internal_merge(invalidateMask);\n        } else {\n            this._private__invalidateMask = invalidateMask;\n        }\n        if (!this._private__drawPlanned) {\n            this._private__drawPlanned = true;\n            this._private__drawRafId = window.requestAnimationFrame((time)=>{\n                this._private__drawPlanned = false;\n                this._private__drawRafId = 0;\n                if (this._private__invalidateMask !== null) {\n                    const mask = this._private__invalidateMask;\n                    this._private__invalidateMask = null;\n                    this._private__drawImpl(mask, time);\n                    for (const tsInvalidation of mask._internal_timeScaleInvalidations()){\n                        if (tsInvalidation._internal_type === 5 /* TimeScaleInvalidationType.Animation */  && !tsInvalidation._internal_value._internal_finished(time)) {\n                            this._internal_model()._internal_setTimeScaleAnimation(tsInvalidation._internal_value);\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    _private__updateGui() {\n        this._private__syncGuiWithModel();\n    }\n    _private__destroySeparator(separator) {\n        this._private__tableElement.removeChild(separator._internal_getElement());\n        separator._internal_destroy();\n    }\n    _private__syncGuiWithModel() {\n        const panes = this._private__model._internal_panes();\n        const targetPaneWidgetsCount = panes.length;\n        const actualPaneWidgetsCount = this._private__paneWidgets.length;\n        // Remove (if needed) pane widgets and separators\n        for(let i = targetPaneWidgetsCount; i < actualPaneWidgetsCount; i++){\n            const paneWidget = ensureDefined(this._private__paneWidgets.pop());\n            this._private__tableElement.removeChild(paneWidget._internal_getElement());\n            paneWidget._internal_clicked()._internal_unsubscribeAll(this);\n            paneWidget._internal_dblClicked()._internal_unsubscribeAll(this);\n            paneWidget._internal_destroy();\n            const paneSeparator = this._private__paneSeparators.pop();\n            if (paneSeparator !== undefined) {\n                this._private__destroySeparator(paneSeparator);\n            }\n        }\n        // Create (if needed) new pane widgets and separators\n        for(let i = actualPaneWidgetsCount; i < targetPaneWidgetsCount; i++){\n            const paneWidget = new PaneWidget(this, panes[i]);\n            paneWidget._internal_clicked()._internal_subscribe(this._private__onPaneWidgetClicked.bind(this, paneWidget), this);\n            paneWidget._internal_dblClicked()._internal_subscribe(this._private__onPaneWidgetDblClicked.bind(this, paneWidget), this);\n            this._private__paneWidgets.push(paneWidget);\n            // create and insert separator\n            if (i > 0) {\n                const paneSeparator = new PaneSeparator(this, i - 1, i);\n                this._private__paneSeparators.push(paneSeparator);\n                this._private__tableElement.insertBefore(paneSeparator._internal_getElement(), this._private__timeAxisWidget._internal_getElement());\n            }\n            // insert paneWidget\n            this._private__tableElement.insertBefore(paneWidget._internal_getElement(), this._private__timeAxisWidget._internal_getElement());\n        }\n        for(let i = 0; i < targetPaneWidgetsCount; i++){\n            const state = panes[i];\n            const paneWidget = this._private__paneWidgets[i];\n            if (paneWidget._internal_state() !== state) {\n                paneWidget._internal_setState(state);\n            } else {\n                paneWidget._internal_updatePriceAxisWidgetsStates();\n            }\n        }\n        this._private__updateTimeAxisVisibility();\n        this._private__adjustSizeImpl();\n    }\n    _private__getMouseEventParamsImpl(index, point, event, pane) {\n        const seriesData = new Map();\n        if (index !== null) {\n            const serieses = this._private__model._internal_serieses();\n            serieses.forEach((s)=>{\n                // TODO: replace with search left\n                const data = s._internal_bars()._internal_search(index);\n                if (data !== null) {\n                    seriesData.set(s, data);\n                }\n            });\n        }\n        let clientTime;\n        if (index !== null) {\n            var _this__private__model__internal_timeScale__internal_indexToTimeScalePoint;\n            const timePoint = (_this__private__model__internal_timeScale__internal_indexToTimeScalePoint = this._private__model._internal_timeScale()._internal_indexToTimeScalePoint(index)) === null || _this__private__model__internal_timeScale__internal_indexToTimeScalePoint === void 0 ? void 0 : _this__private__model__internal_timeScale__internal_indexToTimeScalePoint.originalTime;\n            if (timePoint !== undefined) {\n                clientTime = timePoint;\n            }\n        }\n        const hoveredSource = this._internal_model()._internal_hoveredSource();\n        const hoveredSeries = hoveredSource !== null && hoveredSource._internal_source instanceof Series ? hoveredSource._internal_source : undefined;\n        const hoveredObject = hoveredSource !== null && hoveredSource._internal_object !== undefined ? hoveredSource._internal_object._internal_externalId : undefined;\n        const paneIndex = this._private__getPaneIndex(pane);\n        return {\n            _internal_originalTime: clientTime,\n            _internal_index: index !== null && index !== void 0 ? index : undefined,\n            _internal_point: point !== null && point !== void 0 ? point : undefined,\n            _internal_paneIndex: paneIndex !== -1 ? paneIndex : undefined,\n            _internal_hoveredSeries: hoveredSeries,\n            _internal_seriesData: seriesData,\n            _internal_hoveredObject: hoveredObject,\n            _internal_touchMouseEventData: event !== null && event !== void 0 ? event : undefined\n        };\n    }\n    _private__getPaneIndex(pane) {\n        let paneIndex = -1;\n        if (pane) {\n            paneIndex = this._private__paneWidgets.indexOf(pane);\n        } else {\n            const crosshairPane = this._internal_model()._internal_crosshairSource()._internal_pane();\n            if (crosshairPane !== null) {\n                paneIndex = this._internal_model()._internal_panes().indexOf(crosshairPane);\n            }\n        }\n        return paneIndex;\n    }\n    _private__onPaneWidgetClicked(pane, time, point, event) {\n        this._private__clicked._internal_fire(()=>this._private__getMouseEventParamsImpl(time, point, event, pane));\n    }\n    _private__onPaneWidgetDblClicked(pane, time, point, event) {\n        this._private__dblClicked._internal_fire(()=>this._private__getMouseEventParamsImpl(time, point, event, pane));\n    }\n    _private__onPaneWidgetCrosshairMoved(time, point, event) {\n        var _this__internal_model__internal_hoveredSource;\n        var _this__internal_model__internal_hoveredSource__internal_cursorStyle;\n        this._internal_setCursorStyle((_this__internal_model__internal_hoveredSource__internal_cursorStyle = (_this__internal_model__internal_hoveredSource = this._internal_model()._internal_hoveredSource()) === null || _this__internal_model__internal_hoveredSource === void 0 ? void 0 : _this__internal_model__internal_hoveredSource._internal_cursorStyle) !== null && _this__internal_model__internal_hoveredSource__internal_cursorStyle !== void 0 ? _this__internal_model__internal_hoveredSource__internal_cursorStyle : null);\n        this._private__crosshairMoved._internal_fire(()=>this._private__getMouseEventParamsImpl(time, point, event));\n    }\n    _private__updateTimeAxisVisibility() {\n        const display = this._private__options.timeScale.visible ? '' : 'none';\n        this._private__timeAxisWidget._internal_getElement().style.display = display;\n    }\n    _private__isLeftAxisVisible() {\n        return this._private__paneWidgets[0]._internal_state()._internal_leftPriceScale()._internal_options().visible;\n    }\n    _private__isRightAxisVisible() {\n        return this._private__paneWidgets[0]._internal_state()._internal_rightPriceScale()._internal_options().visible;\n    }\n    _private__installObserver() {\n        // eslint-disable-next-line no-restricted-syntax\n        if (!('ResizeObserver' in window)) {\n            warn('Options contains \"autoSize\" flag, but the browser does not support ResizeObserver feature. Please provide polyfill.');\n            return false;\n        } else {\n            this._private__observer = new ResizeObserver((entries)=>{\n                // There is no need to check if entry.target === this._container since there is only\n                // a single element being observed.\n                // and we want to use the last entry (if multiple) because it would be most up to date\n                // (since the browser may batch multiple updates).\n                const containerEntry = entries[entries.length - 1];\n                if (!containerEntry) {\n                    // this may be undefined if the entries array was empty.\n                    return;\n                }\n                this._internal_resize(containerEntry.contentRect.width, containerEntry.contentRect.height);\n            });\n            this._private__observer.observe(this._private__container, {\n                box: 'border-box'\n            });\n            return true;\n        }\n    }\n    _private__uninstallObserver() {\n        if (this._private__observer !== null) {\n            this._private__observer.disconnect();\n        }\n        this._private__observer = null;\n    }\n    constructor(container, options, horzScaleBehavior){\n        this._private__paneWidgets = [];\n        this._private__paneSeparators = [];\n        this._private__drawRafId = 0;\n        this._private__height = 0;\n        this._private__width = 0;\n        this._private__leftPriceAxisWidth = 0;\n        this._private__rightPriceAxisWidth = 0;\n        this._private__invalidateMask = null;\n        this._private__drawPlanned = false;\n        this._private__clicked = new Delegate();\n        this._private__dblClicked = new Delegate();\n        this._private__crosshairMoved = new Delegate();\n        this._private__observer = null;\n        this._private__cursorStyleOverride = null;\n        this._private__container = container;\n        this._private__options = options;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__element = document.createElement('div');\n        this._private__element.classList.add('tv-lightweight-charts');\n        this._private__element.style.overflow = 'hidden';\n        this._private__element.style.direction = 'ltr';\n        this._private__element.style.width = '100%';\n        this._private__element.style.height = '100%';\n        disableSelection(this._private__element);\n        this._private__tableElement = document.createElement('table');\n        this._private__tableElement.setAttribute('cellspacing', '0');\n        this._private__element.appendChild(this._private__tableElement);\n        this._private__onWheelBound = this._private__onMousewheel.bind(this);\n        if (shouldSubscribeMouseWheel(this._private__options)) {\n            this._private__setMouseWheelEventListener(true);\n        }\n        this._private__model = new ChartModel(this._private__invalidateHandler.bind(this), this._private__options, horzScaleBehavior);\n        this._internal_model()._internal_crosshairMoved()._internal_subscribe(this._private__onPaneWidgetCrosshairMoved.bind(this), this);\n        this._private__timeAxisWidget = new TimeAxisWidget(this, this._private__horzScaleBehavior);\n        this._private__tableElement.appendChild(this._private__timeAxisWidget._internal_getElement());\n        const usedObserver = options.autoSize && this._private__installObserver();\n        // observer could not fire event immediately for some cases\n        // so we have to set initial size manually\n        let width = this._private__options.width;\n        let height = this._private__options.height;\n        // ignore width/height options if observer has actually been used\n        // however respect options if installing resize observer failed\n        if (usedObserver || width === 0 || height === 0) {\n            const containerRect = container.getBoundingClientRect();\n            width = width || containerRect.width;\n            height = height || containerRect.height;\n        }\n        // BEWARE: resize must be called BEFORE _syncGuiWithModel (in constructor only)\n        // or after but with adjustSize to properly update time scale\n        this._internal_resize(width, height);\n        this._private__syncGuiWithModel();\n        container.appendChild(this._private__element);\n        this._private__updateTimeAxisVisibility();\n        this._private__model._internal_timeScale()._internal_optionsApplied()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);\n        this._private__model._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);\n    }\n}\nfunction disableSelection(element) {\n    element.style.userSelect = 'none';\n    // eslint-disable-next-line deprecation/deprecation\n    element.style.webkitUserSelect = 'none';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\n    element.style.msUserSelect = 'none';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\n    element.style.MozUserSelect = 'none';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\n    element.style.webkitTapHighlightColor = 'transparent';\n}\nfunction shouldSubscribeMouseWheel(options) {\n    return Boolean(options['handleScroll'].mouseWheel || options['handleScale'].mouseWheel);\n}\nfunction isWhitespaceData(data) {\n    return data.open === undefined && data.value === undefined;\n}\nfunction isFulfilledData(data) {\n    return isFulfilledBarData(data) || isFulfilledLineData(data);\n}\nfunction isFulfilledBarData(data) {\n    return data.open !== undefined;\n}\nfunction isFulfilledLineData(data) {\n    return data.value !== undefined;\n}\nfunction getColoredLineBasedSeriesPlotRow(time, index, item, originalTime) {\n    const val = item.value;\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            val,\n            val,\n            val,\n            val\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.color !== undefined) {\n        res._internal_color = item.color;\n    }\n    return res;\n}\nfunction getAreaSeriesPlotRow(time, index, item, originalTime) {\n    const val = item.value;\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            val,\n            val,\n            val,\n            val\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.lineColor !== undefined) {\n        res._internal_lineColor = item.lineColor;\n    }\n    if (item.topColor !== undefined) {\n        res._internal_topColor = item.topColor;\n    }\n    if (item.bottomColor !== undefined) {\n        res._internal_bottomColor = item.bottomColor;\n    }\n    return res;\n}\nfunction getBaselineSeriesPlotRow(time, index, item, originalTime) {\n    const val = item.value;\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            val,\n            val,\n            val,\n            val\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.topLineColor !== undefined) {\n        res._internal_topLineColor = item.topLineColor;\n    }\n    if (item.bottomLineColor !== undefined) {\n        res._internal_bottomLineColor = item.bottomLineColor;\n    }\n    if (item.topFillColor1 !== undefined) {\n        res._internal_topFillColor1 = item.topFillColor1;\n    }\n    if (item.topFillColor2 !== undefined) {\n        res._internal_topFillColor2 = item.topFillColor2;\n    }\n    if (item.bottomFillColor1 !== undefined) {\n        res._internal_bottomFillColor1 = item.bottomFillColor1;\n    }\n    if (item.bottomFillColor2 !== undefined) {\n        res._internal_bottomFillColor2 = item.bottomFillColor2;\n    }\n    return res;\n}\nfunction getBarSeriesPlotRow(time, index, item, originalTime) {\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            item.open,\n            item.high,\n            item.low,\n            item.close\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.color !== undefined) {\n        res._internal_color = item.color;\n    }\n    return res;\n}\nfunction getCandlestickSeriesPlotRow(time, index, item, originalTime) {\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            item.open,\n            item.high,\n            item.low,\n            item.close\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.color !== undefined) {\n        res._internal_color = item.color;\n    }\n    if (item.borderColor !== undefined) {\n        res._internal_borderColor = item.borderColor;\n    }\n    if (item.wickColor !== undefined) {\n        res._internal_wickColor = item.wickColor;\n    }\n    return res;\n}\nfunction getCustomSeriesPlotRow(time, index, item, originalTime, dataToPlotRow) {\n    const values = ensureDefined(dataToPlotRow)(item);\n    const max = Math.max(...values);\n    const min = Math.min(...values);\n    const last = values[values.length - 1];\n    const value = [\n        last,\n        max,\n        min,\n        last\n    ];\n    const { time: excludedTime, color, ...data } = item;\n    return {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: value,\n        _internal_originalTime: originalTime,\n        _internal_data: data,\n        _internal_color: color\n    };\n}\nfunction isSeriesPlotRow(row) {\n    return row._internal_value !== undefined;\n}\nfunction wrapCustomValues(plotRow, bar) {\n    if (bar.customValues !== undefined) {\n        plotRow._internal_customValues = bar.customValues;\n    }\n    return plotRow;\n}\nfunction isWhitespaceDataWithCustomCheck(bar, customIsWhitespace) {\n    if (customIsWhitespace) {\n        return customIsWhitespace(bar);\n    }\n    return isWhitespaceData(bar);\n}\nfunction wrapWhitespaceData(createPlotRowFn) {\n    return (time, index, bar, originalTime, dataToPlotRow, customIsWhitespace)=>{\n        if (isWhitespaceDataWithCustomCheck(bar, customIsWhitespace)) {\n            return wrapCustomValues({\n                _internal_time: time,\n                _internal_index: index,\n                _internal_originalTime: originalTime\n            }, bar);\n        }\n        return wrapCustomValues(createPlotRowFn(time, index, bar, originalTime, dataToPlotRow), bar);\n    };\n}\nfunction getSeriesPlotRowCreator(seriesType) {\n    const seriesPlotRowFnMap = {\n        Candlestick: wrapWhitespaceData(getCandlestickSeriesPlotRow),\n        Bar: wrapWhitespaceData(getBarSeriesPlotRow),\n        Area: wrapWhitespaceData(getAreaSeriesPlotRow),\n        Baseline: wrapWhitespaceData(getBaselineSeriesPlotRow),\n        Histogram: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),\n        Line: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),\n        Custom: wrapWhitespaceData(getCustomSeriesPlotRow)\n    };\n    return seriesPlotRowFnMap[seriesType];\n}\n/// <reference types=\"_build-time-constants\" />\nfunction createEmptyTimePointData(timePoint) {\n    return {\n        _internal_index: 0,\n        _internal_mapping: new Map(),\n        _internal_timePoint: timePoint\n    };\n}\nfunction seriesRowsFirstAndLastTime(seriesRows, bh) {\n    if (seriesRows === undefined || seriesRows.length === 0) {\n        return undefined;\n    }\n    return {\n        _internal_firstTime: bh.key(seriesRows[0]._internal_time),\n        _internal_lastTime: bh.key(seriesRows[seriesRows.length - 1]._internal_time)\n    };\n}\nfunction seriesUpdateInfo(seriesRows, prevSeriesRows, bh) {\n    const firstAndLastTime = seriesRowsFirstAndLastTime(seriesRows, bh);\n    const prevFirstAndLastTime = seriesRowsFirstAndLastTime(prevSeriesRows, bh);\n    if (firstAndLastTime !== undefined && prevFirstAndLastTime !== undefined) {\n        return {\n            _internal_historicalUpdate: false,\n            _internal_lastBarUpdatedOrNewBarsAddedToTheRight: firstAndLastTime._internal_lastTime >= prevFirstAndLastTime._internal_lastTime && firstAndLastTime._internal_firstTime >= prevFirstAndLastTime._internal_firstTime\n        };\n    }\n    return undefined;\n}\nfunction timeScalePointTime(mergedPointData) {\n    let result;\n    mergedPointData.forEach((v)=>{\n        if (result === undefined) {\n            result = v._internal_originalTime;\n        }\n    });\n    return ensureDefined(result);\n}\nfunction saveOriginalTime(data) {\n    if (data._internal_originalTime === undefined) {\n        data._internal_originalTime = data.time;\n    }\n}\nclass DataLayer {\n    _internal_destroy() {\n        this._private__pointDataByTimePoint.clear();\n        this._private__seriesRowsBySeries.clear();\n        this._private__seriesLastTimePoint.clear();\n        this._private__sortedTimePoints = [];\n    }\n    _internal_setSeriesData(series, data) {\n        let needCleanupPoints = this._private__pointDataByTimePoint.size !== 0;\n        let isTimeScaleAffected = false;\n        // save previous series rows data before it's replaced inside this._setRowsToSeries\n        const prevSeriesRows = this._private__seriesRowsBySeries.get(series);\n        if (prevSeriesRows !== undefined) {\n            if (this._private__seriesRowsBySeries.size === 1) {\n                needCleanupPoints = false;\n                isTimeScaleAffected = true;\n                // perf optimization - if there is only 1 series, then we can just clear and fill everything from scratch\n                this._private__pointDataByTimePoint.clear();\n            } else {\n                // perf optimization - actually we have to use this._pointDataByTimePoint for going through here\n                // but as soon as this._sortedTimePoints is just a different form of _pointDataByTimePoint we can use it as well\n                for (const point of this._private__sortedTimePoints){\n                    if (point.pointData._internal_mapping.delete(series)) {\n                        isTimeScaleAffected = true;\n                    }\n                }\n            }\n        }\n        let seriesRows = [];\n        if (data.length !== 0) {\n            const originalTimes = data.map((d)=>d.time);\n            const timeConverter = this._private__horzScaleBehavior.createConverterToInternalObj(data);\n            const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());\n            const dataToPlotRow = series._internal_customSeriesPlotValuesBuilder();\n            const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\n            seriesRows = data.map((item, index)=>{\n                const time = timeConverter(item.time);\n                const horzItemKey = this._private__horzScaleBehavior.key(time);\n                let timePointData = this._private__pointDataByTimePoint.get(horzItemKey);\n                if (timePointData === undefined) {\n                    // the indexes will be sync later\n                    timePointData = createEmptyTimePointData(time);\n                    this._private__pointDataByTimePoint.set(horzItemKey, timePointData);\n                    isTimeScaleAffected = true;\n                }\n                const row = createPlotRow(time, timePointData._internal_index, item, originalTimes[index], dataToPlotRow, customWhitespaceChecker);\n                timePointData._internal_mapping.set(series, row);\n                return row;\n            });\n        }\n        if (needCleanupPoints) {\n            // we deleted the old data from mapping and added the new ones\n            // so there might be empty points now, let's remove them first\n            this._private__cleanupPointsData();\n        }\n        this._private__setRowsToSeries(series, seriesRows);\n        let firstChangedPointIndex = -1;\n        if (isTimeScaleAffected) {\n            // then generate the time scale points\n            // timeWeight will be updates in _updateTimeScalePoints later\n            const newTimeScalePoints = [];\n            this._private__pointDataByTimePoint.forEach((pointData)=>{\n                newTimeScalePoints.push({\n                    timeWeight: 0,\n                    time: pointData._internal_timePoint,\n                    pointData,\n                    originalTime: timeScalePointTime(pointData._internal_mapping)\n                });\n            });\n            newTimeScalePoints.sort((t1, t2)=>this._private__horzScaleBehavior.key(t1.time) - this._private__horzScaleBehavior.key(t2.time));\n            firstChangedPointIndex = this._private__replaceTimeScalePoints(newTimeScalePoints);\n        }\n        return this._private__getUpdateResponse(series, firstChangedPointIndex, seriesUpdateInfo(this._private__seriesRowsBySeries.get(series), prevSeriesRows, this._private__horzScaleBehavior));\n    }\n    _internal_removeSeries(series) {\n        return this._internal_setSeriesData(series, []);\n    }\n    _internal_updateSeriesData(series, data, historicalUpdate) {\n        const extendedData = data;\n        saveOriginalTime(extendedData);\n        // convertStringToBusinessDay(data);\n        this._private__horzScaleBehavior.preprocessData(data);\n        const timeConverter = this._private__horzScaleBehavior.createConverterToInternalObj([\n            data\n        ]);\n        const time = timeConverter(data.time);\n        const lastSeriesTime = this._private__seriesLastTimePoint.get(series);\n        if (!historicalUpdate && lastSeriesTime !== undefined && this._private__horzScaleBehavior.key(time) < this._private__horzScaleBehavior.key(lastSeriesTime)) {\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\n            throw new Error(\"Cannot update oldest data, last time=\".concat(lastSeriesTime, \", new time=\").concat(time));\n        }\n        let pointDataAtTime = this._private__pointDataByTimePoint.get(this._private__horzScaleBehavior.key(time));\n        if (historicalUpdate && pointDataAtTime === undefined) {\n            throw new Error('Cannot update non-existing data point when historicalUpdate is true');\n        }\n        // if no point data found for the new data item\n        // that means that we need to update scale\n        const affectsTimeScale = pointDataAtTime === undefined;\n        if (pointDataAtTime === undefined) {\n            // the indexes will be sync later\n            pointDataAtTime = createEmptyTimePointData(time);\n            this._private__pointDataByTimePoint.set(this._private__horzScaleBehavior.key(time), pointDataAtTime);\n        }\n        const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());\n        const dataToPlotRow = series._internal_customSeriesPlotValuesBuilder();\n        const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\n        const plotRow = createPlotRow(time, pointDataAtTime._internal_index, data, extendedData._internal_originalTime, dataToPlotRow, customWhitespaceChecker);\n        pointDataAtTime._internal_mapping.set(series, plotRow);\n        if (historicalUpdate) {\n            this._private__updateHistoricalSeriesRow(series, plotRow, pointDataAtTime._internal_index);\n        } else {\n            this._private__updateLastSeriesRow(series, plotRow);\n        }\n        const info = {\n            _internal_lastBarUpdatedOrNewBarsAddedToTheRight: isSeriesPlotRow(plotRow),\n            _internal_historicalUpdate: historicalUpdate\n        };\n        // if point already exist on the time scale - we don't need to make a full update and just make an incremental one\n        if (!affectsTimeScale) {\n            return this._private__getUpdateResponse(series, -1, info);\n        }\n        const newPoint = {\n            timeWeight: 0,\n            time: pointDataAtTime._internal_timePoint,\n            pointData: pointDataAtTime,\n            originalTime: timeScalePointTime(pointDataAtTime._internal_mapping)\n        };\n        const insertIndex = lowerBound(this._private__sortedTimePoints, this._private__horzScaleBehavior.key(newPoint.time), (a, b)=>this._private__horzScaleBehavior.key(a.time) < b);\n        // yes, I know that this array is readonly and this change is intended to make it performative\n        // we marked _sortedTimePoints array as readonly to avoid modifying this array anywhere else\n        // but this place is exceptional case due performance reasons, sorry\n        this._private__sortedTimePoints.splice(insertIndex, 0, newPoint);\n        for(let index = insertIndex; index < this._private__sortedTimePoints.length; ++index){\n            assignIndexToPointData(this._private__sortedTimePoints[index].pointData, index);\n        }\n        this._private__horzScaleBehavior.fillWeightsForPoints(this._private__sortedTimePoints, insertIndex);\n        return this._private__getUpdateResponse(series, insertIndex, info);\n    }\n    _private__updateLastSeriesRow(series, plotRow) {\n        let seriesData = this._private__seriesRowsBySeries.get(series);\n        if (seriesData === undefined) {\n            seriesData = [];\n            this._private__seriesRowsBySeries.set(series, seriesData);\n        }\n        const lastSeriesRow = seriesData.length !== 0 ? seriesData[seriesData.length - 1] : null;\n        if (lastSeriesRow === null || this._private__horzScaleBehavior.key(plotRow._internal_time) > this._private__horzScaleBehavior.key(lastSeriesRow._internal_time)) {\n            if (isSeriesPlotRow(plotRow)) {\n                seriesData.push(plotRow);\n            }\n        } else {\n            if (isSeriesPlotRow(plotRow)) {\n                seriesData[seriesData.length - 1] = plotRow;\n            } else {\n                seriesData.splice(-1, 1);\n            }\n        }\n        this._private__seriesLastTimePoint.set(series, plotRow._internal_time);\n    }\n    _private__updateHistoricalSeriesRow(series, plotRow, pointDataIndex) {\n        const seriesData = this._private__seriesRowsBySeries.get(series);\n        if (seriesData === undefined) {\n            return;\n        }\n        // binary search for actual index in array.\n        const index = lowerBound(seriesData, pointDataIndex, (row, currentIndex)=>row._internal_index < currentIndex);\n        if (isSeriesPlotRow(plotRow)) {\n            seriesData[index] = plotRow;\n        } else {\n            seriesData.splice(index, 1);\n        }\n    }\n    _private__setRowsToSeries(series, seriesRows) {\n        if (seriesRows.length !== 0) {\n            this._private__seriesRowsBySeries.set(series, seriesRows.filter(isSeriesPlotRow));\n            this._private__seriesLastTimePoint.set(series, seriesRows[seriesRows.length - 1]._internal_time);\n        } else {\n            this._private__seriesRowsBySeries.delete(series);\n            this._private__seriesLastTimePoint.delete(series);\n        }\n    }\n    _private__cleanupPointsData() {\n        // let's treat all current points as \"potentially removed\"\n        // we could create an array with actually potentially removed points\n        // but most likely this array will be similar to _sortedTimePoints so let's avoid using additional memory\n        // note that we can use _sortedTimePoints here since a point might be removed only it was here previously\n        for (const point of this._private__sortedTimePoints){\n            if (point.pointData._internal_mapping.size === 0) {\n                this._private__pointDataByTimePoint.delete(this._private__horzScaleBehavior.key(point.time));\n            }\n        }\n    }\n    /**\n     * Sets new time scale and make indexes valid for all series\n     *\n     * @returns The index of the first changed point or `-1` if there is no change.\n     */ _private__replaceTimeScalePoints(newTimePoints) {\n        let firstChangedPointIndex = -1;\n        // search the first different point and \"syncing\" time weight by the way\n        for(let index = 0; index < this._private__sortedTimePoints.length && index < newTimePoints.length; ++index){\n            const oldPoint = this._private__sortedTimePoints[index];\n            const newPoint = newTimePoints[index];\n            if (this._private__horzScaleBehavior.key(oldPoint.time) !== this._private__horzScaleBehavior.key(newPoint.time)) {\n                firstChangedPointIndex = index;\n                break;\n            }\n            // re-assign point's time weight for points if time is the same (and all prior times was the same)\n            newPoint.timeWeight = oldPoint.timeWeight;\n            assignIndexToPointData(newPoint.pointData, index);\n        }\n        if (firstChangedPointIndex === -1 && this._private__sortedTimePoints.length !== newTimePoints.length) {\n            // the common part of the prev and the new points are the same\n            // so the first changed point is the next after the common part\n            firstChangedPointIndex = Math.min(this._private__sortedTimePoints.length, newTimePoints.length);\n        }\n        if (firstChangedPointIndex === -1) {\n            // if no time scale changed, then do nothing\n            return -1;\n        }\n        // if time scale points are changed that means that we need to make full update to all series (with clearing points)\n        // but first we need to synchronize indexes and re-fill time weights\n        for(let index = firstChangedPointIndex; index < newTimePoints.length; ++index){\n            assignIndexToPointData(newTimePoints[index].pointData, index);\n        }\n        // re-fill time weights for point after the first changed one\n        this._private__horzScaleBehavior.fillWeightsForPoints(newTimePoints, firstChangedPointIndex);\n        this._private__sortedTimePoints = newTimePoints;\n        return firstChangedPointIndex;\n    }\n    _private__getBaseIndex() {\n        if (this._private__seriesRowsBySeries.size === 0) {\n            // if we have no data then 'reset' the base index to null\n            return null;\n        }\n        let baseIndex = 0;\n        this._private__seriesRowsBySeries.forEach((data)=>{\n            if (data.length !== 0) {\n                baseIndex = Math.max(baseIndex, data[data.length - 1]._internal_index);\n            }\n        });\n        return baseIndex;\n    }\n    _private__getUpdateResponse(updatedSeries, firstChangedPointIndex, info) {\n        const dataUpdateResponse = {\n            _internal_series: new Map(),\n            _internal_timeScale: {\n                _internal_baseIndex: this._private__getBaseIndex()\n            }\n        };\n        if (firstChangedPointIndex !== -1) {\n            // TODO: it's possible to make perf improvements by checking what series has data after firstChangedPointIndex\n            // but let's skip for now\n            this._private__seriesRowsBySeries.forEach((data, s)=>{\n                dataUpdateResponse._internal_series.set(s, {\n                    _internal_data: data,\n                    _internal_info: s === updatedSeries ? info : undefined\n                });\n            });\n            // if the series data was set to [] it will have already been removed from _seriesRowBySeries\n            // meaning the forEach above won't add the series to the data update response\n            // so we handle that case here\n            if (!this._private__seriesRowsBySeries.has(updatedSeries)) {\n                dataUpdateResponse._internal_series.set(updatedSeries, {\n                    _internal_data: [],\n                    _internal_info: info\n                });\n            }\n            dataUpdateResponse._internal_timeScale._internal_points = this._private__sortedTimePoints;\n            dataUpdateResponse._internal_timeScale._internal_firstChangedPointIndex = firstChangedPointIndex;\n        } else {\n            const seriesData = this._private__seriesRowsBySeries.get(updatedSeries);\n            // if no seriesData found that means that we just removed the series\n            dataUpdateResponse._internal_series.set(updatedSeries, {\n                _internal_data: seriesData || [],\n                _internal_info: info\n            });\n        }\n        return dataUpdateResponse;\n    }\n    constructor(horzScaleBehavior){\n        // note that _pointDataByTimePoint and _seriesRowsBySeries shares THE SAME objects in their values between each other\n        // it's just different kind of maps to make usages/perf better\n        this._private__pointDataByTimePoint = new Map();\n        this._private__seriesRowsBySeries = new Map();\n        this._private__seriesLastTimePoint = new Map();\n        // this is kind of \"dest\" values (in opposite to \"source\" ones) - we don't need to modify it manually, the only by calling _updateTimeScalePoints or updateSeriesData methods\n        this._private__sortedTimePoints = [];\n        this._private__horzScaleBehavior = horzScaleBehavior;\n    }\n}\nfunction assignIndexToPointData(pointData, index) {\n    // first, nevertheless update index of point data (\"make it valid\")\n    pointData._internal_index = index;\n    // and then we need to sync indexes for all series\n    pointData._internal_mapping.forEach((seriesRow)=>{\n        seriesRow._internal_index = index;\n    });\n}\nfunction lowerBoundItemsCompare(item, time) {\n    return item._internal_time < time;\n}\nfunction upperBoundItemsCompare(item, time) {\n    return time < item._internal_time;\n}\nfunction visibleTimedValues(items, range, extendedRange) {\n    const firstBar = range._internal_left();\n    const lastBar = range._internal_right();\n    const from = lowerBound(items, firstBar, lowerBoundItemsCompare);\n    const to = upperBound(items, lastBar, upperBoundItemsCompare);\n    if (!extendedRange) {\n        return {\n            from,\n            to\n        };\n    }\n    let extendedFrom = from;\n    let extendedTo = to;\n    if (from > 0 && from < items.length && items[from]._internal_time >= firstBar) {\n        extendedFrom = from - 1;\n    }\n    if (to > 0 && to < items.length && items[to - 1]._internal_time <= lastBar) {\n        extendedTo = to + 1;\n    }\n    return {\n        from: extendedFrom,\n        to: extendedTo\n    };\n}\nclass SeriesPaneViewBase {\n    _internal_update(updateType) {\n        this._internal__invalidated = true;\n        if (updateType === 'data') {\n            this._internal__dataInvalidated = true;\n        }\n        if (updateType === 'options') {\n            this._internal__optionsInvalidated = true;\n        }\n    }\n    _internal_renderer() {\n        if (!this._internal__series._internal_visible()) {\n            return null;\n        }\n        this._private__makeValid();\n        return this._internal__itemsVisibleRange === null ? null : this._internal__renderer;\n    }\n    _internal__updateOptions() {\n        this._internal__items = this._internal__items.map((item)=>({\n                ...item,\n                ...this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time)\n            }));\n    }\n    _internal__clearVisibleRange() {\n        this._internal__itemsVisibleRange = null;\n    }\n    _private__makeValid() {\n        if (this._internal__dataInvalidated) {\n            this._internal__fillRawPoints();\n            this._internal__dataInvalidated = false;\n        }\n        if (this._internal__optionsInvalidated) {\n            this._internal__updateOptions();\n            this._internal__optionsInvalidated = false;\n        }\n        if (this._internal__invalidated) {\n            this._private__makeValidImpl();\n            this._internal__invalidated = false;\n        }\n    }\n    _private__makeValidImpl() {\n        const priceScale = this._internal__series._internal_priceScale();\n        const timeScale = this._internal__model._internal_timeScale();\n        this._internal__clearVisibleRange();\n        if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {\n            return;\n        }\n        const visibleBars = timeScale._internal_visibleStrictRange();\n        if (visibleBars === null) {\n            return;\n        }\n        if (this._internal__series._internal_bars()._internal_size() === 0) {\n            return;\n        }\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return;\n        }\n        this._internal__itemsVisibleRange = visibleTimedValues(this._internal__items, visibleBars, this._private__extendedVisibleRange);\n        this._internal__convertToCoordinates(priceScale, timeScale, firstValue._internal_value);\n        this._internal__prepareRendererData();\n    }\n    constructor(series, model, extendedVisibleRange){\n        this._internal__invalidated = true;\n        this._internal__dataInvalidated = true;\n        this._internal__optionsInvalidated = true;\n        this._internal__items = [];\n        this._internal__itemsVisibleRange = null;\n        this._internal__series = series;\n        this._internal__model = model;\n        this._private__extendedVisibleRange = extendedVisibleRange;\n    }\n}\nclass CustomSeriesPaneRendererWrapper {\n    _internal_draw(target, isHovered, hitTestData) {\n        this._private__sourceRenderer.draw(target, this._private__priceScale, isHovered, hitTestData);\n    }\n    constructor(sourceRenderer, priceScale){\n        this._private__sourceRenderer = sourceRenderer;\n        this._private__priceScale = priceScale;\n    }\n}\nclass SeriesCustomPaneView extends SeriesPaneViewBase {\n    _internal_priceValueBuilder(plotRow) {\n        return this._private__paneView.priceValueBuilder(plotRow);\n    }\n    _internal_isWhitespace(data) {\n        return this._private__paneView.isWhitespace(data);\n    }\n    _internal__fillRawPoints() {\n        const colorer = this._internal__series._internal_barColorer();\n        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row)=>{\n            return {\n                _internal_time: row._internal_index,\n                _internal_x: NaN,\n                ...colorer._internal_barStyle(row._internal_index),\n                _internal_originalData: row._internal_data\n            };\n        });\n    }\n    _internal__convertToCoordinates(priceScale, timeScale) {\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\n    }\n    _internal__prepareRendererData() {\n        this._private__paneView.update({\n            bars: this._internal__items.map(unwrapItemData),\n            barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            visibleRange: this._internal__itemsVisibleRange\n        }, this._internal__series._internal_options());\n    }\n    constructor(series, model, paneView){\n        super(series, model, false);\n        this._private__paneView = paneView;\n        this._internal__renderer = new CustomSeriesPaneRendererWrapper(this._private__paneView.renderer(), (price)=>{\n            const firstValue = series._internal_firstValue();\n            if (firstValue === null) {\n                return null;\n            }\n            return series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);\n        });\n    }\n}\nfunction unwrapItemData(item) {\n    return {\n        x: item._internal_x,\n        time: item._internal_time,\n        originalData: item._internal_originalData,\n        barColor: item._internal_barColor\n    };\n}\nconst customStyleDefaults = {\n    color: '#2196f3'\n};\nconst createPaneView$6 = (series, model, customPaneView)=>{\n    const paneView = ensure(customPaneView);\n    return new SeriesCustomPaneView(series, model, paneView);\n};\nconst createCustomSeriesDefinition = (paneView)=>{\n    const definition = {\n        type: 'Custom',\n        isBuiltIn: false,\n        defaultOptions: {\n            ...customStyleDefaults,\n            ...paneView.defaultOptions()\n        },\n        /**\n         * @internal\n         */ _internal_createPaneView: createPaneView$6,\n        _internal_customPaneView: paneView\n    };\n    return definition;\n};\nconst isSeriesDefinition = (value)=>{\n    return value._internal_createPaneView !== undefined;\n};\nfunction singleValueData(plotRow) {\n    const data = {\n        value: plotRow._internal_value[3 /* PlotRowValueIndex.Close */ ],\n        time: plotRow._internal_originalTime\n    };\n    if (plotRow._internal_customValues !== undefined) {\n        data.customValues = plotRow._internal_customValues;\n    }\n    return data;\n}\nfunction lineData(plotRow) {\n    const result = singleValueData(plotRow);\n    if (plotRow._internal_color !== undefined) {\n        result.color = plotRow._internal_color;\n    }\n    return result;\n}\nfunction areaData(plotRow) {\n    const result = singleValueData(plotRow);\n    if (plotRow._internal_lineColor !== undefined) {\n        result.lineColor = plotRow._internal_lineColor;\n    }\n    if (plotRow._internal_topColor !== undefined) {\n        result.topColor = plotRow._internal_topColor;\n    }\n    if (plotRow._internal_bottomColor !== undefined) {\n        result.bottomColor = plotRow._internal_bottomColor;\n    }\n    return result;\n}\nfunction baselineData(plotRow) {\n    const result = singleValueData(plotRow);\n    if (plotRow._internal_topLineColor !== undefined) {\n        result.topLineColor = plotRow._internal_topLineColor;\n    }\n    if (plotRow._internal_bottomLineColor !== undefined) {\n        result.bottomLineColor = plotRow._internal_bottomLineColor;\n    }\n    if (plotRow._internal_topFillColor1 !== undefined) {\n        result.topFillColor1 = plotRow._internal_topFillColor1;\n    }\n    if (plotRow._internal_topFillColor2 !== undefined) {\n        result.topFillColor2 = plotRow._internal_topFillColor2;\n    }\n    if (plotRow._internal_bottomFillColor1 !== undefined) {\n        result.bottomFillColor1 = plotRow._internal_bottomFillColor1;\n    }\n    if (plotRow._internal_bottomFillColor2 !== undefined) {\n        result.bottomFillColor2 = plotRow._internal_bottomFillColor2;\n    }\n    return result;\n}\nfunction ohlcData(plotRow) {\n    const data = {\n        open: plotRow._internal_value[0 /* PlotRowValueIndex.Open */ ],\n        high: plotRow._internal_value[1 /* PlotRowValueIndex.High */ ],\n        low: plotRow._internal_value[2 /* PlotRowValueIndex.Low */ ],\n        close: plotRow._internal_value[3 /* PlotRowValueIndex.Close */ ],\n        time: plotRow._internal_originalTime\n    };\n    if (plotRow._internal_customValues !== undefined) {\n        data.customValues = plotRow._internal_customValues;\n    }\n    return data;\n}\nfunction barData(plotRow) {\n    const result = ohlcData(plotRow);\n    if (plotRow._internal_color !== undefined) {\n        result.color = plotRow._internal_color;\n    }\n    return result;\n}\nfunction candlestickData(plotRow) {\n    const result = ohlcData(plotRow);\n    const { _internal_color: color, _internal_borderColor: borderColor, _internal_wickColor: wickColor } = plotRow;\n    if (color !== undefined) {\n        result.color = color;\n    }\n    if (borderColor !== undefined) {\n        result.borderColor = borderColor;\n    }\n    if (wickColor !== undefined) {\n        result.wickColor = wickColor;\n    }\n    return result;\n}\nfunction getSeriesDataCreator(seriesType) {\n    const seriesPlotRowToDataMap = {\n        Area: areaData,\n        Line: lineData,\n        Baseline: baselineData,\n        Histogram: lineData,\n        Bar: barData,\n        Candlestick: candlestickData,\n        Custom: customData\n    };\n    return seriesPlotRowToDataMap[seriesType];\n}\nfunction customData(plotRow) {\n    const time = plotRow._internal_originalTime;\n    return {\n        ...plotRow._internal_data,\n        time\n    };\n}\nconst crosshairOptionsDefaults = {\n    vertLine: {\n        color: '#9598A1',\n        width: 1,\n        style: 3 /* LineStyle.LargeDashed */ ,\n        visible: true,\n        labelVisible: true,\n        labelBackgroundColor: '#131722'\n    },\n    horzLine: {\n        color: '#9598A1',\n        width: 1,\n        style: 3 /* LineStyle.LargeDashed */ ,\n        visible: true,\n        labelVisible: true,\n        labelBackgroundColor: '#131722'\n    },\n    mode: 1 /* CrosshairMode.Magnet */ \n};\nconst gridOptionsDefaults = {\n    vertLines: {\n        color: '#D6DCDE',\n        style: 0 /* LineStyle.Solid */ ,\n        visible: true\n    },\n    horzLines: {\n        color: '#D6DCDE',\n        style: 0 /* LineStyle.Solid */ ,\n        visible: true\n    }\n};\nconst layoutOptionsDefaults = {\n    background: {\n        type: \"solid\" /* ColorType.Solid */ ,\n        color: '#FFFFFF'\n    },\n    textColor: '#191919',\n    fontSize: 12,\n    fontFamily: defaultFontFamily,\n    panes: {\n        enableResize: true,\n        separatorColor: '#E0E3EB',\n        separatorHoverColor: 'rgba(178, 181, 189, 0.2)'\n    },\n    attributionLogo: true,\n    colorSpace: 'srgb',\n    colorParsers: []\n};\nconst priceScaleOptionsDefaults = {\n    autoScale: true,\n    mode: 0 /* PriceScaleMode.Normal */ ,\n    invertScale: false,\n    alignLabels: true,\n    borderVisible: true,\n    borderColor: '#2B2B43',\n    entireTextOnly: false,\n    visible: false,\n    ticksVisible: false,\n    scaleMargins: {\n        bottom: 0.1,\n        top: 0.2\n    },\n    minimumWidth: 0,\n    ensureEdgeTickMarksVisible: false\n};\nconst timeScaleOptionsDefaults = {\n    rightOffset: 0,\n    barSpacing: 6,\n    minBarSpacing: 0.5,\n    maxBarSpacing: 0,\n    fixLeftEdge: false,\n    fixRightEdge: false,\n    lockVisibleTimeRangeOnResize: false,\n    rightBarStaysOnScroll: false,\n    borderVisible: true,\n    borderColor: '#2B2B43',\n    visible: true,\n    timeVisible: false,\n    secondsVisible: true,\n    shiftVisibleRangeOnNewBar: true,\n    allowShiftVisibleRangeOnWhitespaceReplacement: false,\n    ticksVisible: false,\n    uniformDistribution: false,\n    minimumHeight: 0,\n    allowBoldLabels: true,\n    ignoreWhitespaceIndices: false\n};\nfunction chartOptionsDefaults() {\n    return {\n        width: 0,\n        height: 0,\n        autoSize: false,\n        layout: layoutOptionsDefaults,\n        crosshair: crosshairOptionsDefaults,\n        grid: gridOptionsDefaults,\n        overlayPriceScales: {\n            ...priceScaleOptionsDefaults\n        },\n        leftPriceScale: {\n            ...priceScaleOptionsDefaults,\n            visible: false\n        },\n        rightPriceScale: {\n            ...priceScaleOptionsDefaults,\n            visible: true\n        },\n        timeScale: timeScaleOptionsDefaults,\n        localization: {\n            locale: isRunningOnClientSide ? navigator.language : '',\n            dateFormat: 'dd MMM \\'yy'\n        },\n        handleScroll: {\n            mouseWheel: true,\n            pressedMouseMove: true,\n            horzTouchDrag: true,\n            vertTouchDrag: true\n        },\n        handleScale: {\n            axisPressedMouseMove: {\n                time: true,\n                price: true\n            },\n            axisDoubleClickReset: {\n                time: true,\n                price: true\n            },\n            mouseWheel: true,\n            pinch: true\n        },\n        kineticScroll: {\n            mouse: false,\n            touch: true\n        },\n        trackingMode: {\n            exitMode: 1 /* TrackingModeExitMode.OnNextTap */ \n        }\n    };\n}\nclass PriceScaleApi {\n    applyOptions(options) {\n        this._private__chartWidget._internal_model()._internal_applyPriceScaleOptions(this._private__priceScaleId, options, this._private__paneIndex);\n    }\n    options() {\n        return this._private__priceScale()._internal_options();\n    }\n    width() {\n        if (!isDefaultPriceScale(this._private__priceScaleId)) {\n            return 0;\n        }\n        return this._private__chartWidget._internal_getPriceAxisWidth(this._private__priceScaleId);\n    }\n    setVisibleRange(range) {\n        this.setAutoScale(false);\n        this._private__priceScale()._internal_setCustomPriceRange(new PriceRangeImpl(range.from, range.to));\n    }\n    getVisibleRange() {\n        const range = this._private__priceScale()._internal_priceRange();\n        return range === null ? null : {\n            from: range._internal_minValue(),\n            to: range._internal_maxValue()\n        };\n    }\n    setAutoScale(on) {\n        this.applyOptions({\n            autoScale: on\n        });\n    }\n    _private__priceScale() {\n        return ensureNotNull(this._private__chartWidget._internal_model()._internal_findPriceScale(this._private__priceScaleId, this._private__paneIndex))._internal_priceScale;\n    }\n    constructor(chartWidget, priceScaleId, paneIndex){\n        this._private__chartWidget = chartWidget;\n        this._private__priceScaleId = priceScaleId;\n        this._private__paneIndex = paneIndex !== null && paneIndex !== void 0 ? paneIndex : 0;\n    }\n}\nclass PaneApi {\n    getHeight() {\n        return this._private__pane._internal_height();\n    }\n    setHeight(height) {\n        const chartModel = this._private__chartWidget._internal_model();\n        const paneIndex = chartModel._internal_getPaneIndex(this._private__pane);\n        chartModel._internal_changePanesHeight(paneIndex, height);\n    }\n    paneIndex() {\n        return this._private__chartWidget._internal_model()._internal_getPaneIndex(this._private__pane);\n    }\n    moveTo(paneIndex) {\n        const currentIndex = this.paneIndex();\n        if (currentIndex === paneIndex) {\n            return;\n        }\n        assert(paneIndex >= 0 && paneIndex < this._private__chartWidget._internal_paneWidgets().length, 'Invalid pane index');\n        this._private__chartWidget._internal_model()._internal_swapPanes(currentIndex, paneIndex);\n    }\n    getSeries() {\n        var _this__private__pane__internal_series_map;\n        return (_this__private__pane__internal_series_map = this._private__pane._internal_series().map((source)=>this._private__seriesApiGetter(source))) !== null && _this__private__pane__internal_series_map !== void 0 ? _this__private__pane__internal_series_map : [];\n    }\n    getHTMLElement() {\n        return this._private__chartWidget._internal_paneWidgets()[this.paneIndex()]._internal_getElement();\n    }\n    attachPrimitive(primitive) {\n        this._private__pane._internal_attachPrimitive(primitive);\n        if (primitive.attached) {\n            primitive.attached({\n                chart: this._internal__chartApi,\n                requestUpdate: ()=>this._private__pane._internal_model()._internal_fullUpdate()\n            });\n        }\n    }\n    detachPrimitive(primitive) {\n        this._private__pane._internal_detachPrimitive(primitive);\n    }\n    priceScale(priceScaleId) {\n        const priceScale = this._private__pane._internal_priceScaleById(priceScaleId);\n        if (priceScale === null) {\n            throw new Error(\"Cannot find price scale with id: \".concat(priceScaleId));\n        }\n        return new PriceScaleApi(this._private__chartWidget, priceScaleId, this.paneIndex());\n    }\n    constructor(chartWidget, seriesApiGetter, pane, chartApi){\n        this._private__chartWidget = chartWidget;\n        this._private__pane = pane;\n        this._private__seriesApiGetter = seriesApiGetter;\n        this._internal__chartApi = chartApi;\n    }\n}\n/// <reference types=\"_build-time-constants\" />\nfunction checkPriceLineOptions(options) {\n    assert(typeof options.price === 'number', \"the type of 'price' price line's property must be a number, got '\".concat(typeof options.price, \"'\"));\n}\nfunction checkItemsAreOrdered(data, bh) {\n    let allowDuplicates = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    if (data.length === 0) {\n        return;\n    }\n    let prevTime = bh.key(data[0].time);\n    for(let i = 1; i < data.length; ++i){\n        const currentTime = bh.key(data[i].time);\n        const checkResult = allowDuplicates ? prevTime <= currentTime : prevTime < currentTime;\n        assert(checkResult, \"data must be asc ordered by time, index=\".concat(i, \", time=\").concat(currentTime, \", prev time=\").concat(prevTime));\n        prevTime = currentTime;\n    }\n}\nfunction checkSeriesValuesType(type, data) {\n    data.forEach(getChecker(type));\n}\nfunction getChecker(type) {\n    switch(type){\n        case 'Bar':\n        case 'Candlestick':\n            return checkBarItem.bind(null, type);\n        case 'Area':\n        case 'Baseline':\n        case 'Line':\n        case 'Histogram':\n            return checkLineItem.bind(null, type);\n        case 'Custom':\n            return checkCustomItem.bind(null);\n    }\n}\nfunction checkBarItem(type, barItem) {\n    if (!isFulfilledData(barItem)) {\n        return;\n    }\n    [\n        'open',\n        'high',\n        'low',\n        'close'\n    ].forEach((key)=>{\n        assert(typeof barItem[key] === 'number', \"\".concat(type, \" series item data value of \").concat(key, \" must be a number, got=\").concat(typeof barItem[key], \", value=\").concat(barItem[key]));\n        assert(isSafeValue(barItem[key]), \"\".concat(type, \" series item data value of \").concat(key, \" must be between \").concat(MIN_SAFE_VALUE.toPrecision(16), \" and \").concat(MAX_SAFE_VALUE.toPrecision(16), \", got=\").concat(typeof barItem[key], \", value=\").concat(barItem[key]));\n    });\n}\nfunction checkLineItem(type, lineItem) {\n    if (!isFulfilledData(lineItem)) {\n        return;\n    }\n    assert(typeof lineItem.value === 'number', \"\".concat(type, \" series item data value must be a number, got=\").concat(typeof lineItem.value, \", value=\").concat(lineItem.value));\n    assert(isSafeValue(lineItem.value), \"\".concat(type, \" series item data value must be between \").concat(MIN_SAFE_VALUE.toPrecision(16), \" and \").concat(MAX_SAFE_VALUE.toPrecision(16), \", got=\").concat(typeof lineItem.value, \", value=\").concat(lineItem.value));\n}\nfunction checkCustomItem() {\n    // Nothing to check yet...\n    return;\n}\nconst MIN_SAFE_VALUE = Number.MIN_SAFE_INTEGER / 100;\nconst MAX_SAFE_VALUE = Number.MAX_SAFE_INTEGER / 100;\nfunction isSafeValue(value) {\n    return value >= MIN_SAFE_VALUE && value <= MAX_SAFE_VALUE;\n}\nconst priceLineOptionsDefaults = {\n    color: '#FF0000',\n    price: 0,\n    lineStyle: 2 /* LineStyle.Dashed */ ,\n    lineWidth: 1,\n    lineVisible: true,\n    axisLabelVisible: true,\n    title: '',\n    axisLabelColor: '',\n    axisLabelTextColor: ''\n};\nclass PriceLine {\n    applyOptions(options) {\n        this._private__priceLine._internal_applyOptions(options);\n    }\n    options() {\n        return this._private__priceLine._internal_options();\n    }\n    _internal_priceLine() {\n        return this._private__priceLine;\n    }\n    constructor(priceLine){\n        this._private__priceLine = priceLine;\n    }\n}\nclass SeriesApi {\n    _internal_destroy() {\n        this._private__dataChangedDelegate._internal_destroy();\n    }\n    priceFormatter() {\n        return this._internal__series._internal_formatter();\n    }\n    priceToCoordinate(price) {\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return null;\n        }\n        return this._internal__series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);\n    }\n    coordinateToPrice(coordinate) {\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return null;\n        }\n        return this._internal__series._internal_priceScale()._internal_coordinateToPrice(coordinate, firstValue._internal_value);\n    }\n    barsInLogicalRange(range) {\n        if (range === null) {\n            return null;\n        }\n        // we use TimeScaleVisibleRange here to convert LogicalRange to strict range properly\n        const correctedRange = new TimeScaleVisibleRange(new RangeImpl(range.from, range.to))._internal_strictRange();\n        const bars = this._internal__series._internal_bars();\n        if (bars._internal_isEmpty()) {\n            return null;\n        }\n        const dataFirstBarInRange = bars._internal_search(correctedRange._internal_left(), 1 /* MismatchDirection.NearestRight */ );\n        const dataLastBarInRange = bars._internal_search(correctedRange._internal_right(), -1 /* MismatchDirection.NearestLeft */ );\n        const dataFirstIndex = ensureNotNull(bars._internal_firstIndex());\n        const dataLastIndex = ensureNotNull(bars._internal_lastIndex());\n        // this means that we request data in the data gap\n        // e.g. let's say we have series with data [0..10, 30..60]\n        // and we request bars info in range [15, 25]\n        // thus, dataFirstBarInRange will be with index 30 and dataLastBarInRange with 10\n        if (dataFirstBarInRange !== null && dataLastBarInRange !== null && dataFirstBarInRange._internal_index > dataLastBarInRange._internal_index) {\n            return {\n                barsBefore: range.from - dataFirstIndex,\n                barsAfter: dataLastIndex - range.to\n            };\n        }\n        const barsBefore = dataFirstBarInRange === null || dataFirstBarInRange._internal_index === dataFirstIndex ? range.from - dataFirstIndex : dataFirstBarInRange._internal_index - dataFirstIndex;\n        const barsAfter = dataLastBarInRange === null || dataLastBarInRange._internal_index === dataLastIndex ? dataLastIndex - range.to : dataLastIndex - dataLastBarInRange._internal_index;\n        const result = {\n            barsBefore,\n            barsAfter\n        };\n        // actually they can't exist separately\n        if (dataFirstBarInRange !== null && dataLastBarInRange !== null) {\n            result.from = dataFirstBarInRange._internal_originalTime;\n            result.to = dataLastBarInRange._internal_originalTime;\n        }\n        return result;\n    }\n    setData(data) {\n        checkItemsAreOrdered(data, this._private__horzScaleBehavior);\n        checkSeriesValuesType(this._internal__series._internal_seriesType(), data);\n        this._internal__dataUpdatesConsumer._internal_applyNewData(this._internal__series, data);\n        this._private__onDataChanged('full');\n    }\n    update(bar) {\n        let historicalUpdate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        checkSeriesValuesType(this._internal__series._internal_seriesType(), [\n            bar\n        ]);\n        this._internal__dataUpdatesConsumer._internal_updateData(this._internal__series, bar, historicalUpdate);\n        this._private__onDataChanged('update');\n    }\n    dataByIndex(logicalIndex, mismatchDirection) {\n        const data = this._internal__series._internal_bars()._internal_search(logicalIndex, mismatchDirection);\n        if (data === null) {\n            // actually it can be a whitespace\n            return null;\n        }\n        const creator = getSeriesDataCreator(this.seriesType());\n        return creator(data);\n    }\n    data() {\n        const seriesCreator = getSeriesDataCreator(this.seriesType());\n        const rows = this._internal__series._internal_bars()._internal_rows();\n        return rows.map((row)=>seriesCreator(row));\n    }\n    subscribeDataChanged(handler) {\n        this._private__dataChangedDelegate._internal_subscribe(handler);\n    }\n    unsubscribeDataChanged(handler) {\n        this._private__dataChangedDelegate._internal_unsubscribe(handler);\n    }\n    applyOptions(options) {\n        this._internal__series._internal_applyOptions(options);\n    }\n    options() {\n        return clone(this._internal__series._internal_options());\n    }\n    priceScale() {\n        return this._private__priceScaleApiProvider.priceScale(this._internal__series._internal_priceScale()._internal_id(), this.getPane().paneIndex());\n    }\n    createPriceLine(options) {\n        checkPriceLineOptions(options);\n        const strictOptions = merge(clone(priceLineOptionsDefaults), options);\n        const priceLine = this._internal__series._internal_createPriceLine(strictOptions);\n        return new PriceLine(priceLine);\n    }\n    removePriceLine(line) {\n        this._internal__series._internal_removePriceLine(line._internal_priceLine());\n    }\n    priceLines() {\n        return this._internal__series._internal_priceLines().map((priceLine)=>new PriceLine(priceLine));\n    }\n    seriesType() {\n        return this._internal__series._internal_seriesType();\n    }\n    attachPrimitive(primitive) {\n        // at this point we cast the generic to unknown because we\n        // don't want the model to know the types of the API (◑_◑)\n        this._internal__series._internal_attachPrimitive(primitive);\n        if (primitive.attached) {\n            primitive.attached({\n                chart: this._internal__chartApi,\n                series: this,\n                requestUpdate: ()=>this._internal__series._internal_model()._internal_fullUpdate(),\n                horzScaleBehavior: this._private__horzScaleBehavior\n            });\n        }\n    }\n    detachPrimitive(primitive) {\n        this._internal__series._internal_detachPrimitive(primitive);\n        if (primitive.detached) {\n            primitive.detached();\n        }\n        this._internal__series._internal_model()._internal_fullUpdate();\n    }\n    getPane() {\n        const series = this._internal__series;\n        const pane = ensureNotNull(this._internal__series._internal_model()._internal_paneForSource(series));\n        return this._private__paneApiGetter(pane);\n    }\n    moveToPane(paneIndex) {\n        this._internal__series._internal_model()._internal_moveSeriesToPane(this._internal__series, paneIndex);\n    }\n    seriesOrder() {\n        const pane = this._internal__series._internal_model()._internal_paneForSource(this._internal__series);\n        if (pane === null) {\n            return -1;\n        }\n        return pane._internal_series().indexOf(this._internal__series);\n    }\n    setSeriesOrder(order) {\n        const pane = this._internal__series._internal_model()._internal_paneForSource(this._internal__series);\n        if (pane === null) {\n            return;\n        }\n        pane._internal_setSeriesOrder(this._internal__series, order);\n    }\n    _private__onDataChanged(scope) {\n        if (this._private__dataChangedDelegate._internal_hasListeners()) {\n            this._private__dataChangedDelegate._internal_fire(scope);\n        }\n    }\n    constructor(series, dataUpdatesConsumer, priceScaleApiProvider, chartApi, horzScaleBehavior, paneApiGetter){\n        this._private__dataChangedDelegate = new Delegate();\n        this._internal__series = series;\n        this._internal__dataUpdatesConsumer = dataUpdatesConsumer;\n        this._private__priceScaleApiProvider = priceScaleApiProvider;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._internal__chartApi = chartApi;\n        this._private__paneApiGetter = paneApiGetter;\n    }\n}\nclass TimeScaleApi {\n    _internal_destroy() {\n        this._private__timeScale._internal_visibleBarsChanged()._internal_unsubscribeAll(this);\n        this._private__timeScale._internal_logicalRangeChanged()._internal_unsubscribeAll(this);\n        this._private__timeAxisWidget._internal_sizeChanged()._internal_unsubscribeAll(this);\n        this._private__timeRangeChanged._internal_destroy();\n        this._private__logicalRangeChanged._internal_destroy();\n        this._private__sizeChanged._internal_destroy();\n    }\n    scrollPosition() {\n        return this._private__timeScale._internal_rightOffset();\n    }\n    scrollToPosition(position, animated) {\n        if (!animated) {\n            this._private__model._internal_setRightOffset(position);\n            return;\n        }\n        this._private__timeScale._internal_scrollToOffsetAnimated(position, 1000 /* Constants.AnimationDurationMs */ );\n    }\n    scrollToRealTime() {\n        this._private__timeScale._internal_scrollToRealTime();\n    }\n    getVisibleRange() {\n        const timeRange = this._private__timeScale._internal_visibleTimeRange();\n        if (timeRange === null) {\n            return null;\n        }\n        return {\n            from: timeRange.from.originalTime,\n            to: timeRange.to.originalTime\n        };\n    }\n    setVisibleRange(range) {\n        const convertedRange = {\n            from: this._private__horzScaleBehavior.convertHorzItemToInternal(range.from),\n            to: this._private__horzScaleBehavior.convertHorzItemToInternal(range.to)\n        };\n        const logicalRange = this._private__timeScale._internal_logicalRangeForTimeRange(convertedRange);\n        this._private__model._internal_setTargetLogicalRange(logicalRange);\n    }\n    getVisibleLogicalRange() {\n        const logicalRange = this._private__timeScale._internal_visibleLogicalRange();\n        if (logicalRange === null) {\n            return null;\n        }\n        return {\n            from: logicalRange._internal_left(),\n            to: logicalRange._internal_right()\n        };\n    }\n    setVisibleLogicalRange(range) {\n        assert(range.from <= range.to, 'The from index cannot be after the to index.');\n        this._private__model._internal_setTargetLogicalRange(range);\n    }\n    resetTimeScale() {\n        this._private__model._internal_resetTimeScale();\n    }\n    fitContent() {\n        this._private__model._internal_fitContent();\n    }\n    logicalToCoordinate(logical) {\n        const timeScale = this._private__model._internal_timeScale();\n        if (timeScale._internal_isEmpty()) {\n            return null;\n        } else {\n            return timeScale._internal_indexToCoordinate(logical);\n        }\n    }\n    coordinateToLogical(x) {\n        if (this._private__timeScale._internal_isEmpty()) {\n            return null;\n        } else {\n            return this._private__timeScale._internal_coordinateToIndex(x);\n        }\n    }\n    timeToIndex(time, findNearest) {\n        const timePoint = this._private__horzScaleBehavior.convertHorzItemToInternal(time);\n        return this._private__timeScale._internal_timeToIndex(timePoint, findNearest);\n    }\n    timeToCoordinate(time) {\n        const timePointIndex = this.timeToIndex(time, false);\n        if (timePointIndex === null) {\n            return null;\n        }\n        return this._private__timeScale._internal_indexToCoordinate(timePointIndex);\n    }\n    coordinateToTime(x) {\n        const timeScale = this._private__model._internal_timeScale();\n        const timePointIndex = timeScale._internal_coordinateToIndex(x);\n        const timePoint = timeScale._internal_indexToTimeScalePoint(timePointIndex);\n        if (timePoint === null) {\n            return null;\n        }\n        return timePoint.originalTime;\n    }\n    width() {\n        return this._private__timeAxisWidget._internal_getSize().width;\n    }\n    height() {\n        return this._private__timeAxisWidget._internal_getSize().height;\n    }\n    subscribeVisibleTimeRangeChange(handler) {\n        this._private__timeRangeChanged._internal_subscribe(handler);\n    }\n    unsubscribeVisibleTimeRangeChange(handler) {\n        this._private__timeRangeChanged._internal_unsubscribe(handler);\n    }\n    subscribeVisibleLogicalRangeChange(handler) {\n        this._private__logicalRangeChanged._internal_subscribe(handler);\n    }\n    unsubscribeVisibleLogicalRangeChange(handler) {\n        this._private__logicalRangeChanged._internal_unsubscribe(handler);\n    }\n    subscribeSizeChange(handler) {\n        this._private__sizeChanged._internal_subscribe(handler);\n    }\n    unsubscribeSizeChange(handler) {\n        this._private__sizeChanged._internal_unsubscribe(handler);\n    }\n    applyOptions(options) {\n        this._private__timeScale._internal_applyOptions(options);\n    }\n    options() {\n        return {\n            ...clone(this._private__timeScale._internal_options()),\n            barSpacing: this._private__timeScale._internal_barSpacing()\n        };\n    }\n    _private__onVisibleBarsChanged() {\n        if (this._private__timeRangeChanged._internal_hasListeners()) {\n            this._private__timeRangeChanged._internal_fire(this.getVisibleRange());\n        }\n    }\n    _private__onVisibleLogicalRangeChanged() {\n        if (this._private__logicalRangeChanged._internal_hasListeners()) {\n            this._private__logicalRangeChanged._internal_fire(this.getVisibleLogicalRange());\n        }\n    }\n    _private__onSizeChanged(size) {\n        this._private__sizeChanged._internal_fire(size.width, size.height);\n    }\n    constructor(model, timeAxisWidget, horzScaleBehavior){\n        this._private__timeRangeChanged = new Delegate();\n        this._private__logicalRangeChanged = new Delegate();\n        this._private__sizeChanged = new Delegate();\n        this._private__model = model;\n        this._private__timeScale = model._internal_timeScale();\n        this._private__timeAxisWidget = timeAxisWidget;\n        this._private__timeScale._internal_visibleBarsChanged()._internal_subscribe(this._private__onVisibleBarsChanged.bind(this));\n        this._private__timeScale._internal_logicalRangeChanged()._internal_subscribe(this._private__onVisibleLogicalRangeChanged.bind(this));\n        this._private__timeAxisWidget._internal_sizeChanged()._internal_subscribe(this._private__onSizeChanged.bind(this));\n        this._private__horzScaleBehavior = horzScaleBehavior;\n    }\n}\n/// <reference types=\"_build-time-constants\" />\nfunction patchPriceFormat(priceFormat) {\n    if (priceFormat === undefined || priceFormat.type === 'custom') {\n        return;\n    }\n    const priceFormatBuiltIn = priceFormat;\n    if (priceFormatBuiltIn.minMove !== undefined && priceFormatBuiltIn.precision === undefined) {\n        priceFormatBuiltIn.precision = precisionByMinMove(priceFormatBuiltIn.minMove);\n    }\n}\nfunction migrateHandleScaleScrollOptions(options) {\n    if (isBoolean(options['handleScale'])) {\n        const handleScale = options['handleScale'];\n        options['handleScale'] = {\n            axisDoubleClickReset: {\n                time: handleScale,\n                price: handleScale\n            },\n            axisPressedMouseMove: {\n                time: handleScale,\n                price: handleScale\n            },\n            mouseWheel: handleScale,\n            pinch: handleScale\n        };\n    } else if (options['handleScale'] !== undefined) {\n        const { axisPressedMouseMove, axisDoubleClickReset } = options['handleScale'];\n        if (isBoolean(axisPressedMouseMove)) {\n            options['handleScale'].axisPressedMouseMove = {\n                time: axisPressedMouseMove,\n                price: axisPressedMouseMove\n            };\n        }\n        if (isBoolean(axisDoubleClickReset)) {\n            options['handleScale'].axisDoubleClickReset = {\n                time: axisDoubleClickReset,\n                price: axisDoubleClickReset\n            };\n        }\n    }\n    const handleScroll = options['handleScroll'];\n    if (isBoolean(handleScroll)) {\n        options['handleScroll'] = {\n            horzTouchDrag: handleScroll,\n            vertTouchDrag: handleScroll,\n            mouseWheel: handleScroll,\n            pressedMouseMove: handleScroll\n        };\n    }\n}\nfunction toInternalOptions(options) {\n    migrateHandleScaleScrollOptions(options);\n    return options;\n}\nclass ChartApi {\n    remove() {\n        this._private__chartWidget._internal_clicked()._internal_unsubscribeAll(this);\n        this._private__chartWidget._internal_dblClicked()._internal_unsubscribeAll(this);\n        this._private__chartWidget._internal_crosshairMoved()._internal_unsubscribeAll(this);\n        this._private__timeScaleApi._internal_destroy();\n        this._private__chartWidget._internal_destroy();\n        this._private__seriesMap.clear();\n        this._private__seriesMapReversed.clear();\n        this._private__clickedDelegate._internal_destroy();\n        this._private__dblClickedDelegate._internal_destroy();\n        this._private__crosshairMovedDelegate._internal_destroy();\n        this._private__dataLayer._internal_destroy();\n    }\n    resize(width, height, forceRepaint) {\n        if (this.autoSizeActive()) {\n            // We return early here instead of checking this within the actual _chartWidget.resize method\n            // because this should only apply to external resize requests.\n            warn(\"Height and width values ignored because 'autoSize' option is enabled.\");\n            return;\n        }\n        this._private__chartWidget._internal_resize(width, height, forceRepaint);\n    }\n    addCustomSeries(customPaneView) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, paneIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        const paneView = ensure(customPaneView);\n        const definition = createCustomSeriesDefinition(paneView);\n        return this._private__addSeriesImpl(definition, options, paneIndex);\n    }\n    addSeries(definition) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, paneIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        return this._private__addSeriesImpl(definition, options, paneIndex);\n    }\n    removeSeries(seriesApi) {\n        const series = ensureDefined(this._private__seriesMap.get(seriesApi));\n        const update = this._private__dataLayer._internal_removeSeries(series);\n        const model = this._private__chartWidget._internal_model();\n        model._internal_removeSeries(series);\n        this._private__sendUpdateToChart(update);\n        this._private__seriesMap.delete(seriesApi);\n        this._private__seriesMapReversed.delete(series);\n    }\n    _internal_applyNewData(series, data) {\n        this._private__sendUpdateToChart(this._private__dataLayer._internal_setSeriesData(series, data));\n    }\n    _internal_updateData(series, data, historicalUpdate) {\n        this._private__sendUpdateToChart(this._private__dataLayer._internal_updateSeriesData(series, data, historicalUpdate));\n    }\n    subscribeClick(handler) {\n        this._private__clickedDelegate._internal_subscribe(handler);\n    }\n    unsubscribeClick(handler) {\n        this._private__clickedDelegate._internal_unsubscribe(handler);\n    }\n    subscribeCrosshairMove(handler) {\n        this._private__crosshairMovedDelegate._internal_subscribe(handler);\n    }\n    unsubscribeCrosshairMove(handler) {\n        this._private__crosshairMovedDelegate._internal_unsubscribe(handler);\n    }\n    subscribeDblClick(handler) {\n        this._private__dblClickedDelegate._internal_subscribe(handler);\n    }\n    unsubscribeDblClick(handler) {\n        this._private__dblClickedDelegate._internal_unsubscribe(handler);\n    }\n    priceScale(priceScaleId) {\n        let paneIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        return new PriceScaleApi(this._private__chartWidget, priceScaleId, paneIndex);\n    }\n    timeScale() {\n        return this._private__timeScaleApi;\n    }\n    applyOptions(options) {\n        {\n            var _options_layout, _options_layout1;\n            const colorSpace = (_options_layout = options.layout) === null || _options_layout === void 0 ? void 0 : _options_layout.colorSpace;\n            if (colorSpace !== undefined && colorSpace !== this.options().layout.colorSpace) {\n                throw new Error(\"colorSpace option should not be changed once the chart has been created.\");\n            }\n            const colorParsers = (_options_layout1 = options.layout) === null || _options_layout1 === void 0 ? void 0 : _options_layout1.colorParsers;\n            if (colorParsers !== undefined && colorParsers !== this.options().layout.colorParsers) {\n                throw new Error(\"colorParsers option should not be changed once the chart has been created.\");\n            }\n        }\n        this._private__chartWidget._internal_applyOptions(toInternalOptions(options));\n    }\n    options() {\n        return this._private__chartWidget._internal_options();\n    }\n    takeScreenshot() {\n        return this._private__chartWidget._internal_takeScreenshot();\n    }\n    removePane(index) {\n        this._private__chartWidget._internal_model()._internal_removePane(index);\n    }\n    swapPanes(first, second) {\n        this._private__chartWidget._internal_model()._internal_swapPanes(first, second);\n    }\n    autoSizeActive() {\n        return this._private__chartWidget._internal_autoSizeActive();\n    }\n    chartElement() {\n        return this._private__chartWidget._internal_element();\n    }\n    panes() {\n        return this._private__chartWidget._internal_model()._internal_panes().map((pane)=>this._private__getPaneApi(pane));\n    }\n    paneSize() {\n        let paneIndex = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        const size = this._private__chartWidget._internal_paneSize(paneIndex);\n        return {\n            height: size.height,\n            width: size.width\n        };\n    }\n    setCrosshairPosition(price, horizontalPosition, seriesApi) {\n        const series = this._private__seriesMap.get(seriesApi);\n        if (series === undefined) {\n            return;\n        }\n        const pane = this._private__chartWidget._internal_model()._internal_paneForSource(series);\n        if (pane === null) {\n            return;\n        }\n        this._private__chartWidget._internal_model()._internal_setAndSaveSyntheticPosition(price, horizontalPosition, pane);\n    }\n    clearCrosshairPosition() {\n        this._private__chartWidget._internal_model()._internal_clearCurrentPosition(true);\n    }\n    horzBehaviour() {\n        return this._internal__horzScaleBehavior;\n    }\n    _private__addSeriesImpl(definition) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, paneIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        assert(isSeriesDefinition(definition));\n        patchPriceFormat(options.priceFormat);\n        if (definition.type === 'Candlestick') {\n            fillUpDownCandlesticksColors(options);\n        }\n        const strictOptions = merge(clone(seriesOptionsDefaults), clone(definition.defaultOptions), options);\n        const createPaneView = definition._internal_createPaneView;\n        const series = new Series(this._private__chartWidget._internal_model(), definition.type, strictOptions, createPaneView, definition._internal_customPaneView);\n        this._private__chartWidget._internal_model()._internal_addSeriesToPane(series, paneIndex);\n        const res = new SeriesApi(series, this, this, this, this._internal__horzScaleBehavior, (pane)=>this._private__getPaneApi(pane));\n        this._private__seriesMap.set(res, series);\n        this._private__seriesMapReversed.set(series, res);\n        return res;\n    }\n    _private__sendUpdateToChart(update) {\n        const model = this._private__chartWidget._internal_model();\n        model._internal_updateTimeScale(update._internal_timeScale._internal_baseIndex, update._internal_timeScale._internal_points, update._internal_timeScale._internal_firstChangedPointIndex);\n        update._internal_series.forEach((value, series)=>series._internal_setData(value._internal_data, value._internal_info));\n        model._internal_timeScale()._internal_recalculateIndicesWithData();\n        model._internal_recalculateAllPanes();\n    }\n    _private__mapSeriesToApi(series) {\n        return ensureDefined(this._private__seriesMapReversed.get(series));\n    }\n    _private__convertMouseParams(param) {\n        const seriesData = new Map();\n        param._internal_seriesData.forEach((plotRow, series)=>{\n            const seriesType = series._internal_seriesType();\n            const data = getSeriesDataCreator(seriesType)(plotRow);\n            if (seriesType !== 'Custom') {\n                assert(isFulfilledData(data));\n            } else {\n                const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\n                assert(!customWhitespaceChecker || customWhitespaceChecker(data) === false);\n            }\n            seriesData.set(this._private__mapSeriesToApi(series), data);\n        });\n        const hoveredSeries = param._internal_hoveredSeries === undefined || !this._private__seriesMapReversed.has(param._internal_hoveredSeries) ? undefined : this._private__mapSeriesToApi(param._internal_hoveredSeries);\n        return {\n            time: param._internal_originalTime,\n            logical: param._internal_index,\n            point: param._internal_point,\n            paneIndex: param._internal_paneIndex,\n            hoveredSeries,\n            hoveredObjectId: param._internal_hoveredObject,\n            seriesData,\n            sourceEvent: param._internal_touchMouseEventData\n        };\n    }\n    _private__getPaneApi(pane) {\n        let result = this._private__panes.get(pane);\n        if (!result) {\n            result = new PaneApi(this._private__chartWidget, (series)=>this._private__mapSeriesToApi(series), pane, this);\n            this._private__panes.set(pane, result);\n        }\n        return result;\n    }\n    constructor(container, horzScaleBehavior, options){\n        this._private__seriesMap = new Map();\n        this._private__seriesMapReversed = new Map();\n        this._private__clickedDelegate = new Delegate();\n        this._private__dblClickedDelegate = new Delegate();\n        this._private__crosshairMovedDelegate = new Delegate();\n        this._private__panes = new WeakMap();\n        this._private__dataLayer = new DataLayer(horzScaleBehavior);\n        const internalOptions = options === undefined ? clone(chartOptionsDefaults()) : merge(clone(chartOptionsDefaults()), toInternalOptions(options));\n        this._internal__horzScaleBehavior = horzScaleBehavior;\n        this._private__chartWidget = new ChartWidget(container, internalOptions, horzScaleBehavior);\n        this._private__chartWidget._internal_clicked()._internal_subscribe((paramSupplier)=>{\n            if (this._private__clickedDelegate._internal_hasListeners()) {\n                this._private__clickedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\n            }\n        }, this);\n        this._private__chartWidget._internal_dblClicked()._internal_subscribe((paramSupplier)=>{\n            if (this._private__dblClickedDelegate._internal_hasListeners()) {\n                this._private__dblClickedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\n            }\n        }, this);\n        this._private__chartWidget._internal_crosshairMoved()._internal_subscribe((paramSupplier)=>{\n            if (this._private__crosshairMovedDelegate._internal_hasListeners()) {\n                this._private__crosshairMovedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\n            }\n        }, this);\n        const model = this._private__chartWidget._internal_model();\n        this._private__timeScaleApi = new TimeScaleApi(model, this._private__chartWidget._internal_timeAxisWidget(), this._internal__horzScaleBehavior);\n    }\n}\nfunction fetchHtmlElement(container) {\n    if (isString(container)) {\n        const element = document.getElementById(container);\n        assert(element !== null, \"Cannot find element in DOM with id=\".concat(container));\n        return element;\n    }\n    return container;\n}\n/**\n * This function is the main entry point of the Lightweight Charting Library. If you are using time values\n * for the horizontal scale then it is recommended that you rather use the {@link createChart} function.\n *\n * @template HorzScaleItem - type of points on the horizontal scale\n * @template THorzScaleBehavior - type of horizontal axis strategy that encapsulate all the specific behaviors of the horizontal scale type\n *\n * @param container - ID of HTML element or element itself\n * @param horzScaleBehavior - Horizontal scale behavior\n * @param options - Any subset of options to be applied at start.\n * @returns An interface to the created chart\n */ function createChartEx(container, horzScaleBehavior, options) {\n    const htmlElement = fetchHtmlElement(container);\n    const res = new ChartApi(htmlElement, horzScaleBehavior, options);\n    horzScaleBehavior.setOptions(res.options());\n    return res;\n}\n/**\n * This function is the simplified main entry point of the Lightweight Charting Library with time points for the horizontal scale.\n *\n * @param container - ID of HTML element or element itself\n * @param options - Any subset of options to be applied at start.\n * @returns An interface to the created chart\n */ function createChart(container, options) {\n    return createChartEx(container, new HorzScaleBehaviorTime(), HorzScaleBehaviorTime._internal_applyDefaults(options));\n}\n/**\n * Provides the default implementation of the horizontal scale (time-based) that can be used as a base for extending the horizontal scale with custom behavior.\n * This allows for the introduction of custom functionality without re-implementing the entire {@link IHorzScaleBehavior}&lt;{@link Time}&gt; interface.\n *\n * For further details, refer to the {@link createChartEx} chart constructor method.\n *\n * @returns An uninitialized class implementing the {@link IHorzScaleBehavior}&lt;{@link Time}&gt; interface\n */ function defaultHorzScaleBehavior() {\n    return HorzScaleBehaviorTime;\n}\nclass LinePaneViewBase extends SeriesPaneViewBase {\n    _internal__convertToCoordinates(priceScale, timeScale, firstValue) {\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\n        priceScale._internal_pointsArrayToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));\n    }\n    _internal__createRawItemBase(time, price) {\n        return {\n            _internal_time: time,\n            _internal_price: price,\n            _internal_x: NaN,\n            _internal_y: NaN\n        };\n    }\n    _internal__fillRawPoints() {\n        const colorer = this._internal__series._internal_barColorer();\n        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row)=>{\n            const value = row._internal_value[3 /* PlotRowValueIndex.Close */ ];\n            return this._internal__createRawItem(row._internal_index, value, colorer);\n        });\n    }\n    constructor(series, model){\n        super(series, model, true);\n    }\n}\nfunction drawSeriesPointMarkers(renderingScope, items, pointMarkersRadius, visibleRange, // the values returned by styleGetter are compared using the operator !==,\n// so if styleGetter returns objects, then styleGetter should return the same object for equal styles\nstyleGetter) {\n    if (visibleRange.to - visibleRange.from <= 0) {\n        return;\n    }\n    const { horizontalPixelRatio, verticalPixelRatio, context } = renderingScope;\n    let prevStyle = null;\n    const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n    const correction = tickWidth % 2 / 2;\n    const radius = pointMarkersRadius * verticalPixelRatio + correction;\n    for(let i = visibleRange.to - 1; i >= visibleRange.from; --i){\n        const point = items[i];\n        if (point) {\n            const style = styleGetter(renderingScope, point);\n            if (style !== prevStyle) {\n                context.beginPath();\n                if (prevStyle !== null) {\n                    context.fill();\n                }\n                context.fillStyle = style;\n                prevStyle = style;\n            }\n            const centerX = Math.round(point._internal_x * horizontalPixelRatio) + correction; // correct x coordinate only\n            const centerY = point._internal_y * verticalPixelRatio;\n            context.moveTo(centerX, centerY);\n            context.arc(centerX, centerY, radius, 0, Math.PI * 2);\n        }\n    }\n    context.fill();\n}\n// eslint-disable-next-line max-params, complexity\nfunction walkLine(renderingScope, items, lineType, visibleRange, barWidth, // the values returned by styleGetter are compared using the operator !==,\n// so if styleGetter returns objects, then styleGetter should return the same object for equal styles\nstyleGetter, finishStyledArea) {\n    if (items.length === 0 || visibleRange.from >= items.length || visibleRange.to <= 0) {\n        return;\n    }\n    const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\n    const firstItem = items[visibleRange.from];\n    let currentStyle = styleGetter(renderingScope, firstItem);\n    let currentStyleFirstItem = firstItem;\n    if (visibleRange.to - visibleRange.from < 2) {\n        const halfBarWidth = barWidth / 2;\n        ctx.beginPath();\n        const item1 = {\n            _internal_x: firstItem._internal_x - halfBarWidth,\n            _internal_y: firstItem._internal_y\n        };\n        const item2 = {\n            _internal_x: firstItem._internal_x + halfBarWidth,\n            _internal_y: firstItem._internal_y\n        };\n        ctx.moveTo(item1._internal_x * horizontalPixelRatio, item1._internal_y * verticalPixelRatio);\n        ctx.lineTo(item2._internal_x * horizontalPixelRatio, item2._internal_y * verticalPixelRatio);\n        finishStyledArea(renderingScope, currentStyle, item1, item2);\n    } else {\n        const changeStyle = (newStyle, currentItem)=>{\n            finishStyledArea(renderingScope, currentStyle, currentStyleFirstItem, currentItem);\n            ctx.beginPath();\n            currentStyle = newStyle;\n            currentStyleFirstItem = currentItem;\n        };\n        let currentItem = currentStyleFirstItem;\n        ctx.beginPath();\n        ctx.moveTo(firstItem._internal_x * horizontalPixelRatio, firstItem._internal_y * verticalPixelRatio);\n        for(let i = visibleRange.from + 1; i < visibleRange.to; ++i){\n            currentItem = items[i];\n            const itemStyle = styleGetter(renderingScope, currentItem);\n            switch(lineType){\n                case 0 /* LineType.Simple */ :\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\n                    break;\n                case 1 /* LineType.WithSteps */ :\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, items[i - 1]._internal_y * verticalPixelRatio);\n                    if (itemStyle !== currentStyle) {\n                        changeStyle(itemStyle, currentItem);\n                        ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, items[i - 1]._internal_y * verticalPixelRatio);\n                    }\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\n                    break;\n                case 2 /* LineType.Curved */ :\n                    {\n                        const [cp1, cp2] = getControlPoints(items, i - 1, i);\n                        ctx.bezierCurveTo(cp1._internal_x * horizontalPixelRatio, cp1._internal_y * verticalPixelRatio, cp2._internal_x * horizontalPixelRatio, cp2._internal_y * verticalPixelRatio, currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\n                        break;\n                    }\n            }\n            if (lineType !== 1 /* LineType.WithSteps */  && itemStyle !== currentStyle) {\n                changeStyle(itemStyle, currentItem);\n                ctx.moveTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\n            }\n        }\n        if (currentStyleFirstItem !== currentItem || currentStyleFirstItem === currentItem && lineType === 1 /* LineType.WithSteps */ ) {\n            finishStyledArea(renderingScope, currentStyle, currentStyleFirstItem, currentItem);\n        }\n    }\n}\nconst curveTension = 6;\nfunction subtract(p1, p2) {\n    return {\n        _internal_x: p1._internal_x - p2._internal_x,\n        _internal_y: p1._internal_y - p2._internal_y\n    };\n}\nfunction add(p1, p2) {\n    return {\n        _internal_x: p1._internal_x + p2._internal_x,\n        _internal_y: p1._internal_y + p2._internal_y\n    };\n}\nfunction divide(p1, n) {\n    return {\n        _internal_x: p1._internal_x / n,\n        _internal_y: p1._internal_y / n\n    };\n}\n/**\n * @returns Two control points that can be used as arguments to {@link CanvasRenderingContext2D.bezierCurveTo} to draw a curved line between `points[fromPointIndex]` and `points[toPointIndex]`.\n */ function getControlPoints(points, fromPointIndex, toPointIndex) {\n    const beforeFromPointIndex = Math.max(0, fromPointIndex - 1);\n    const afterToPointIndex = Math.min(points.length - 1, toPointIndex + 1);\n    const cp1 = add(points[fromPointIndex], divide(subtract(points[toPointIndex], points[beforeFromPointIndex]), curveTension));\n    const cp2 = subtract(points[toPointIndex], divide(subtract(points[afterToPointIndex], points[fromPointIndex]), curveTension));\n    return [\n        cp1,\n        cp2\n    ];\n}\nfunction finishStyledArea$1(scope, style) {\n    const ctx = scope.context;\n    ctx.strokeStyle = style;\n    ctx.stroke();\n}\nclass PaneRendererLineBase extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._internal__data = data;\n    }\n    _internal__drawImpl(renderingScope) {\n        if (this._internal__data === null) {\n            return;\n        }\n        const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineType: lineType, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle, _internal_pointMarkersRadius: pointMarkersRadius } = this._internal__data;\n        if (visibleRange === null) {\n            return;\n        }\n        const ctx = renderingScope.context;\n        ctx.lineCap = 'butt';\n        ctx.lineWidth = lineWidth * renderingScope.verticalPixelRatio;\n        setLineStyle(ctx, lineStyle);\n        ctx.lineJoin = 'round';\n        const styleGetter = this._internal__strokeStyle.bind(this);\n        if (lineType !== undefined) {\n            walkLine(renderingScope, items, lineType, visibleRange, barWidth, styleGetter, finishStyledArea$1);\n        }\n        if (pointMarkersRadius) {\n            drawSeriesPointMarkers(renderingScope, items, pointMarkersRadius, visibleRange, styleGetter);\n        }\n    }\n    constructor(){\n        super(...arguments);\n        this._internal__data = null;\n    }\n}\nclass PaneRendererLine extends PaneRendererLineBase {\n    _internal__strokeStyle(renderingScope, item) {\n        return item._internal_lineColor;\n    }\n}\nclass SeriesLinePaneView extends LinePaneViewBase {\n    _internal__createRawItem(time, price, colorer) {\n        return {\n            ...this._internal__createRawItemBase(time, price),\n            ...colorer._internal_barStyle(time)\n        };\n    }\n    _internal__prepareRendererData() {\n        const options = this._internal__series._internal_options();\n        const data = {\n            _internal_items: this._internal__items,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\n            _internal_lineWidth: options.lineWidth,\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? options.pointMarkersRadius || options.lineWidth / 2 + 2 : undefined,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing()\n        };\n        this._internal__renderer._internal_setData(data);\n    }\n    constructor(){\n        super(...arguments);\n        this._internal__renderer = new PaneRendererLine();\n    }\n}\nconst lineStyleDefaults = {\n    color: '#2196f3',\n    lineStyle: 0 /* LineStyle.Solid */ ,\n    lineWidth: 3,\n    lineType: 0 /* LineType.Simple */ ,\n    lineVisible: true,\n    crosshairMarkerVisible: true,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: '',\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: '',\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */ ,\n    pointMarkersVisible: false\n};\nconst createPaneView$5 = (series, model)=>new SeriesLinePaneView(series, model);\nconst createLineSeries = ()=>{\n    const definition = {\n        type: 'Line',\n        isBuiltIn: true,\n        defaultOptions: lineStyleDefaults,\n        /**\n         * @internal\n         */ _internal_createPaneView: createPaneView$5\n    };\n    return definition;\n};\nconst lineSeries = createLineSeries();\nfunction createDebouncedMicroTaskHandler(callback) {\n    let scheduled = false;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!scheduled) {\n            scheduled = true;\n            queueMicrotask(()=>{\n                callback(...args);\n                scheduled = false;\n            });\n        }\n    };\n}\nfunction markWithGreaterWeight$1(a, b) {\n    return a.weight > b.weight ? a : b;\n}\nfunction toInternalHorzScaleItem(item) {\n    return item;\n}\nfunction fromInternalHorzScaleItem(item) {\n    return item;\n}\nclass YieldCurveHorzScaleBehavior {\n    /** Data changes might require that the whitespace be generated again */ _internal_whitespaceInvalidated() {\n        return this._private__pointsChangedDelegate;\n    }\n    _internal_destroy() {\n        this._private__pointsChangedDelegate._internal_destroy();\n    }\n    options() {\n        return this._private__options;\n    }\n    setOptions(options) {\n        this._private__options = options;\n    }\n    preprocessData(data) {\n    // No preprocessing needed for yield curve data\n    }\n    updateFormatter(options) {\n        if (!this._private__options) {\n            return;\n        }\n        this._private__options.localization = options;\n    }\n    createConverterToInternalObj(data) {\n        this._private__invalidateWhitespace();\n        return (time)=>{\n            if (time > this._private__largestIndex) {\n                this._private__largestIndex = time;\n            }\n            return toInternalHorzScaleItem(time);\n        };\n    }\n    key(internalItem) {\n        return internalItem;\n    }\n    cacheKey(internalItem) {\n        return fromInternalHorzScaleItem(internalItem);\n    }\n    convertHorzItemToInternal(item) {\n        return toInternalHorzScaleItem(item);\n    }\n    formatHorzItem(item) {\n        return this._private__formatTime(item);\n    }\n    formatTickmark(item) {\n        return this._private__formatTime(item.time);\n    }\n    maxTickMarkWeight(marks) {\n        return marks.reduce(markWithGreaterWeight$1, marks[0]).weight;\n    }\n    fillWeightsForPoints(sortedTimePoints, startIndex) {\n        const timeWeight = (time)=>{\n            if (time % 120 === 0) {\n                return 10;\n            }\n            if (time % 60 === 0) {\n                return 9;\n            }\n            if (time % 36 === 0) {\n                return 8;\n            }\n            if (time % 12 === 0) {\n                return 7;\n            }\n            if (time % 6 === 0) {\n                return 6;\n            }\n            if (time % 3 === 0) {\n                return 5;\n            }\n            if (time % 1 === 0) {\n                return 4;\n            }\n            return 0;\n        };\n        for(let index = startIndex; index < sortedTimePoints.length; ++index){\n            sortedTimePoints[index].timeWeight = timeWeight(fromInternalHorzScaleItem(sortedTimePoints[index].time));\n        }\n        this._private__largestIndex = fromInternalHorzScaleItem(sortedTimePoints[sortedTimePoints.length - 1].time);\n        this._private__invalidateWhitespace();\n    }\n    _private__formatTime(months) {\n        var _this__private__options_localization;\n        if ((_this__private__options_localization = this._private__options.localization) === null || _this__private__options_localization === void 0 ? void 0 : _this__private__options_localization.timeFormatter) {\n            return this._private__options.localization.timeFormatter(months);\n        }\n        if (months < 12) {\n            return \"\".concat(months, \"M\");\n        }\n        const years = Math.floor(months / 12);\n        const remainingMonths = months % 12;\n        if (remainingMonths === 0) {\n            return \"\".concat(years, \"Y\");\n        }\n        return \"\".concat(years, \"Y\").concat(remainingMonths, \"M\");\n    }\n    constructor(){\n        this._private__pointsChangedDelegate = new Delegate();\n        this._private__invalidateWhitespace = createDebouncedMicroTaskHandler(()=>this._private__pointsChangedDelegate._internal_fire(this._private__largestIndex));\n        this._private__largestIndex = 0;\n    }\n}\nconst yieldChartOptionsDefaults = {\n    baseResolution: 1,\n    minimumTimeRange: 120,\n    startTimeRange: 0\n};\nfunction generateWhitespaceData(param) {\n    let { _internal_start: start, _internal_end: end, _internal_resolution: resolution } = param;\n    return Array.from({\n        length: Math.floor((end - start) / resolution) + 1\n    }, // eslint-disable-next-line quote-props\n    (item, i)=>({\n            'time': start + i * resolution\n        }));\n}\nfunction buildWhitespaceState(options, lastIndex) {\n    return {\n        _internal_start: Math.max(0, options.startTimeRange),\n        _internal_end: Math.max(0, options.minimumTimeRange, lastIndex || 0),\n        _internal_resolution: Math.max(1, options.baseResolution)\n    };\n}\nconst generateWhitespaceHash = (param)=>{\n    let { _internal_start: start, _internal_end: end, _internal_resolution: resolution } = param;\n    return \"\".concat(start, \"~\").concat(end, \"~\").concat(resolution);\n};\nconst defaultOptions = {\n    yieldCurve: yieldChartOptionsDefaults,\n    // and add sensible default options for yield charts which\n    // are different from the usual defaults.\n    timeScale: {\n        ignoreWhitespaceIndices: true\n    },\n    leftPriceScale: {\n        visible: true\n    },\n    rightPriceScale: {\n        visible: false\n    },\n    localization: {\n        priceFormatter: (value)=>{\n            return value.toFixed(3) + '%';\n        }\n    }\n};\nconst lineStyleDefaultOptionOverrides = {\n    lastValueVisible: false,\n    priceLineVisible: false\n};\nclass YieldChartApi extends ChartApi {\n    addSeries(definition) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, paneIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        if (definition.isBuiltIn && [\n            'Area',\n            'Line'\n        ].includes(definition.type) === false) {\n            throw new Error('Yield curve only support Area and Line series');\n        }\n        const optionOverrides = {\n            ...lineStyleDefaultOptionOverrides,\n            ...options\n        };\n        return super.addSeries(definition, optionOverrides, paneIndex);\n    }\n    _initWhitespaceSeries() {\n        const horzBehaviour = this.horzBehaviour();\n        const whiteSpaceSeries = this.addSeries(lineSeries);\n        let currentWhitespaceHash;\n        function updateWhitespace(lastIndex) {\n            const newWhitespaceState = buildWhitespaceState(horzBehaviour.options().yieldCurve, lastIndex);\n            const newWhitespaceHash = generateWhitespaceHash(newWhitespaceState);\n            if (newWhitespaceHash !== currentWhitespaceHash) {\n                currentWhitespaceHash = newWhitespaceHash;\n                whiteSpaceSeries.setData(generateWhitespaceData(newWhitespaceState));\n            }\n        }\n        updateWhitespace(0);\n        horzBehaviour._internal_whitespaceInvalidated()._internal_subscribe(updateWhitespace);\n    }\n    constructor(container, options){\n        const fullOptions = merge(defaultOptions, options || {});\n        const horzBehaviour = new YieldCurveHorzScaleBehavior();\n        super(container, horzBehaviour, fullOptions);\n        horzBehaviour.setOptions(this.options());\n        this._initWhitespaceSeries();\n    }\n}\n/**\n * Creates a yield curve chart with the specified options.\n *\n * A yield curve chart differs from the default chart type\n * in the following ways:\n * - Horizontal scale is linearly spaced, and defined in monthly\n * time duration units\n * - Whitespace is ignored for the crosshair and grid lines\n *\n * @param container - ID of HTML element or element itself\n * @param options - The yield chart options.\n * @returns An interface to the created chart\n */ function createYieldCurveChart(container, options) {\n    const htmlElement = fetchHtmlElement(container);\n    const chartApi = new YieldChartApi(htmlElement, options);\n    return chartApi;\n}\nfunction markWithGreaterWeight(a, b) {\n    return a.weight > b.weight ? a : b;\n}\nclass HorzScaleBehaviorPrice {\n    options() {\n        return this._private__options;\n    }\n    setOptions(options) {\n        this._private__options = options;\n    }\n    preprocessData(data) {}\n    updateFormatter(options) {\n        if (!this._private__options) {\n            return;\n        }\n        this._private__options.localization = options;\n    }\n    createConverterToInternalObj(data) {\n        return (price)=>price;\n    }\n    key(internalItem) {\n        return internalItem;\n    }\n    cacheKey(internalItem) {\n        return internalItem;\n    }\n    convertHorzItemToInternal(item) {\n        return item;\n    }\n    formatHorzItem(item) {\n        return item.toFixed(this._private__precision());\n    }\n    formatTickmark(item, localizationOptions) {\n        return item.time.toFixed(this._private__precision());\n    }\n    maxTickMarkWeight(marks) {\n        return marks.reduce(markWithGreaterWeight, marks[0]).weight;\n    }\n    fillWeightsForPoints(sortedTimePoints, startIndex) {\n        const priceWeight = (price)=>{\n            if (price === Math.ceil(price / 100) * 100) {\n                return 8;\n            }\n            if (price === Math.ceil(price / 50) * 50) {\n                return 7;\n            }\n            if (price === Math.ceil(price / 25) * 25) {\n                return 6;\n            }\n            if (price === Math.ceil(price / 10) * 10) {\n                return 5;\n            }\n            if (price === Math.ceil(price / 5) * 5) {\n                return 4;\n            }\n            if (price === Math.ceil(price)) {\n                return 3;\n            }\n            if (price * 2 === Math.ceil(price * 2)) {\n                return 1;\n            }\n            return 0;\n        };\n        for(let index = startIndex; index < sortedTimePoints.length; ++index){\n            sortedTimePoints[index].timeWeight = priceWeight(sortedTimePoints[index].time);\n        }\n    }\n    _private__precision() {\n        return this._private__options.localization.precision;\n    }\n}\n/**\n * Creates an 'options' chart with price values on the horizontal scale.\n *\n * This function is used to create a specialized chart type where the horizontal scale\n * represents price values instead of time. It's particularly useful for visualizing\n * option chains, price distributions, or any data where price is the primary x-axis metric.\n *\n * @param container - The DOM element or its id where the chart will be rendered.\n * @param options - Optional configuration options for the price chart.\n * @returns An instance of IChartApiBase configured for price-based horizontal scaling.\n */ function createOptionsChart(container, options) {\n    return createChartEx(container, new HorzScaleBehaviorPrice(), options);\n}\nfunction finishStyledArea(baseLevelCoordinate, scope, style, areaFirstItem, newAreaFirstItem) {\n    const { context, horizontalPixelRatio, verticalPixelRatio } = scope;\n    context.lineTo(newAreaFirstItem._internal_x * horizontalPixelRatio, baseLevelCoordinate * verticalPixelRatio);\n    context.lineTo(areaFirstItem._internal_x * horizontalPixelRatio, baseLevelCoordinate * verticalPixelRatio);\n    context.closePath();\n    context.fillStyle = style;\n    context.fill();\n}\nclass PaneRendererAreaBase extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._internal__data = data;\n    }\n    _internal__drawImpl(renderingScope) {\n        if (this._internal__data === null) {\n            return;\n        }\n        const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle, _internal_lineType: lineType } = this._internal__data;\n        var _this__internal__data__internal_baseLevelCoordinate;\n        const baseLevelCoordinate = (_this__internal__data__internal_baseLevelCoordinate = this._internal__data._internal_baseLevelCoordinate) !== null && _this__internal__data__internal_baseLevelCoordinate !== void 0 ? _this__internal__data__internal_baseLevelCoordinate : this._internal__data._internal_invertFilledArea ? 0 : renderingScope.mediaSize.height;\n        if (visibleRange === null) {\n            return;\n        }\n        const ctx = renderingScope.context;\n        ctx.lineCap = 'butt';\n        ctx.lineJoin = 'round';\n        ctx.lineWidth = lineWidth;\n        setLineStyle(ctx, lineStyle);\n        // walk lines with width=1 to have more accurate gradient's filling\n        ctx.lineWidth = 1;\n        walkLine(renderingScope, items, lineType, visibleRange, barWidth, this._internal__fillStyle.bind(this), finishStyledArea.bind(null, baseLevelCoordinate));\n    }\n    constructor(){\n        super(...arguments);\n        this._internal__data = null;\n    }\n}\nclass GradientStyleCache {\n    // eslint-disable-next-line complexity\n    _internal_get(scope, params) {\n        const cachedParams = this._private__params;\n        const { _internal_topColor1: topColor1, _internal_topColor2: topColor2, _internal_bottomColor1: bottomColor1, _internal_bottomColor2: bottomColor2, _internal_baseLevelCoordinate: baseLevelCoordinate, _internal_topCoordinate: topCoordinate, _internal_bottomCoordinate: bottomCoordinate } = params;\n        if (this._private__cachedValue === undefined || cachedParams === undefined || cachedParams._internal_topColor1 !== topColor1 || cachedParams._internal_topColor2 !== topColor2 || cachedParams._internal_bottomColor1 !== bottomColor1 || cachedParams._internal_bottomColor2 !== bottomColor2 || cachedParams._internal_baseLevelCoordinate !== baseLevelCoordinate || cachedParams._internal_topCoordinate !== topCoordinate || cachedParams._internal_bottomCoordinate !== bottomCoordinate) {\n            const { verticalPixelRatio } = scope;\n            const multiplier = baseLevelCoordinate || topCoordinate > 0 ? verticalPixelRatio : 1;\n            const top = topCoordinate * multiplier;\n            const bottom = bottomCoordinate === scope.bitmapSize.height ? bottomCoordinate : bottomCoordinate * multiplier;\n            const baseline = (baseLevelCoordinate !== null && baseLevelCoordinate !== void 0 ? baseLevelCoordinate : 0) * multiplier;\n            const gradient = scope.context.createLinearGradient(0, top, 0, bottom);\n            gradient.addColorStop(0, topColor1);\n            if (baseLevelCoordinate !== null && baseLevelCoordinate !== undefined) {\n                const range = bottom - top;\n                const baselineRatio = clamp((baseline - top) / range, 0, 1);\n                gradient.addColorStop(baselineRatio, topColor2);\n                gradient.addColorStop(baselineRatio, bottomColor1);\n            }\n            gradient.addColorStop(1, bottomColor2);\n            this._private__cachedValue = gradient;\n            this._private__params = params;\n        }\n        return this._private__cachedValue;\n    }\n}\nclass PaneRendererBaselineArea extends PaneRendererAreaBase {\n    _internal__fillStyle(renderingScope, item) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const data = this._internal__data;\n        var _data__internal_topCoordinate, _data__internal_bottomCoordinate;\n        return this._private__fillCache._internal_get(renderingScope, {\n            _internal_topColor1: item._internal_topFillColor1,\n            _internal_topColor2: item._internal_topFillColor2,\n            _internal_bottomColor1: item._internal_bottomFillColor1,\n            _internal_bottomColor2: item._internal_bottomFillColor2,\n            _internal_baseLevelCoordinate: data._internal_baseLevelCoordinate,\n            _internal_topCoordinate: (_data__internal_topCoordinate = data._internal_topCoordinate) !== null && _data__internal_topCoordinate !== void 0 ? _data__internal_topCoordinate : 0,\n            _internal_bottomCoordinate: (_data__internal_bottomCoordinate = data._internal_bottomCoordinate) !== null && _data__internal_bottomCoordinate !== void 0 ? _data__internal_bottomCoordinate : renderingScope.bitmapSize.height\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this._private__fillCache = new GradientStyleCache();\n    }\n}\nclass PaneRendererBaselineLine extends PaneRendererLineBase {\n    _internal__strokeStyle(renderingScope, item) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const data = this._internal__data;\n        var _data__internal_topCoordinate, _data__internal_bottomCoordinate;\n        return this._private__strokeCache._internal_get(renderingScope, {\n            _internal_topColor1: item._internal_topLineColor,\n            _internal_topColor2: item._internal_topLineColor,\n            _internal_bottomColor1: item._internal_bottomLineColor,\n            _internal_bottomColor2: item._internal_bottomLineColor,\n            _internal_baseLevelCoordinate: data._internal_baseLevelCoordinate,\n            _internal_topCoordinate: (_data__internal_topCoordinate = data._internal_topCoordinate) !== null && _data__internal_topCoordinate !== void 0 ? _data__internal_topCoordinate : 0,\n            _internal_bottomCoordinate: (_data__internal_bottomCoordinate = data._internal_bottomCoordinate) !== null && _data__internal_bottomCoordinate !== void 0 ? _data__internal_bottomCoordinate : renderingScope.bitmapSize.height\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this._private__strokeCache = new GradientStyleCache();\n    }\n}\nclass SeriesBaselinePaneView extends LinePaneViewBase {\n    _internal__createRawItem(time, price, colorer) {\n        return {\n            ...this._internal__createRawItemBase(time, price),\n            ...colorer._internal_barStyle(time)\n        };\n    }\n    _internal__prepareRendererData() {\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return;\n        }\n        const options = this._internal__series._internal_options();\n        const baseLevelCoordinate = this._internal__series._internal_priceScale()._internal_priceToCoordinate(options.baseValue.price, firstValue._internal_value);\n        const barWidth = this._internal__model._internal_timeScale()._internal_barSpacing();\n        if (this._internal__itemsVisibleRange === null || this._internal__items.length === 0) {\n            return;\n        }\n        let topCoordinate;\n        let bottomCoordinate;\n        if (options.relativeGradient) {\n            topCoordinate = this._internal__items[this._internal__itemsVisibleRange.from]._internal_y;\n            bottomCoordinate = this._internal__items[this._internal__itemsVisibleRange.from]._internal_y;\n            for(let i = this._internal__itemsVisibleRange.from; i < this._internal__itemsVisibleRange.to; i++){\n                const item = this._internal__items[i];\n                if (item._internal_y < topCoordinate) {\n                    topCoordinate = item._internal_y;\n                }\n                if (item._internal_y > bottomCoordinate) {\n                    bottomCoordinate = item._internal_y;\n                }\n            }\n        }\n        this._private__baselineAreaRenderer._internal_setData({\n            _internal_items: this._internal__items,\n            _internal_lineWidth: options.lineWidth,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineType: options.lineType,\n            _internal_baseLevelCoordinate: baseLevelCoordinate,\n            _internal_topCoordinate: topCoordinate,\n            _internal_bottomCoordinate: bottomCoordinate,\n            _internal_invertFilledArea: false,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: barWidth\n        });\n        this._private__baselineLineRenderer._internal_setData({\n            _internal_items: this._internal__items,\n            _internal_lineWidth: options.lineWidth,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? options.pointMarkersRadius || options.lineWidth / 2 + 2 : undefined,\n            _internal_baseLevelCoordinate: baseLevelCoordinate,\n            _internal_topCoordinate: topCoordinate,\n            _internal_bottomCoordinate: bottomCoordinate,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: barWidth\n        });\n    }\n    constructor(series, model){\n        super(series, model);\n        this._internal__renderer = new CompositeRenderer();\n        this._private__baselineAreaRenderer = new PaneRendererBaselineArea();\n        this._private__baselineLineRenderer = new PaneRendererBaselineLine();\n        this._internal__renderer._internal_setRenderers([\n            this._private__baselineAreaRenderer,\n            this._private__baselineLineRenderer\n        ]);\n    }\n}\nconst baselineStyleDefaults = {\n    baseValue: {\n        type: 'price',\n        price: 0\n    },\n    relativeGradient: false,\n    topFillColor1: 'rgba(38, 166, 154, 0.28)',\n    topFillColor2: 'rgba(38, 166, 154, 0.05)',\n    topLineColor: 'rgba(38, 166, 154, 1)',\n    bottomFillColor1: 'rgba(239, 83, 80, 0.05)',\n    bottomFillColor2: 'rgba(239, 83, 80, 0.28)',\n    bottomLineColor: 'rgba(239, 83, 80, 1)',\n    lineWidth: 3,\n    lineStyle: 0 /* LineStyle.Solid */ ,\n    lineType: 0 /* LineType.Simple */ ,\n    lineVisible: true,\n    crosshairMarkerVisible: true,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: '',\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: '',\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */ ,\n    pointMarkersVisible: false\n};\nconst createPaneView$4 = (series, model)=>new SeriesBaselinePaneView(series, model);\nconst createSeries$4 = ()=>{\n    const definition = {\n        type: 'Baseline',\n        isBuiltIn: true,\n        defaultOptions: baselineStyleDefaults,\n        /**\n         * @internal\n         */ _internal_createPaneView: createPaneView$4\n    };\n    return definition;\n};\nconst baselineSeries = createSeries$4();\nclass PaneRendererArea extends PaneRendererAreaBase {\n    _internal__fillStyle(renderingScope, item) {\n        var _this__internal__data;\n        var _this__internal__data__internal_topCoordinate;\n        return this._private__fillCache._internal_get(renderingScope, {\n            _internal_topColor1: item._internal_topColor,\n            _internal_topColor2: '',\n            _internal_bottomColor1: '',\n            _internal_bottomColor2: item._internal_bottomColor,\n            _internal_topCoordinate: (_this__internal__data__internal_topCoordinate = (_this__internal__data = this._internal__data) === null || _this__internal__data === void 0 ? void 0 : _this__internal__data._internal_topCoordinate) !== null && _this__internal__data__internal_topCoordinate !== void 0 ? _this__internal__data__internal_topCoordinate : 0,\n            _internal_bottomCoordinate: renderingScope.bitmapSize.height\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this._private__fillCache = new GradientStyleCache();\n    }\n}\nclass SeriesAreaPaneView extends LinePaneViewBase {\n    _internal__createRawItem(time, price, colorer) {\n        return {\n            ...this._internal__createRawItemBase(time, price),\n            ...colorer._internal_barStyle(time)\n        };\n    }\n    _internal__prepareRendererData() {\n        const options = this._internal__series._internal_options();\n        if (this._internal__itemsVisibleRange === null || this._internal__items.length === 0) {\n            return;\n        }\n        let topCoordinate;\n        if (options.relativeGradient) {\n            topCoordinate = this._internal__items[this._internal__itemsVisibleRange.from]._internal_y;\n            for(let i = this._internal__itemsVisibleRange.from; i < this._internal__itemsVisibleRange.to; i++){\n                const item = this._internal__items[i];\n                if (item._internal_y < topCoordinate) {\n                    topCoordinate = item._internal_y;\n                }\n            }\n        }\n        this._private__areaRenderer._internal_setData({\n            _internal_lineType: options.lineType,\n            _internal_items: this._internal__items,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineWidth: options.lineWidth,\n            _internal_baseLevelCoordinate: null,\n            _internal_topCoordinate: topCoordinate,\n            _internal_invertFilledArea: options.invertFilledArea,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing()\n        });\n        this._private__lineRenderer._internal_setData({\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\n            _internal_items: this._internal__items,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineWidth: options.lineWidth,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? options.pointMarkersRadius || options.lineWidth / 2 + 2 : undefined\n        });\n    }\n    constructor(series, model){\n        super(series, model);\n        this._internal__renderer = new CompositeRenderer();\n        this._private__areaRenderer = new PaneRendererArea();\n        this._private__lineRenderer = new PaneRendererLine();\n        this._internal__renderer._internal_setRenderers([\n            this._private__areaRenderer,\n            this._private__lineRenderer\n        ]);\n    }\n}\nconst areaStyleDefaults = {\n    topColor: 'rgba( 46, 220, 135, 0.4)',\n    bottomColor: 'rgba( 40, 221, 100, 0)',\n    invertFilledArea: false,\n    relativeGradient: false,\n    lineColor: '#33D778',\n    lineStyle: 0 /* LineStyle.Solid */ ,\n    lineWidth: 3,\n    lineType: 0 /* LineType.Simple */ ,\n    lineVisible: true,\n    crosshairMarkerVisible: true,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: '',\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: '',\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */ ,\n    pointMarkersVisible: false\n};\nconst createPaneView$3 = (series, model)=>new SeriesAreaPaneView(series, model);\nconst createSeries$3 = ()=>{\n    const definition = {\n        type: 'Area',\n        isBuiltIn: true,\n        defaultOptions: areaStyleDefaults,\n        /**\n         * @internal\n         */ _internal_createPaneView: createPaneView$3\n    };\n    return definition;\n};\nconst areaSeries = createSeries$3();\nfunction optimalBarWidth(barSpacing, pixelRatio) {\n    return Math.floor(barSpacing * 0.3 * pixelRatio);\n}\nfunction optimalCandlestickWidth(barSpacing, pixelRatio) {\n    const barSpacingSpecialCaseFrom = 2.5;\n    const barSpacingSpecialCaseTo = 4;\n    const barSpacingSpecialCaseCoeff = 3;\n    if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {\n        return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);\n    }\n    // coeff should be 1 on small barspacing and go to 0.8 while groing bar spacing\n    const barSpacingReducingCoeff = 0.2;\n    const coeff = 1 - barSpacingReducingCoeff * Math.atan(Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo) / (Math.PI * 0.5);\n    const res = Math.floor(barSpacing * coeff * pixelRatio);\n    const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);\n    const optimal = Math.min(res, scaledBarSpacing);\n    return Math.max(Math.floor(pixelRatio), optimal);\n}\nclass PaneRendererBars extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    // eslint-disable-next-line complexity\n    _internal__drawImpl(param) {\n        let { context: ctx, horizontalPixelRatio, verticalPixelRatio } = param;\n        if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {\n            return;\n        }\n        this._private__barWidth = this._private__calcBarWidth(horizontalPixelRatio);\n        // grid and crosshair have line width = Math.floor(pixelRatio)\n        // if this value is odd, we have to make bars' width odd\n        // if this value is even, we have to make bars' width even\n        // in order of keeping crosshair-over-bar drawing symmetric\n        if (this._private__barWidth >= 2) {\n            const lineWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n            if (lineWidth % 2 !== this._private__barWidth % 2) {\n                this._private__barWidth--;\n            }\n        }\n        // if scale is compressed, bar could become less than 1 CSS pixel\n        this._private__barLineWidth = this._private__data._internal_thinBars ? Math.min(this._private__barWidth, Math.floor(horizontalPixelRatio)) : this._private__barWidth;\n        let prevColor = null;\n        const drawOpenClose = this._private__barLineWidth <= this._private__barWidth && this._private__data._internal_barSpacing >= Math.floor(1.5 * horizontalPixelRatio);\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; ++i){\n            const bar = this._private__data._internal_bars[i];\n            if (prevColor !== bar._internal_barColor) {\n                ctx.fillStyle = bar._internal_barColor;\n                prevColor = bar._internal_barColor;\n            }\n            const bodyWidthHalf = Math.floor(this._private__barLineWidth * 0.5);\n            const bodyCenter = Math.round(bar._internal_x * horizontalPixelRatio);\n            const bodyLeft = bodyCenter - bodyWidthHalf;\n            const bodyWidth = this._private__barLineWidth;\n            const bodyRight = bodyLeft + bodyWidth - 1;\n            const high = Math.min(bar._internal_highY, bar._internal_lowY);\n            const low = Math.max(bar._internal_highY, bar._internal_lowY);\n            const bodyTop = Math.round(high * verticalPixelRatio) - bodyWidthHalf;\n            const bodyBottom = Math.round(low * verticalPixelRatio) + bodyWidthHalf;\n            const bodyHeight = Math.max(bodyBottom - bodyTop, this._private__barLineWidth);\n            ctx.fillRect(bodyLeft, bodyTop, bodyWidth, bodyHeight);\n            const sideWidth = Math.ceil(this._private__barWidth * 1.5);\n            if (drawOpenClose) {\n                if (this._private__data._internal_openVisible) {\n                    const openLeft = bodyCenter - sideWidth;\n                    let openTop = Math.max(bodyTop, Math.round(bar._internal_openY * verticalPixelRatio) - bodyWidthHalf);\n                    let openBottom = openTop + bodyWidth - 1;\n                    if (openBottom > bodyTop + bodyHeight - 1) {\n                        openBottom = bodyTop + bodyHeight - 1;\n                        openTop = openBottom - bodyWidth + 1;\n                    }\n                    ctx.fillRect(openLeft, openTop, bodyLeft - openLeft, openBottom - openTop + 1);\n                }\n                const closeRight = bodyCenter + sideWidth;\n                let closeTop = Math.max(bodyTop, Math.round(bar._internal_closeY * verticalPixelRatio) - bodyWidthHalf);\n                let closeBottom = closeTop + bodyWidth - 1;\n                if (closeBottom > bodyTop + bodyHeight - 1) {\n                    closeBottom = bodyTop + bodyHeight - 1;\n                    closeTop = closeBottom - bodyWidth + 1;\n                }\n                ctx.fillRect(bodyRight + 1, closeTop, closeRight - bodyRight, closeBottom - closeTop + 1);\n            }\n        }\n    }\n    _private__calcBarWidth(pixelRatio) {\n        const limit = Math.floor(pixelRatio);\n        return Math.max(limit, Math.floor(optimalBarWidth(ensureNotNull(this._private__data)._internal_barSpacing, pixelRatio)));\n    }\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n        this._private__barWidth = 0;\n        this._private__barLineWidth = 0;\n    }\n}\nclass BarsPaneViewBase extends SeriesPaneViewBase {\n    _internal__convertToCoordinates(priceScale, timeScale, firstValue) {\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\n        priceScale._internal_barPricesToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));\n    }\n    _internal__createDefaultItem(time, bar, colorer) {\n        return {\n            _internal_time: time,\n            _internal_open: bar._internal_value[0 /* PlotRowValueIndex.Open */ ],\n            _internal_high: bar._internal_value[1 /* PlotRowValueIndex.High */ ],\n            _internal_low: bar._internal_value[2 /* PlotRowValueIndex.Low */ ],\n            _internal_close: bar._internal_value[3 /* PlotRowValueIndex.Close */ ],\n            _internal_x: NaN,\n            _internal_openY: NaN,\n            _internal_highY: NaN,\n            _internal_lowY: NaN,\n            _internal_closeY: NaN\n        };\n    }\n    _internal__fillRawPoints() {\n        const colorer = this._internal__series._internal_barColorer();\n        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row)=>this._internal__createRawItem(row._internal_index, row, colorer));\n    }\n    constructor(series, model){\n        super(series, model, false);\n    }\n}\nclass SeriesBarsPaneView extends BarsPaneViewBase {\n    _internal__createRawItem(time, bar, colorer) {\n        return {\n            ...this._internal__createDefaultItem(time, bar, colorer),\n            ...colorer._internal_barStyle(time)\n        };\n    }\n    _internal__prepareRendererData() {\n        const barStyleProps = this._internal__series._internal_options();\n        this._internal__renderer._internal_setData({\n            _internal_bars: this._internal__items,\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            _internal_openVisible: barStyleProps.openVisible,\n            _internal_thinBars: barStyleProps.thinBars,\n            _internal_visibleRange: this._internal__itemsVisibleRange\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this._internal__renderer = new PaneRendererBars();\n    }\n}\nconst barStyleDefaults = {\n    upColor: '#26a69a',\n    downColor: '#ef5350',\n    openVisible: true,\n    thinBars: true\n};\nconst createPaneView$2 = (series, model)=>new SeriesBarsPaneView(series, model);\nconst createSeries$2 = ()=>{\n    const definition = {\n        type: 'Bar',\n        isBuiltIn: true,\n        defaultOptions: barStyleDefaults,\n        /**\n         * @internal\n         */ _internal_createPaneView: createPaneView$2\n    };\n    return definition;\n};\nconst barSeries = createSeries$2();\nclass PaneRendererCandlesticks extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal__drawImpl(renderingScope) {\n        if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {\n            return;\n        }\n        const { horizontalPixelRatio } = renderingScope;\n        // now we know pixelRatio and we could calculate barWidth effectively\n        this._private__barWidth = optimalCandlestickWidth(this._private__data._internal_barSpacing, horizontalPixelRatio);\n        // grid and crosshair have line width = Math.floor(pixelRatio)\n        // if this value is odd, we have to make candlesticks' width odd\n        // if this value is even, we have to make candlesticks' width even\n        // in order of keeping crosshair-over-candlesticks drawing symmetric\n        if (this._private__barWidth >= 2) {\n            const wickWidth = Math.floor(horizontalPixelRatio);\n            if (wickWidth % 2 !== this._private__barWidth % 2) {\n                this._private__barWidth--;\n            }\n        }\n        const bars = this._private__data._internal_bars;\n        if (this._private__data._internal_wickVisible) {\n            this._private__drawWicks(renderingScope, bars, this._private__data._internal_visibleRange);\n        }\n        if (this._private__data._internal_borderVisible) {\n            this._private__drawBorder(renderingScope, bars, this._private__data._internal_visibleRange);\n        }\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\n        if (!this._private__data._internal_borderVisible || this._private__barWidth > borderWidth * 2) {\n            this._private__drawCandles(renderingScope, bars, this._private__data._internal_visibleRange);\n        }\n    }\n    _private__drawWicks(renderingScope, bars, visibleRange) {\n        if (this._private__data === null) {\n            return;\n        }\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\n        let prevWickColor = '';\n        let wickWidth = Math.min(Math.floor(horizontalPixelRatio), Math.floor(this._private__data._internal_barSpacing * horizontalPixelRatio));\n        wickWidth = Math.max(Math.floor(horizontalPixelRatio), Math.min(wickWidth, this._private__barWidth));\n        const wickOffset = Math.floor(wickWidth * 0.5);\n        let prevEdge = null;\n        for(let i = visibleRange.from; i < visibleRange.to; i++){\n            const bar = bars[i];\n            if (bar._internal_barWickColor !== prevWickColor) {\n                ctx.fillStyle = bar._internal_barWickColor;\n                prevWickColor = bar._internal_barWickColor;\n            }\n            const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            const high = Math.round(bar._internal_highY * verticalPixelRatio);\n            const low = Math.round(bar._internal_lowY * verticalPixelRatio);\n            const scaledX = Math.round(horizontalPixelRatio * bar._internal_x);\n            let left = scaledX - wickOffset;\n            const right = left + wickWidth - 1;\n            if (prevEdge !== null) {\n                left = Math.max(prevEdge + 1, left);\n                left = Math.min(left, right);\n            }\n            const width = right - left + 1;\n            ctx.fillRect(left, high, width, top - high);\n            ctx.fillRect(left, bottom + 1, width, low - bottom);\n            prevEdge = right;\n        }\n    }\n    _private__calculateBorderWidth(pixelRatio) {\n        let borderWidth = Math.floor(1 /* Constants.BarBorderWidth */  * pixelRatio);\n        if (this._private__barWidth <= 2 * borderWidth) {\n            borderWidth = Math.floor((this._private__barWidth - 1) * 0.5);\n        }\n        const res = Math.max(Math.floor(pixelRatio), borderWidth);\n        if (this._private__barWidth <= res * 2) {\n            // do not draw bodies, restore original value\n            return Math.max(Math.floor(pixelRatio), Math.floor(1 /* Constants.BarBorderWidth */  * pixelRatio));\n        }\n        return res;\n    }\n    _private__drawBorder(renderingScope, bars, visibleRange) {\n        if (this._private__data === null) {\n            return;\n        }\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\n        let prevBorderColor = '';\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\n        let prevEdge = null;\n        for(let i = visibleRange.from; i < visibleRange.to; i++){\n            const bar = bars[i];\n            if (bar._internal_barBorderColor !== prevBorderColor) {\n                ctx.fillStyle = bar._internal_barBorderColor;\n                prevBorderColor = bar._internal_barBorderColor;\n            }\n            let left = Math.round(bar._internal_x * horizontalPixelRatio) - Math.floor(this._private__barWidth * 0.5);\n            // this is important to calculate right before patching left\n            const right = left + this._private__barWidth - 1;\n            const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            if (prevEdge !== null) {\n                left = Math.max(prevEdge + 1, left);\n                left = Math.min(left, right);\n            }\n            if (this._private__data._internal_barSpacing * horizontalPixelRatio > 2 * borderWidth) {\n                fillRectInnerBorder(ctx, left, top, right - left + 1, bottom - top + 1, borderWidth);\n            } else {\n                const width = right - left + 1;\n                ctx.fillRect(left, top, width, bottom - top + 1);\n            }\n            prevEdge = right;\n        }\n    }\n    _private__drawCandles(renderingScope, bars, visibleRange) {\n        if (this._private__data === null) {\n            return;\n        }\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\n        let prevBarColor = '';\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\n        for(let i = visibleRange.from; i < visibleRange.to; i++){\n            const bar = bars[i];\n            let top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            let bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            let left = Math.round(bar._internal_x * horizontalPixelRatio) - Math.floor(this._private__barWidth * 0.5);\n            let right = left + this._private__barWidth - 1;\n            if (bar._internal_barColor !== prevBarColor) {\n                const barColor = bar._internal_barColor;\n                ctx.fillStyle = barColor;\n                prevBarColor = barColor;\n            }\n            if (this._private__data._internal_borderVisible) {\n                left += borderWidth;\n                top += borderWidth;\n                right -= borderWidth;\n                bottom -= borderWidth;\n            }\n            if (top > bottom) {\n                continue;\n            }\n            ctx.fillRect(left, top, right - left + 1, bottom - top + 1);\n        }\n    }\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n        // scaled with pixelRatio\n        this._private__barWidth = 0;\n    }\n}\nclass SeriesCandlesticksPaneView extends BarsPaneViewBase {\n    _internal__createRawItem(time, bar, colorer) {\n        return {\n            ...this._internal__createDefaultItem(time, bar, colorer),\n            ...colorer._internal_barStyle(time)\n        };\n    }\n    _internal__prepareRendererData() {\n        const candlestickStyleProps = this._internal__series._internal_options();\n        this._internal__renderer._internal_setData({\n            _internal_bars: this._internal__items,\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            _internal_wickVisible: candlestickStyleProps.wickVisible,\n            _internal_borderVisible: candlestickStyleProps.borderVisible,\n            _internal_visibleRange: this._internal__itemsVisibleRange\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this._internal__renderer = new PaneRendererCandlesticks();\n    }\n}\nconst candlestickStyleDefaults = {\n    upColor: '#26a69a',\n    downColor: '#ef5350',\n    wickVisible: true,\n    borderVisible: true,\n    borderColor: '#378658',\n    borderUpColor: '#26a69a',\n    borderDownColor: '#ef5350',\n    wickColor: '#737375',\n    wickUpColor: '#26a69a',\n    wickDownColor: '#ef5350'\n};\nconst createPaneView$1 = (series, model)=>new SeriesCandlesticksPaneView(series, model);\nconst createSeries$1 = ()=>{\n    const definition = {\n        type: 'Candlestick',\n        isBuiltIn: true,\n        defaultOptions: candlestickStyleDefaults,\n        /**\n         * @internal\n         */ _internal_createPaneView: createPaneView$1\n    };\n    return definition;\n};\nconst candlestickSeries = createSeries$1();\nconst showSpacingMinimalBarWidth = 1;\nconst alignToMinimalWidthLimit = 4;\nclass PaneRendererHistogram extends BitmapCoordinatesPaneRenderer {\n    _internal_setData(data) {\n        this._private__data = data;\n        this._private__precalculatedCache = [];\n    }\n    _internal__drawImpl(param) {\n        let { context: ctx, horizontalPixelRatio, verticalPixelRatio } = param;\n        if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {\n            return;\n        }\n        if (!this._private__precalculatedCache.length) {\n            this._private__fillPrecalculatedCache(horizontalPixelRatio);\n        }\n        const tickWidth = Math.max(1, Math.floor(verticalPixelRatio));\n        const histogramBase = Math.round(this._private__data._internal_histogramBase * verticalPixelRatio);\n        const topHistogramBase = histogramBase - Math.floor(tickWidth / 2);\n        const bottomHistogramBase = topHistogramBase + tickWidth;\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const item = this._private__data._internal_items[i];\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\n            const y = Math.round(item._internal_y * verticalPixelRatio);\n            ctx.fillStyle = item._internal_barColor;\n            let top;\n            let bottom;\n            if (y <= topHistogramBase) {\n                top = y;\n                bottom = bottomHistogramBase;\n            } else {\n                top = topHistogramBase;\n                bottom = y - Math.floor(tickWidth / 2) + tickWidth;\n            }\n            ctx.fillRect(current._internal_left, top, current._internal_right - current._internal_left + 1, bottom - top);\n        }\n    }\n    // eslint-disable-next-line complexity\n    _private__fillPrecalculatedCache(pixelRatio) {\n        if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {\n            this._private__precalculatedCache = [];\n            return;\n        }\n        const spacing = Math.ceil(this._private__data._internal_barSpacing * pixelRatio) <= showSpacingMinimalBarWidth ? 0 : Math.max(1, Math.floor(pixelRatio));\n        const columnWidth = Math.round(this._private__data._internal_barSpacing * pixelRatio) - spacing;\n        this._private__precalculatedCache = new Array(this._private__data._internal_visibleRange.to - this._private__data._internal_visibleRange.from);\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const item = this._private__data._internal_items[i];\n            // force cast to avoid ensureDefined call\n            const x = Math.round(item._internal_x * pixelRatio);\n            let left;\n            let right;\n            if (columnWidth % 2) {\n                const halfWidth = (columnWidth - 1) / 2;\n                left = x - halfWidth;\n                right = x + halfWidth;\n            } else {\n                // shift pixel to left\n                const halfWidth = columnWidth / 2;\n                left = x - halfWidth;\n                right = x + halfWidth - 1;\n            }\n            this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from] = {\n                _internal_left: left,\n                _internal_right: right,\n                _internal_roundedCenter: x,\n                _internal_center: item._internal_x * pixelRatio,\n                _internal_time: item._internal_time\n            };\n        }\n        // correct positions\n        for(let i = this._private__data._internal_visibleRange.from + 1; i < this._private__data._internal_visibleRange.to; i++){\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\n            const prev = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from - 1];\n            if (current._internal_time !== prev._internal_time + 1) {\n                continue;\n            }\n            if (current._internal_left - prev._internal_right !== spacing + 1) {\n                // have to align\n                if (prev._internal_roundedCenter > prev._internal_center) {\n                    // prev wasshifted to left, so add pixel to right\n                    prev._internal_right = current._internal_left - spacing - 1;\n                } else {\n                    // extend current to left\n                    current._internal_left = prev._internal_right + spacing + 1;\n                }\n            }\n        }\n        let minWidth = Math.ceil(this._private__data._internal_barSpacing * pixelRatio);\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\n            // this could happen if barspacing < 1\n            if (current._internal_right < current._internal_left) {\n                current._internal_right = current._internal_left;\n            }\n            const width = current._internal_right - current._internal_left + 1;\n            minWidth = Math.min(width, minWidth);\n        }\n        if (spacing > 0 && minWidth < alignToMinimalWidthLimit) {\n            for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n                const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\n                const width = current._internal_right - current._internal_left + 1;\n                if (width > minWidth) {\n                    if (current._internal_roundedCenter > current._internal_center) {\n                        current._internal_right -= 1;\n                    } else {\n                        current._internal_left += 1;\n                    }\n                }\n            }\n        }\n    }\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n        this._private__precalculatedCache = [];\n    }\n}\nclass SeriesHistogramPaneView extends LinePaneViewBase {\n    _internal__createRawItem(time, price, colorer) {\n        return {\n            ...this._internal__createRawItemBase(time, price),\n            ...colorer._internal_barStyle(time)\n        };\n    }\n    _internal__prepareRendererData() {\n        const data = {\n            _internal_items: this._internal__items,\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_histogramBase: this._internal__series._internal_priceScale()._internal_priceToCoordinate(this._internal__series._internal_options().base, ensureNotNull(this._internal__series._internal_firstValue())._internal_value)\n        };\n        this._internal__renderer._internal_setData(data);\n    }\n    constructor(){\n        super(...arguments);\n        this._internal__renderer = new PaneRendererHistogram();\n    }\n}\nconst histogramStyleDefaults = {\n    color: '#26a69a',\n    base: 0\n};\nconst createPaneView = (series, model)=>new SeriesHistogramPaneView(series, model);\nconst createSeries = ()=>{\n    const definition = {\n        type: 'Histogram',\n        isBuiltIn: true,\n        defaultOptions: histogramStyleDefaults,\n        /**\n         * @internal\n         */ _internal_createPaneView: createPaneView\n    };\n    return definition;\n};\nconst histogramSeries = createSeries();\nclass PanePrimitiveWrapper {\n    detach() {\n        this._private__pane.detachPrimitive(this._private__primitive);\n    }\n    getPane() {\n        return this._private__pane;\n    }\n    applyOptions(options) {\n        var _this__private__primitive__internal_applyOptions, _this__private__primitive;\n        (_this__private__primitive__internal_applyOptions = (_this__private__primitive = this._private__primitive)._internal_applyOptions) === null || _this__private__primitive__internal_applyOptions === void 0 ? void 0 : _this__private__primitive__internal_applyOptions.call(_this__private__primitive, options);\n    }\n    _private__attach() {\n        this._private__pane.attachPrimitive(this._private__primitive);\n    }\n    constructor(pane, primitive){\n        this._private__pane = pane;\n        this._private__primitive = primitive;\n        this._private__attach();\n    }\n}\nconst textWatermarkOptionsDefaults = {\n    visible: true,\n    horzAlign: 'center',\n    vertAlign: 'center',\n    lines: []\n};\nconst textWatermarkLineOptionsDefaults = {\n    color: 'rgba(0, 0, 0, 0.5)',\n    fontSize: 48,\n    fontFamily: defaultFontFamily,\n    fontStyle: '',\n    text: ''\n};\nclass TextWatermarkRenderer {\n    draw(target) {\n        target.useMediaCoordinateSpace((scope)=>{\n            if (!this._private__data.visible) {\n                return;\n            }\n            const { context: ctx, mediaSize } = scope;\n            let textHeight = 0;\n            for (const line of this._private__data.lines){\n                if (line.text.length === 0) {\n                    continue;\n                }\n                ctx.font = line._internal_font;\n                const textWidth = this._private__metrics(ctx, line.text);\n                if (textWidth > mediaSize.width) {\n                    line._internal_zoom = mediaSize.width / textWidth;\n                } else {\n                    line._internal_zoom = 1;\n                }\n                textHeight += line.lineHeight * line._internal_zoom;\n            }\n            let vertOffset = 0;\n            switch(this._private__data.vertAlign){\n                case 'top':\n                    vertOffset = 0;\n                    break;\n                case 'center':\n                    vertOffset = Math.max((mediaSize.height - textHeight) / 2, 0);\n                    break;\n                case 'bottom':\n                    vertOffset = Math.max(mediaSize.height - textHeight, 0);\n                    break;\n            }\n            for (const line of this._private__data.lines){\n                ctx.save();\n                ctx.fillStyle = line.color;\n                let horzOffset = 0;\n                switch(this._private__data.horzAlign){\n                    case 'left':\n                        ctx.textAlign = 'left';\n                        horzOffset = line.lineHeight / 2;\n                        break;\n                    case 'center':\n                        ctx.textAlign = 'center';\n                        horzOffset = mediaSize.width / 2;\n                        break;\n                    case 'right':\n                        ctx.textAlign = 'right';\n                        horzOffset = mediaSize.width - 1 - line.lineHeight / 2;\n                        break;\n                }\n                ctx.translate(horzOffset, vertOffset);\n                ctx.textBaseline = 'top';\n                ctx.font = line._internal_font;\n                ctx.scale(line._internal_zoom, line._internal_zoom);\n                ctx.fillText(line.text, 0, line._internal_vertOffset);\n                ctx.restore();\n                vertOffset += line.lineHeight * line._internal_zoom;\n            }\n        });\n    }\n    _private__metrics(ctx, text) {\n        const fontCache = this._private__fontCache(ctx.font);\n        let result = fontCache.get(text);\n        if (result === undefined) {\n            result = ctx.measureText(text).width;\n            fontCache.set(text, result);\n        }\n        return result;\n    }\n    _private__fontCache(font) {\n        let fontCache = this._private__metricsCache.get(font);\n        if (fontCache === undefined) {\n            fontCache = new Map();\n            this._private__metricsCache.set(font, fontCache);\n        }\n        return fontCache;\n    }\n    constructor(options){\n        this._private__metricsCache = new Map();\n        this._private__data = options;\n    }\n}\nclass TextWatermarkPaneView {\n    _internal_update(options) {\n        this._private__options = buildRendererOptions$1(options);\n    }\n    renderer() {\n        return new TextWatermarkRenderer(this._private__options);\n    }\n    constructor(options){\n        this._private__options = buildRendererOptions$1(options);\n    }\n}\nfunction buildRendererLineOptions(lineOption) {\n    return {\n        ...lineOption,\n        _internal_font: makeFont(lineOption.fontSize, lineOption.fontFamily, lineOption.fontStyle),\n        lineHeight: lineOption.lineHeight || lineOption.fontSize * 1.2,\n        _internal_vertOffset: 0,\n        _internal_zoom: 0\n    };\n}\nfunction buildRendererOptions$1(options) {\n    return {\n        ...options,\n        lines: options.lines.map(buildRendererLineOptions)\n    };\n}\nfunction mergeLineOptionsWithDefaults(options) {\n    return {\n        ...textWatermarkLineOptionsDefaults,\n        ...options\n    };\n}\nfunction mergeOptionsWithDefaults$2(options) {\n    var _options_lines;\n    var _options_lines_map;\n    return {\n        ...textWatermarkOptionsDefaults,\n        ...options,\n        lines: (_options_lines_map = (_options_lines = options.lines) === null || _options_lines === void 0 ? void 0 : _options_lines.map(mergeLineOptionsWithDefaults)) !== null && _options_lines_map !== void 0 ? _options_lines_map : []\n    };\n}\nclass TextWatermark {\n    updateAllViews() {\n        this._private__paneViews.forEach((pw)=>pw._internal_update(this._private__options));\n    }\n    paneViews() {\n        return this._private__paneViews;\n    }\n    attached(param) {\n        let { requestUpdate } = param;\n        this._internal_requestUpdate = requestUpdate;\n    }\n    detached() {\n        this._internal_requestUpdate = undefined;\n    }\n    _internal_applyOptions(options) {\n        this._private__options = mergeOptionsWithDefaults$2({\n            ...this._private__options,\n            ...options\n        });\n        if (this._internal_requestUpdate) {\n            this._internal_requestUpdate();\n        }\n    }\n    constructor(options){\n        this._private__options = mergeOptionsWithDefaults$2(options);\n        this._private__paneViews = [\n            new TextWatermarkPaneView(this._private__options)\n        ];\n    }\n}\n/**\n * Creates an image watermark.\n *\n * @param pane - Target pane.\n * @param options - Watermark options.\n *\n * @returns Image watermark wrapper.\n *\n * @example\n * ```js\n * import { createTextWatermark } from 'lightweight-charts';\n *\n * const firstPane = chart.panes()[0];\n * const textWatermark = createTextWatermark(firstPane, {\n * \t  horzAlign: 'center',\n * \t  vertAlign: 'center',\n * \t  lines: [\n * \t    {\n * \t      text: 'Hello',\n * \t      color: 'rgba(255,0,0,0.5)',\n * \t      fontSize: 100,\n * \t      fontStyle: 'bold',\n * \t    },\n * \t    {\n * \t      text: 'This is a text watermark',\n * \t      color: 'rgba(0,0,255,0.5)',\n * \t      fontSize: 50,\n * \t      fontStyle: 'italic',\n * \t      fontFamily: 'monospace',\n * \t    },\n * \t  ],\n * });\n * // to change options\n * textWatermark.applyOptions({ horzAlign: 'left' });\n * // to remove watermark from the pane\n * textWatermark.detach();\n * ```\n */ function createTextWatermark(pane, options) {\n    return new PanePrimitiveWrapper(pane, new TextWatermark(options));\n}\nconst imageWatermarkOptionsDefaults = {\n    alpha: 1,\n    padding: 0\n};\nclass ImageWatermarkRenderer {\n    draw(target) {\n        target.useMediaCoordinateSpace((scope)=>{\n            const ctx = scope.context;\n            const pos = this._private__determinePlacement(this._private__data, scope.mediaSize);\n            if (!pos || !this._private__data._internal_imgElement) {\n                return;\n            }\n            var _this__private__data_alpha;\n            ctx.globalAlpha = (_this__private__data_alpha = this._private__data.alpha) !== null && _this__private__data_alpha !== void 0 ? _this__private__data_alpha : 1;\n            ctx.drawImage(this._private__data._internal_imgElement, pos._internal_x, pos._internal_y, pos._internal_width, pos._internal_height);\n        });\n    }\n    _private__determinePlacement(data, paneSize) {\n        const { maxHeight, maxWidth, _internal_imgHeight: imgHeight, _internal_imgWidth: imgWidth, padding } = data;\n        const plotCentreX = Math.round(paneSize.width / 2);\n        const plotCentreY = Math.round(paneSize.height / 2);\n        const paddingSize = padding !== null && padding !== void 0 ? padding : 0;\n        let availableWidth = paneSize.width - 2 * paddingSize;\n        let availableHeight = paneSize.height - 2 * paddingSize;\n        if (maxHeight) {\n            availableHeight = Math.min(availableHeight, maxHeight);\n        }\n        if (maxWidth) {\n            availableWidth = Math.min(availableWidth, maxWidth);\n        }\n        const scaleX = availableWidth / imgWidth;\n        const scaleY = availableHeight / imgHeight;\n        const scaleToUse = Math.min(scaleX, scaleY);\n        const drawWidth = imgWidth * scaleToUse;\n        const drawHeight = imgHeight * scaleToUse;\n        const x = plotCentreX - 0.5 * drawWidth;\n        const y = plotCentreY - 0.5 * drawHeight;\n        return {\n            _internal_x: x,\n            _internal_y: y,\n            _internal_height: drawHeight,\n            _internal_width: drawWidth\n        };\n    }\n    constructor(data){\n        this._private__data = data;\n    }\n}\nclass ImageWatermarkPaneView {\n    _internal_stateUpdate(state) {\n        if (state._internal_imageWidth !== undefined) {\n            this._private__imageWidth = state._internal_imageWidth;\n        }\n        if (state._internal_imageHeight !== undefined) {\n            this._private__imageHeight = state._internal_imageHeight;\n        }\n        if (state._internal_image !== undefined) {\n            this._private__image = state._internal_image;\n        }\n        this._internal_update();\n    }\n    _internal_optionsUpdate(options) {\n        this._private__options = options;\n        this._internal_update();\n    }\n    zOrder() {\n        return 'bottom';\n    }\n    _internal_update() {\n        this._private__rendererOptions = buildRendererOptions(this._private__options, this._private__image, this._private__imageWidth, this._private__imageHeight);\n    }\n    renderer() {\n        return new ImageWatermarkRenderer(this._private__rendererOptions);\n    }\n    constructor(options){\n        this._private__image = null;\n        this._private__imageWidth = 0; // don't draw until loaded\n        this._private__imageHeight = 0;\n        this._private__options = options;\n        this._private__rendererOptions = buildRendererOptions(this._private__options, this._private__image, this._private__imageWidth, this._private__imageHeight);\n    }\n}\nfunction buildRendererOptions(options, imgElement, imgWidth, imgHeight) {\n    return {\n        ...options,\n        _internal_imgElement: imgElement,\n        _internal_imgWidth: imgWidth,\n        _internal_imgHeight: imgHeight\n    };\n}\nfunction mergeOptionsWithDefaults$1(options) {\n    return {\n        ...imageWatermarkOptionsDefaults,\n        ...options\n    };\n}\nclass ImageWatermark {\n    updateAllViews() {\n        this._private__paneViews.forEach((pw)=>pw._internal_update());\n    }\n    paneViews() {\n        return this._private__paneViews;\n    }\n    attached(attachedParams) {\n        const { requestUpdate } = attachedParams;\n        this._private__requestUpdate = requestUpdate;\n        this._private__imgElement = new Image();\n        this._private__imgElement.onload = ()=>{\n            var _this__private__imgElement, _this__private__imgElement1;\n            var _this__private__imgElement_naturalHeight;\n            const imageHeight = (_this__private__imgElement_naturalHeight = (_this__private__imgElement = this._private__imgElement) === null || _this__private__imgElement === void 0 ? void 0 : _this__private__imgElement.naturalHeight) !== null && _this__private__imgElement_naturalHeight !== void 0 ? _this__private__imgElement_naturalHeight : 1;\n            var _this__private__imgElement_naturalWidth;\n            const imageWidth = (_this__private__imgElement_naturalWidth = (_this__private__imgElement1 = this._private__imgElement) === null || _this__private__imgElement1 === void 0 ? void 0 : _this__private__imgElement1.naturalWidth) !== null && _this__private__imgElement_naturalWidth !== void 0 ? _this__private__imgElement_naturalWidth : 1;\n            this._private__paneViews.forEach((pv)=>pv._internal_stateUpdate({\n                    _internal_imageHeight: imageHeight,\n                    _internal_imageWidth: imageWidth,\n                    _internal_image: this._private__imgElement\n                }));\n            if (this._private__requestUpdate) {\n                this._private__requestUpdate();\n            }\n        };\n        this._private__imgElement.src = this._private__imageUrl;\n    }\n    detached() {\n        this._private__requestUpdate = undefined;\n        this._private__imgElement = null;\n    }\n    _internal_applyOptions(options) {\n        this._private__options = mergeOptionsWithDefaults$1({\n            ...this._private__options,\n            ...options\n        });\n        this._private__updateOptions();\n        if (this._internal_requestUpdate) {\n            this._internal_requestUpdate();\n        }\n    }\n    _internal_requestUpdate() {\n        if (this._private__requestUpdate) {\n            this._private__requestUpdate();\n        }\n    }\n    _private__updateOptions() {\n        this._private__paneViews.forEach((pw)=>pw._internal_optionsUpdate(this._private__options));\n    }\n    constructor(imageUrl, options){\n        this._private__imgElement = null;\n        this._private__imageUrl = imageUrl;\n        this._private__options = mergeOptionsWithDefaults$1(options);\n        this._private__paneViews = [\n            new ImageWatermarkPaneView(this._private__options)\n        ];\n    }\n}\n/**\n * Creates an image watermark.\n *\n * @param pane - Target pane.\n * @param imageUrl - Image URL.\n * @param options - Watermark options.\n *\n * @returns Image watermark wrapper.\n *\n * @example\n * ```js\n * import { createImageWatermark } from 'lightweight-charts';\n *\n * const firstPane = chart.panes()[0];\n * const imageWatermark = createImageWatermark(firstPane, '/images/my-image.png', {\n *   alpha: 0.5,\n *   padding: 20,\n * });\n * // to change options\n * imageWatermark.applyOptions({ padding: 10 });\n * // to remove watermark from the pane\n * imageWatermark.detach();\n * ```\n */ function createImageWatermark(pane, imageUrl, options) {\n    return new PanePrimitiveWrapper(pane, new ImageWatermark(imageUrl, options));\n}\nclass SeriesPrimitiveAdapter {\n    detach() {\n        this._internal__series.detachPrimitive(this._internal__primitive);\n    }\n    getSeries() {\n        return this._internal__series;\n    }\n    applyOptions(options) {\n        if (this._internal__primitive && this._internal__primitive._internal_applyOptions) {\n            this._internal__primitive._internal_applyOptions(options);\n        }\n    }\n    _private__attach() {\n        this._internal__series.attachPrimitive(this._internal__primitive);\n    }\n    constructor(series, primitive){\n        this._internal__series = series;\n        this._internal__primitive = primitive;\n        this._private__attach();\n    }\n}\nconst seriesMarkerOptionsDefaults = {\n    zOrder: 'normal'\n};\nfunction size(barSpacing, coeff) {\n    const result = Math.min(Math.max(barSpacing, 12 /* Constants.MinShapeSize */ ), 30 /* Constants.MaxShapeSize */ ) * coeff;\n    return ceiledOdd(result);\n}\nfunction shapeSize(shape, originalSize) {\n    switch(shape){\n        case 'arrowDown':\n        case 'arrowUp':\n            return size(originalSize, 1);\n        case 'circle':\n            return size(originalSize, 0.8);\n        case 'square':\n            return size(originalSize, 0.7);\n    }\n}\nfunction calculateShapeHeight(barSpacing) {\n    return ceiledEven(size(barSpacing, 1));\n}\nfunction shapeMargin(barSpacing) {\n    return Math.max(size(barSpacing, 0.1), 3 /* Constants.MinShapeMargin */ );\n}\nfunction calculateAdjustedMargin(margin, hasSide, hasInBar) {\n    if (hasSide) {\n        return margin;\n    } else if (hasInBar) {\n        return Math.ceil(margin / 2);\n    }\n    return 0;\n}\nfunction drawArrow(up, ctx, coords, size) {\n    const arrowSize = shapeSize('arrowUp', size);\n    const halfArrowSize = (arrowSize - 1) / 2 * coords._internal_pixelRatio;\n    const baseSize = ceiledOdd(size / 2);\n    const halfBaseSize = (baseSize - 1) / 2 * coords._internal_pixelRatio;\n    ctx.beginPath();\n    if (up) {\n        ctx.moveTo(coords._internal_x - halfArrowSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x, coords._internal_y - halfArrowSize);\n        ctx.lineTo(coords._internal_x + halfArrowSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y + halfArrowSize);\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y + halfArrowSize);\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y);\n    } else {\n        ctx.moveTo(coords._internal_x - halfArrowSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x, coords._internal_y + halfArrowSize);\n        ctx.lineTo(coords._internal_x + halfArrowSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y - halfArrowSize);\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y - halfArrowSize);\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y);\n    }\n    ctx.fill();\n}\nfunction hitTestArrow(up, centerX, centerY, size, x, y) {\n    const arrowSize = shapeSize('arrowUp', size);\n    const halfArrowSize = (arrowSize - 1) / 2;\n    const baseSize = ceiledOdd(size / 2);\n    const halfBaseSize = (baseSize - 1) / 2;\n    const triangleTolerance = 3;\n    const rectTolerance = 2;\n    const baseLeft = centerX - halfBaseSize - rectTolerance;\n    const baseRight = centerX + halfBaseSize + rectTolerance;\n    const baseTop = up ? centerY : centerY - halfArrowSize;\n    const baseBottom = up ? centerY + halfArrowSize : centerY;\n    if (x >= baseLeft && x <= baseRight && y >= baseTop - rectTolerance && y <= baseBottom + rectTolerance) {\n        return true;\n    }\n    const isInTriangleBounds = ()=>{\n        const headLeft = centerX - halfArrowSize - triangleTolerance;\n        const headRight = centerX + halfArrowSize + triangleTolerance;\n        const headTop = up ? centerY - halfArrowSize - triangleTolerance : centerY;\n        const headBottom = up ? centerY : centerY + halfArrowSize + triangleTolerance;\n        if (x < headLeft || x > headRight || y < headTop || y > headBottom) {\n            return false;\n        }\n        const dx = Math.abs(x - centerX);\n        const dy = up ? Math.abs(y - centerY) // up arrow\n         : Math.abs(y - centerY); // down arrow\n        return dy + triangleTolerance >= dx / 2;\n    };\n    return isInTriangleBounds();\n}\nfunction drawCircle(ctx, coords, size) {\n    const circleSize = shapeSize('circle', size);\n    const halfSize = (circleSize - 1) / 2;\n    ctx.beginPath();\n    ctx.arc(coords._internal_x, coords._internal_y, halfSize * coords._internal_pixelRatio, 0, 2 * Math.PI, false);\n    ctx.fill();\n}\nfunction hitTestCircle(centerX, centerY, size, x, y) {\n    const circleSize = shapeSize('circle', size);\n    const tolerance = 2 + circleSize / 2;\n    const xOffset = centerX - x;\n    const yOffset = centerY - y;\n    const dist = Math.sqrt(xOffset * xOffset + yOffset * yOffset);\n    return dist <= tolerance;\n}\nfunction drawSquare(ctx, coords, size) {\n    const squareSize = shapeSize('square', size);\n    const halfSize = (squareSize - 1) * coords._internal_pixelRatio / 2;\n    const left = coords._internal_x - halfSize;\n    const top = coords._internal_y - halfSize;\n    ctx.fillRect(left, top, squareSize * coords._internal_pixelRatio, squareSize * coords._internal_pixelRatio);\n}\nfunction hitTestSquare(centerX, centerY, size, x, y) {\n    const squareSize = shapeSize('square', size);\n    const halfSize = (squareSize - 1) / 2;\n    const left = centerX - halfSize;\n    const top = centerY - halfSize;\n    return x >= left && x <= left + squareSize && y >= top && y <= top + squareSize;\n}\nfunction drawText(ctx, text, x, y, horizontalPixelRatio, verticalPixelRatio) {\n    ctx.save();\n    ctx.scale(horizontalPixelRatio, verticalPixelRatio);\n    ctx.fillText(text, x, y);\n    ctx.restore();\n}\nfunction hitTestText(textX, textY, textWidth, textHeight, x, y) {\n    const halfHeight = textHeight / 2;\n    return x >= textX && x <= textX + textWidth && y >= textY - halfHeight && y <= textY + halfHeight;\n}\nclass SeriesMarkersRenderer {\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal_setParams(fontSize, fontFamily, zOrder) {\n        if (this._private__fontSize !== fontSize || this._private__fontFamily !== fontFamily) {\n            this._private__fontSize = fontSize;\n            this._private__fontFamily = fontFamily;\n            this._private__font = makeFont(fontSize, fontFamily);\n            this._private__textWidthCache._internal_reset();\n        }\n        this._private__zOrder = zOrder;\n    }\n    _internal_hitTest(x, y) {\n        if (this._private__data === null || this._private__data._internal_visibleRange === null) {\n            return null;\n        }\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const item = this._private__data._internal_items[i];\n            if (item && hitTestItem(item, x, y)) {\n                var _item__internal_externalId;\n                return {\n                    zOrder: 'normal',\n                    externalId: (_item__internal_externalId = item._internal_externalId) !== null && _item__internal_externalId !== void 0 ? _item__internal_externalId : ''\n                };\n            }\n        }\n        return null;\n    }\n    draw(target) {\n        if (this._private__zOrder === 'aboveSeries') {\n            return;\n        }\n        target.useBitmapCoordinateSpace((scope)=>{\n            this._internal__drawImpl(scope);\n        });\n    }\n    drawBackground(target) {\n        if (this._private__zOrder !== 'aboveSeries') {\n            return;\n        }\n        target.useBitmapCoordinateSpace((scope)=>{\n            this._internal__drawImpl(scope);\n        });\n    }\n    _internal__drawImpl(param) {\n        let { context: ctx, horizontalPixelRatio, verticalPixelRatio } = param;\n        if (this._private__data === null || this._private__data._internal_visibleRange === null) {\n            return;\n        }\n        ctx.textBaseline = 'middle';\n        ctx.font = this._private__font;\n        for(let index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++){\n            const item = this._private__data._internal_items[index];\n            if (item._internal_text !== undefined) {\n                item._internal_text._internal_width = this._private__textWidthCache._internal_measureText(ctx, item._internal_text._internal_content);\n                item._internal_text._internal_height = this._private__fontSize;\n                item._internal_text._internal_x = item._internal_x - item._internal_text._internal_width / 2;\n            }\n            drawItem(item, ctx, horizontalPixelRatio, verticalPixelRatio);\n        }\n    }\n    constructor(){\n        this._private__data = null;\n        this._private__textWidthCache = new TextWidthCache();\n        this._private__fontSize = -1;\n        this._private__fontFamily = '';\n        this._private__font = '';\n        this._private__zOrder = 'normal';\n    }\n}\nfunction bitmapShapeItemCoordinates(item, horizontalPixelRatio, verticalPixelRatio) {\n    const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n    const correction = tickWidth % 2 / 2;\n    return {\n        _internal_x: Math.round(item._internal_x * horizontalPixelRatio) + correction,\n        _internal_y: item._internal_y * verticalPixelRatio,\n        _internal_pixelRatio: horizontalPixelRatio\n    };\n}\nfunction drawItem(item, ctx, horizontalPixelRatio, verticalPixelRatio) {\n    ctx.fillStyle = item._internal_color;\n    if (item._internal_text !== undefined) {\n        drawText(ctx, item._internal_text._internal_content, item._internal_text._internal_x, item._internal_text._internal_y, horizontalPixelRatio, verticalPixelRatio);\n    }\n    drawShape(item, ctx, bitmapShapeItemCoordinates(item, horizontalPixelRatio, verticalPixelRatio));\n}\nfunction drawShape(item, ctx, coordinates) {\n    if (item._internal_size === 0) {\n        return;\n    }\n    switch(item._internal_shape){\n        case 'arrowDown':\n            drawArrow(false, ctx, coordinates, item._internal_size);\n            return;\n        case 'arrowUp':\n            drawArrow(true, ctx, coordinates, item._internal_size);\n            return;\n        case 'circle':\n            drawCircle(ctx, coordinates, item._internal_size);\n            return;\n        case 'square':\n            drawSquare(ctx, coordinates, item._internal_size);\n            return;\n    }\n    ensureNever(item._internal_shape);\n}\nfunction hitTestItem(item, x, y) {\n    if (item._internal_text !== undefined && hitTestText(item._internal_text._internal_x, item._internal_text._internal_y, item._internal_text._internal_width, item._internal_text._internal_height, x, y)) {\n        return true;\n    }\n    return hitTestShape(item, x, y);\n}\nfunction hitTestShape(item, x, y) {\n    if (item._internal_size === 0) {\n        return false;\n    }\n    switch(item._internal_shape){\n        case 'arrowDown':\n            return hitTestArrow(true, item._internal_x, item._internal_y, item._internal_size, x, y);\n        case 'arrowUp':\n            return hitTestArrow(false, item._internal_x, item._internal_y, item._internal_size, x, y);\n        case 'circle':\n            return hitTestCircle(item._internal_x, item._internal_y, item._internal_size, x, y);\n        case 'square':\n            return hitTestSquare(item._internal_x, item._internal_y, item._internal_size, x, y);\n    }\n}\nfunction isPriceMarker(position) {\n    return position === 'atPriceTop' || position === 'atPriceBottom' || position === 'atPriceMiddle';\n}\nfunction getPrice(seriesData, marker) {\n    if (isPriceMarker(marker.position) && marker.price !== undefined) {\n        return marker.price;\n    }\n    if (isValueData(seriesData)) {\n        return seriesData.value;\n    }\n    if (isOhlcData(seriesData)) {\n        if (marker.position === 'inBar') {\n            return seriesData.close;\n        }\n        if (marker.position === 'aboveBar') {\n            return seriesData.high;\n        }\n        if (marker.position === 'belowBar') {\n            return seriesData.low;\n        }\n    }\n    return;\n}\n// eslint-disable-next-line max-params, complexity\nfunction fillSizeAndY(rendererItem, marker, seriesData, offsets, textHeight, shapeMargin, series, chart) {\n    const price = getPrice(seriesData, marker);\n    if (price === undefined) {\n        return;\n    }\n    const ignoreOffset = isPriceMarker(marker.position);\n    const timeScale = chart.timeScale();\n    const sizeMultiplier = isNumber(marker.size) ? Math.max(marker.size, 0) : 1;\n    const shapeSize = calculateShapeHeight(timeScale.options().barSpacing) * sizeMultiplier;\n    const halfSize = shapeSize / 2;\n    rendererItem._internal_size = shapeSize;\n    const position = marker.position;\n    switch(position){\n        case 'inBar':\n        case 'atPriceMiddle':\n            {\n                rendererItem._internal_y = ensureNotNull(series.priceToCoordinate(price));\n                if (rendererItem._internal_text !== undefined) {\n                    rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */ );\n                }\n                return;\n            }\n        case 'aboveBar':\n        case 'atPriceTop':\n            {\n                const offset = ignoreOffset ? 0 : offsets._internal_aboveBar;\n                rendererItem._internal_y = ensureNotNull(series.priceToCoordinate(price)) - halfSize - offset;\n                if (rendererItem._internal_text !== undefined) {\n                    rendererItem._internal_text._internal_y = rendererItem._internal_y - halfSize - textHeight * (0.5 + 0.1 /* Constants.TextMargin */ );\n                    offsets._internal_aboveBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */ );\n                }\n                if (!ignoreOffset) {\n                    offsets._internal_aboveBar += shapeSize + shapeMargin;\n                }\n                return;\n            }\n        case 'belowBar':\n        case 'atPriceBottom':\n            {\n                const offset = ignoreOffset ? 0 : offsets._internal_belowBar;\n                rendererItem._internal_y = ensureNotNull(series.priceToCoordinate(price)) + halfSize + offset;\n                if (rendererItem._internal_text !== undefined) {\n                    rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */ );\n                    offsets._internal_belowBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */ );\n                }\n                if (!ignoreOffset) {\n                    offsets._internal_belowBar += shapeSize + shapeMargin;\n                }\n                return;\n            }\n    }\n}\nfunction isValueData(data) {\n    // eslint-disable-next-line no-restricted-syntax\n    return 'value' in data && typeof data.value === 'number';\n}\nfunction isOhlcData(data) {\n    // eslint-disable-next-line no-restricted-syntax\n    return 'open' in data && 'high' in data && 'low' in data && 'close' in data;\n}\nclass SeriesMarkersPaneView {\n    renderer() {\n        if (!this._private__series.options().visible) {\n            return null;\n        }\n        if (this._private__invalidated) {\n            this._internal__makeValid();\n        }\n        const layout = this._private__chart.options()['layout'];\n        this._private__renderer._internal_setParams(layout.fontSize, layout.fontFamily, this._private__options.zOrder);\n        this._private__renderer._internal_setData(this._private__data);\n        return this._private__renderer;\n    }\n    _internal_setMarkers(markers) {\n        this._private__markers = markers;\n        this._internal_update('data');\n    }\n    _internal_update(updateType) {\n        this._private__invalidated = true;\n        if (updateType === 'data') {\n            this._private__dataInvalidated = true;\n        }\n    }\n    _internal_updateOptions(options) {\n        this._private__invalidated = true;\n        this._private__options = options;\n    }\n    zOrder() {\n        return this._private__options.zOrder === 'aboveSeries' ? 'top' : this._private__options.zOrder;\n    }\n    _internal__makeValid() {\n        const timeScale = this._private__chart.timeScale();\n        const seriesMarkers = this._private__markers;\n        if (this._private__dataInvalidated) {\n            this._private__data._internal_items = seriesMarkers.map((marker)=>({\n                    _internal_time: marker.time,\n                    _internal_x: 0,\n                    _internal_y: 0,\n                    _internal_size: 0,\n                    _internal_shape: marker.shape,\n                    _internal_color: marker.color,\n                    _internal_externalId: marker.id,\n                    _internal_internalId: marker._internal_internalId,\n                    _internal_text: undefined\n                }));\n            this._private__dataInvalidated = false;\n        }\n        const layoutOptions = this._private__chart.options()['layout'];\n        this._private__data._internal_visibleRange = null;\n        const visibleBars = timeScale.getVisibleLogicalRange();\n        if (visibleBars === null) {\n            return;\n        }\n        const visibleBarsRange = new RangeImpl(Math.floor(visibleBars.from), Math.ceil(visibleBars.to));\n        const firstValue = this._private__series.data()[0];\n        if (firstValue === null) {\n            return;\n        }\n        if (this._private__data._internal_items.length === 0) {\n            return;\n        }\n        let prevTimeIndex = NaN;\n        const shapeMargin$1 = shapeMargin(timeScale.options().barSpacing);\n        const offsets = {\n            _internal_aboveBar: shapeMargin$1,\n            _internal_belowBar: shapeMargin$1\n        };\n        this._private__data._internal_visibleRange = visibleTimedValues(this._private__data._internal_items, visibleBarsRange, true);\n        for(let index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++){\n            const marker = seriesMarkers[index];\n            if (marker.time !== prevTimeIndex) {\n                // new bar, reset stack counter\n                offsets._internal_aboveBar = shapeMargin$1;\n                offsets._internal_belowBar = shapeMargin$1;\n                prevTimeIndex = marker.time;\n            }\n            const rendererItem = this._private__data._internal_items[index];\n            rendererItem._internal_x = ensureNotNull(timeScale.logicalToCoordinate(marker.time));\n            if (marker.text !== undefined && marker.text.length > 0) {\n                rendererItem._internal_text = {\n                    _internal_content: marker.text,\n                    _internal_x: 0,\n                    _internal_y: 0,\n                    _internal_width: 0,\n                    _internal_height: 0\n                };\n            }\n            const dataAt = this._private__series.dataByIndex(marker.time, 0 /* MismatchDirection.None */ );\n            if (dataAt === null) {\n                continue;\n            }\n            fillSizeAndY(rendererItem, marker, dataAt, offsets, layoutOptions.fontSize, shapeMargin$1, this._private__series, this._private__chart);\n        }\n        this._private__invalidated = false;\n    }\n    constructor(series, chart, options){\n        this._private__markers = [];\n        this._private__invalidated = true;\n        this._private__dataInvalidated = true;\n        this._private__renderer = new SeriesMarkersRenderer();\n        this._private__series = series;\n        this._private__chart = chart;\n        this._private__data = {\n            _internal_items: [],\n            _internal_visibleRange: null\n        };\n        this._private__options = options;\n    }\n}\nfunction mergeOptionsWithDefaults(options) {\n    return {\n        ...seriesMarkerOptionsDefaults,\n        ...options\n    };\n}\nclass SeriesMarkersPrimitive {\n    attached(param) {\n        this._private__recalculateMarkers();\n        this._private__chart = param.chart;\n        this._private__series = param.series;\n        this._private__paneView = new SeriesMarkersPaneView(this._private__series, ensureNotNull(this._private__chart), this._private__options);\n        this._private__requestUpdate = param.requestUpdate;\n        this._private__series.subscribeDataChanged((scope)=>this._private__onDataChanged(scope));\n        this._private__recalculationRequired = true;\n        this._internal_requestUpdate();\n    }\n    _internal_requestUpdate() {\n        if (this._private__requestUpdate) {\n            this._private__requestUpdate();\n        }\n    }\n    detached() {\n        if (this._private__series && this._private__dataChangedHandler) {\n            this._private__series.unsubscribeDataChanged(this._private__dataChangedHandler);\n        }\n        this._private__chart = null;\n        this._private__series = null;\n        this._private__paneView = null;\n        this._private__dataChangedHandler = null;\n    }\n    _internal_setMarkers(markers) {\n        this._private__recalculationRequired = true;\n        this._private__markers = markers;\n        this._private__recalculateMarkers();\n        this._private__autoScaleMarginsInvalidated = true;\n        this._private__markersPositions = null;\n        this._internal_requestUpdate();\n    }\n    _internal_markers() {\n        return this._private__markers;\n    }\n    paneViews() {\n        return this._private__paneView ? [\n            this._private__paneView\n        ] : [];\n    }\n    updateAllViews() {\n        this._private__updateAllViews();\n    }\n    hitTest(x, y) {\n        if (this._private__paneView) {\n            var _this__private__paneView_renderer;\n            var _this__private__paneView_renderer__internal_hitTest;\n            return (_this__private__paneView_renderer__internal_hitTest = (_this__private__paneView_renderer = this._private__paneView.renderer()) === null || _this__private__paneView_renderer === void 0 ? void 0 : _this__private__paneView_renderer._internal_hitTest(x, y)) !== null && _this__private__paneView_renderer__internal_hitTest !== void 0 ? _this__private__paneView_renderer__internal_hitTest : null;\n        }\n        return null;\n    }\n    autoscaleInfo(startTimePoint, endTimePoint) {\n        if (this._private__paneView) {\n            const margins = this._private__getAutoScaleMargins();\n            if (margins) {\n                return {\n                    priceRange: null,\n                    margins: margins\n                };\n            }\n        }\n        return null;\n    }\n    _internal_applyOptions(options) {\n        this._private__options = mergeOptionsWithDefaults({\n            ...this._private__options,\n            ...options\n        });\n        if (this._internal_requestUpdate) {\n            this._internal_requestUpdate();\n        }\n    }\n    _private__getAutoScaleMargins() {\n        const chart = ensureNotNull(this._private__chart);\n        const barSpacing = chart.timeScale().options().barSpacing;\n        if (this._private__autoScaleMarginsInvalidated || barSpacing !== this._private__cachedBarSpacing) {\n            this._private__cachedBarSpacing = barSpacing;\n            if (this._private__markers.length > 0) {\n                const shapeMargin$1 = shapeMargin(barSpacing);\n                const marginValue = calculateShapeHeight(barSpacing) * 1.5 + shapeMargin$1 * 2;\n                const positions = this._private__getMarkerPositions();\n                this._private__autoScaleMargins = {\n                    above: calculateAdjustedMargin(marginValue, positions.aboveBar, positions.inBar),\n                    below: calculateAdjustedMargin(marginValue, positions.belowBar, positions.inBar)\n                };\n            } else {\n                this._private__autoScaleMargins = null;\n            }\n            this._private__autoScaleMarginsInvalidated = false;\n        }\n        return this._private__autoScaleMargins;\n    }\n    _private__getMarkerPositions() {\n        if (this._private__markersPositions === null) {\n            this._private__markersPositions = this._private__markers.reduce((acc, marker)=>{\n                if (!acc[marker.position]) {\n                    acc[marker.position] = true;\n                }\n                return acc;\n            }, {\n                inBar: false,\n                aboveBar: false,\n                belowBar: false,\n                atPriceTop: false,\n                atPriceBottom: false,\n                atPriceMiddle: false\n            });\n        }\n        return this._private__markersPositions;\n    }\n    _private__recalculateMarkers() {\n        var _this__private__series;\n        if (!this._private__recalculationRequired || !this._private__chart || !this._private__series) {\n            return;\n        }\n        const timeScale = this._private__chart.timeScale();\n        const seriesData = (_this__private__series = this._private__series) === null || _this__private__series === void 0 ? void 0 : _this__private__series.data();\n        if (timeScale.getVisibleLogicalRange() == null || !this._private__series || seriesData.length === 0) {\n            this._private__indexedMarkers = [];\n            return;\n        }\n        const firstDataIndex = timeScale.timeToIndex(ensureNotNull(seriesData[0].time), true);\n        this._private__indexedMarkers = this._private__markers.map((marker, index)=>{\n            const timePointIndex = timeScale.timeToIndex(marker.time, true);\n            const searchMode = timePointIndex < firstDataIndex ? 1 /* MismatchDirection.NearestRight */  : -1 /* MismatchDirection.NearestLeft */ ;\n            const seriesDataByIndex = ensureNotNull(this._private__series).dataByIndex(timePointIndex, searchMode);\n            const finalIndex = timeScale.timeToIndex(ensureNotNull(seriesDataByIndex).time, false);\n            // You must explicitly define the types so that the minification build processes the field names correctly\n            const baseMarker = {\n                time: finalIndex,\n                position: marker.position,\n                shape: marker.shape,\n                color: marker.color,\n                id: marker.id,\n                _internal_internalId: index,\n                text: marker.text,\n                size: marker.size,\n                price: marker.price,\n                _internal_originalTime: marker.time\n            };\n            if (marker.position === 'atPriceTop' || marker.position === 'atPriceBottom' || marker.position === 'atPriceMiddle') {\n                if (marker.price === undefined) {\n                    throw new Error(\"Price is required for position \".concat(marker.position));\n                }\n                return {\n                    ...baseMarker,\n                    position: marker.position,\n                    price: marker.price\n                };\n            } else {\n                return {\n                    ...baseMarker,\n                    position: marker.position,\n                    price: marker.price\n                };\n            }\n        });\n        this._private__recalculationRequired = false;\n    }\n    _private__updateAllViews(updateType) {\n        if (this._private__paneView) {\n            this._private__recalculateMarkers();\n            this._private__paneView._internal_setMarkers(this._private__indexedMarkers);\n            this._private__paneView._internal_updateOptions(this._private__options);\n            this._private__paneView._internal_update(updateType);\n        }\n    }\n    _private__onDataChanged(scope) {\n        this._private__recalculationRequired = true;\n        this._internal_requestUpdate();\n    }\n    constructor(options){\n        this._private__paneView = null;\n        this._private__markers = [];\n        this._private__indexedMarkers = [];\n        this._private__dataChangedHandler = null;\n        this._private__series = null;\n        this._private__chart = null;\n        this._private__autoScaleMarginsInvalidated = true;\n        this._private__autoScaleMargins = null;\n        this._private__markersPositions = null;\n        this._private__cachedBarSpacing = null;\n        this._private__recalculationRequired = true;\n        this._private__options = mergeOptionsWithDefaults(options);\n    }\n}\nclass SeriesMarkersPrimitiveWrapper extends SeriesPrimitiveAdapter {\n    setMarkers(markers) {\n        this._internal__primitive._internal_setMarkers(markers);\n    }\n    markers() {\n        return this._internal__primitive._internal_markers();\n    }\n    constructor(series, primitive, markers){\n        super(series, primitive);\n        if (markers) {\n            this.setMarkers(markers);\n        }\n    }\n}\n/**\n * A function to create a series markers primitive.\n *\n * @param series - The series to which the primitive will be attached.\n *\n * @param markers - An array of markers to be displayed on the series.\n *\n * @param options - Options for the series markers plugin.\n *\n * @example\n * ```js\n * import { createSeriesMarkers } from 'lightweight-charts';\n *\n *\tconst seriesMarkers = createSeriesMarkers(\n *\t\tseries,\n *\t\t[\n *\t\t\t{\n *\t\t\t\tcolor: 'green',\n *\t\t\t\tposition: 'inBar',\n * \t\t\t\tshape: 'arrowDown',\n *\t\t\t\ttime: 1556880900,\n *\t\t\t},\n *\t\t]\n *\t);\n *  // and then you can modify the markers\n *  // set it to empty array to remove all markers\n *  seriesMarkers.setMarkers([]);\n *\n *  // `seriesMarkers.markers()` returns current markers\n * ```\n */ function createSeriesMarkers(series, markers, options) {\n    const wrapper = new SeriesMarkersPrimitiveWrapper(series, new SeriesMarkersPrimitive(options !== null && options !== void 0 ? options : {}));\n    if (markers) {\n        wrapper.setMarkers(markers);\n    }\n    return wrapper;\n}\nclass ExpiringMarkerManager {\n    _internal_setMarker(marker, key, timeout) {\n        this._internal_clearMarker(key);\n        if (timeout !== undefined) {\n            const timeoutId = window.setTimeout(()=>{\n                this._private__markers.delete(key);\n                this._private__triggerUpdate();\n            }, timeout);\n            const markerWithTimeout = {\n                ...marker,\n                _internal_timeoutId: timeoutId,\n                _internal_expiresAt: Date.now() + timeout\n            };\n            this._private__markers.set(key, markerWithTimeout);\n        } else {\n            // For markers without timeout, we set timeoutId and expiresAt to undefined\n            this._private__markers.set(key, {\n                ...marker,\n                _internal_timeoutId: undefined,\n                _internal_expiresAt: undefined\n            });\n        }\n        this._private__triggerUpdate();\n    }\n    _internal_clearMarker(key) {\n        const marker = this._private__markers.get(key);\n        if (marker && marker._internal_timeoutId !== undefined) {\n            window.clearTimeout(marker._internal_timeoutId);\n        }\n        this._private__markers.delete(key);\n        this._private__triggerUpdate();\n    }\n    _internal_clearAllMarkers() {\n        for (const [point] of this._private__markers){\n            this._internal_clearMarker(point);\n        }\n    }\n    _internal_getMarkers() {\n        const now = Date.now();\n        const activeMarkers = [];\n        for (const [time, marker] of this._private__markers){\n            if (!marker._internal_expiresAt || marker._internal_expiresAt > now) {\n                activeMarkers.push({\n                    time: marker.time,\n                    sign: marker.sign,\n                    value: marker.value\n                });\n            } else {\n                this._internal_clearMarker(time);\n            }\n        }\n        return activeMarkers;\n    }\n    _internal_setUpdateCallback(callback) {\n        this._private__updateCallback = callback;\n    }\n    _private__triggerUpdate() {\n        if (this._private__updateCallback) {\n            this._private__updateCallback();\n        }\n    }\n    constructor(updateCallback){\n        this._private__markers = new Map();\n        this._private__updateCallback = updateCallback;\n    }\n}\nconst upDownMarkersPluginOptionDefaults = {\n    positiveColor: '#22AB94',\n    negativeColor: '#F7525F',\n    updateVisibilityDuration: 5000\n};\nclass MarkersPrimitiveRenderer {\n    draw(target) {\n        target.useBitmapCoordinateSpace((scope)=>{\n            const ctx = scope.context;\n            const tickWidth = Math.max(1, Math.floor(scope.horizontalPixelRatio));\n            const correction = tickWidth % 2 / 2;\n            const rad = 4 /* Constants.Radius */  * scope.verticalPixelRatio + correction;\n            this._private__data.forEach((item)=>{\n                const centreX = Math.round(item._internal_x * scope.horizontalPixelRatio) + correction;\n                ctx.beginPath();\n                const color = this._private__getColor(item._internal_sign);\n                ctx.fillStyle = color;\n                ctx.arc(centreX, item._internal_y * scope.verticalPixelRatio, rad, 0, 2 * Math.PI, false);\n                ctx.fill();\n                if (item._internal_sign) {\n                    ctx.strokeStyle = color;\n                    ctx.lineWidth = Math.floor(2 /* Constants.ArrowLineWidth */  * scope.horizontalPixelRatio);\n                    ctx.beginPath();\n                    ctx.moveTo((item._internal_x - 4.7 /* Constants.ArrowSize */ ) * scope.horizontalPixelRatio + correction, (item._internal_y - 7 /* Constants.ArrowOffset */  * item._internal_sign) * scope.verticalPixelRatio);\n                    ctx.lineTo(item._internal_x * scope.horizontalPixelRatio + correction, (item._internal_y - 7 /* Constants.ArrowOffset */  * item._internal_sign - 7 /* Constants.ArrowOffset */  * item._internal_sign * 0.5 /* Constants.VerticalScale */ ) * scope.verticalPixelRatio);\n                    ctx.lineTo((item._internal_x + 4.7 /* Constants.ArrowSize */ ) * scope.horizontalPixelRatio + correction, (item._internal_y - 7 /* Constants.ArrowOffset */  * item._internal_sign) * scope.verticalPixelRatio);\n                    ctx.stroke();\n                }\n            });\n        });\n    }\n    _private__getColor(sign) {\n        if (sign === 0) {\n            return this._private__neutralColor;\n        }\n        return sign > 0 ? this._private__positiveColor : this._private__negativeColor;\n    }\n    constructor(data, neutralColor, negativeColor, positiveColor){\n        this._private__data = data;\n        this._private__neutralColor = neutralColor;\n        this._private__negativeColor = negativeColor;\n        this._private__positiveColor = positiveColor;\n    }\n}\nfunction isAreaStyleOptions(opts, seriesType) {\n    return seriesType === 'Area';\n}\nfunction getNeutralColor(opts, seriesType) {\n    if (isAreaStyleOptions(opts, seriesType)) {\n        return opts.lineColor;\n    }\n    return opts.color;\n}\nclass MarkersPrimitivePaneView {\n    _internal_update(markers) {\n        this._private__data = markers.map((marker)=>{\n            const y = this._private__series.priceToCoordinate(marker.value);\n            if (y === null) {\n                return null;\n            }\n            const x = ensureNotNull(this._private__timeScale.timeToCoordinate(marker.time));\n            return {\n                _internal_x: x,\n                _internal_y: y,\n                _internal_sign: marker.sign\n            };\n        }).filter(notNull);\n    }\n    renderer() {\n        const options = this._private__series.options();\n        const seriesType = this._private__series.seriesType();\n        const neutralColor = getNeutralColor(options, seriesType);\n        return new MarkersPrimitiveRenderer(this._private__data, neutralColor, this._private__options.negativeColor, this._private__options.positiveColor);\n    }\n    constructor(series, timeScale, options){\n        this._private__data = [];\n        this._private__series = series;\n        this._private__timeScale = timeScale;\n        this._private__options = options;\n    }\n}\nfunction isLineData(item, type) {\n    return type === 'Line' || type === 'Area';\n}\nclass UpDownMarkersPrimitive {\n    _internal_applyOptions(options) {\n        this._private__options = {\n            ...this._private__options,\n            ...options\n        };\n        this._internal_requestUpdate();\n    }\n    _internal_setMarkers(markers) {\n        this._private__markersManager._internal_clearAllMarkers();\n        const horzBehaviour = this._private__horzScaleBehavior;\n        if (!horzBehaviour) {\n            return;\n        }\n        markers.forEach((marker)=>{\n            this._private__markersManager._internal_setMarker(marker, horzBehaviour.key(marker.time));\n        });\n    }\n    _internal_markers() {\n        return this._private__markersManager._internal_getMarkers();\n    }\n    _internal_requestUpdate() {\n        var _this__private__requestUpdate, _this;\n        (_this__private__requestUpdate = (_this = this)._private__requestUpdate) === null || _this__private__requestUpdate === void 0 ? void 0 : _this__private__requestUpdate.call(_this);\n    }\n    attached(params) {\n        const { chart, series, requestUpdate, horzScaleBehavior } = params;\n        this._private__chart = chart;\n        this._private__series = series;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        const seriesType = this._private__series.seriesType();\n        if (seriesType !== 'Area' && seriesType !== 'Line') {\n            throw new Error('UpDownMarkersPrimitive is only supported for Area and Line series types');\n        }\n        this._private__paneViews = [\n            new MarkersPrimitivePaneView(this._private__series, this._private__chart.timeScale(), this._private__options)\n        ];\n        this._private__requestUpdate = requestUpdate;\n        this._internal_requestUpdate();\n    }\n    detached() {\n        this._private__chart = undefined;\n        this._private__series = undefined;\n        this._private__requestUpdate = undefined;\n    }\n    _internal_chart() {\n        return ensureDefined(this._private__chart);\n    }\n    _internal_series() {\n        return ensureDefined(this._private__series);\n    }\n    updateAllViews() {\n        this._private__paneViews.forEach((pw)=>pw._internal_update(this._internal_markers()));\n    }\n    paneViews() {\n        return this._private__paneViews;\n    }\n    _internal_setData(data) {\n        if (!this._private__series) {\n            throw new Error('Primitive not attached to series');\n        }\n        const seriesType = this._private__series.seriesType();\n        this._private__managedDataPoints.clear();\n        const horzBehaviour = this._private__horzScaleBehavior;\n        if (horzBehaviour) {\n            data.forEach((d)=>{\n                if (isFulfilledData(d) && isLineData(d, seriesType)) {\n                    this._private__managedDataPoints.set(horzBehaviour.key(d.time), d.value);\n                }\n            });\n        }\n        ensureDefined(this._private__series).setData(data);\n    }\n    _internal_update(data, historicalUpdate) {\n        if (!this._private__series || !this._private__horzScaleBehavior) {\n            throw new Error('Primitive not attached to series');\n        }\n        const seriesType = this._private__series.seriesType();\n        const horzKey = this._private__horzScaleBehavior.key(data.time);\n        if (isWhitespaceData(data)) {\n            this._private__managedDataPoints.delete(horzKey);\n        }\n        if (isFulfilledData(data) && isLineData(data, seriesType)) {\n            const existingPrice = this._private__managedDataPoints.get(horzKey);\n            if (existingPrice) {\n                this._private__markersManager._internal_setMarker({\n                    time: data.time,\n                    value: data.value,\n                    sign: getSign(data.value, existingPrice)\n                }, horzKey, this._private__options.updateVisibilityDuration);\n            }\n        }\n        ensureDefined(this._private__series).update(data, historicalUpdate);\n    }\n    _internal_clearMarkers() {\n        this._private__markersManager._internal_clearAllMarkers();\n    }\n    constructor(options){\n        this._private__chart = undefined;\n        this._private__series = undefined;\n        this._private__paneViews = [];\n        this._private__horzScaleBehavior = null;\n        this._private__managedDataPoints = new Map();\n        this._private__markersManager = new ExpiringMarkerManager(()=>this._internal_requestUpdate());\n        this._private__options = {\n            ...upDownMarkersPluginOptionDefaults,\n            ...options\n        };\n    }\n}\nfunction getSign(newValue, oldValue) {\n    if (newValue === oldValue) {\n        return 0;\n    }\n    return newValue - oldValue > 0 ? 1 : -1;\n}\nclass SeriesUpDownMarkerPrimitiveWrapper extends SeriesPrimitiveAdapter {\n    setData(data) {\n        return this._internal__primitive._internal_setData(data);\n    }\n    update(data, historicalUpdate) {\n        return this._internal__primitive._internal_update(data, historicalUpdate);\n    }\n    markers() {\n        return this._internal__primitive._internal_markers();\n    }\n    setMarkers(markers) {\n        return this._internal__primitive._internal_setMarkers(markers);\n    }\n    clearMarkers() {\n        return this._internal__primitive._internal_clearMarkers();\n    }\n}\n/**\n * Creates and attaches the Series Up Down Markers Plugin.\n *\n * @param series - Series to which attach the Up Down Markers Plugin\n * @param options - options for the Up Down Markers Plugin\n *\n * @returns Api for Series Up Down Marker Plugin. {@link ISeriesUpDownMarkerPluginApi}\n *\n * @example\n * ```js\n * import { createUpDownMarkers, createChart, LineSeries } from 'lightweight-charts';\n *\n * const chart = createChart('container');\n * const lineSeries = chart.addSeries(LineSeries);\n * const upDownMarkers = createUpDownMarkers(lineSeries, {\n *     positiveColor: '#22AB94',\n *     negativeColor: '#F7525F',\n *     updateVisibilityDuration: 5000,\n * });\n * // to add some data\n * upDownMarkers.setData(\n *     [\n *         { time: '2020-02-02', value: 12.34 },\n *         //... more line series data\n *     ]\n * );\n * // ... Update some values\n * upDownMarkers.update({ time: '2020-02-02', value: 13.54 }, true);\n * // to remove plugin from the series\n * upDownMarkers.detach();\n * ```\n */ function createUpDownMarkers(series) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const wrapper = new SeriesUpDownMarkerPrimitiveWrapper(series, new UpDownMarkersPrimitive(options));\n    return wrapper;\n}\n/// <reference types=\"_build-time-constants\" />\nconst customSeriesDefaultOptions = {\n    ...seriesOptionsDefaults,\n    ...customStyleDefaults$1\n};\n/**\n * Returns the current version as a string. For example `'3.3.0'`.\n */ function version() {\n    return \"5.0.7\";\n}\n\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"MMMM\");\n$RefreshReg$(_c1, \"MMM\");\n$RefreshReg$(_c2, \"MM\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\n"));

/***/ })

}]);