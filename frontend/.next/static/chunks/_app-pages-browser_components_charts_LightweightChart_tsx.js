"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_components_charts_LightweightChart_tsx"],{

/***/ "(app-pages-browser)/./components/charts/LightweightChart.tsx":
/*!************************************************!*\
  !*** ./components/charts/LightweightChart.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LightweightChart)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n// Dynamic import state\nlet chartLibrary = null;\n// Load lightweight-charts dynamically\nconst loadChartLibrary = async ()=>{\n    if (chartLibrary) return chartLibrary;\n    try {\n        console.log('Attempting to load lightweight-charts...');\n        const lib = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_lightweight-charts_dist_lightweight-charts_development_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! lightweight-charts */ \"(app-pages-browser)/../node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\"));\n        console.log('Lightweight-charts loaded:', !!lib);\n        console.log('Available methods:', Object.keys(lib));\n        console.log('createChart function:', typeof lib.createChart);\n        chartLibrary = lib;\n        return lib;\n    } catch (error) {\n        console.error('Failed to load lightweight-charts:', error);\n        return null;\n    }\n};\n// Error boundary for chart-specific errors\nconst withChartErrorHandling = (fn, context)=>{\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        try {\n            return fn(...args);\n        } catch (error) {\n            console.error(\"Chart Error (\".concat(context, \"):\"), error);\n        // Don't throw, just log and continue\n        }\n    };\n};\nfunction LightweightChart(param) {\n    let { data, positions = [], height, onCrosshairMove } = param;\n    _s();\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const volumeSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isChartReady, setIsChartReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isLibraryLoaded, setIsLibraryLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [chartLib, setChartLib] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    console.log('LightweightChart render:', {\n        dataLength: data.length,\n        isLibraryLoaded,\n        isChartReady,\n        hasChartLib: !!chartLib\n    });\n    // Load library on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LightweightChart.useEffect\": ()=>{\n            const initLibrary = {\n                \"LightweightChart.useEffect.initLibrary\": async ()=>{\n                    console.log('Loading chart library...');\n                    const lib = await loadChartLibrary();\n                    if (lib) {\n                        console.log('Chart library loaded successfully');\n                        setChartLib(lib);\n                        setIsLibraryLoaded(true);\n                    } else {\n                        console.error('Failed to load chart library');\n                    }\n                }\n            }[\"LightweightChart.useEffect.initLibrary\"];\n            initLibrary();\n        }\n    }[\"LightweightChart.useEffect\"], []);\n    // Initialize chart\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LightweightChart.useEffect\": ()=>{\n            if (!chartContainerRef.current || !isLibraryLoaded || !chartLib) {\n                console.log('Chart init blocked:', {\n                    hasContainer: !!chartContainerRef.current,\n                    isLibraryLoaded,\n                    hasChartLib: !!chartLib\n                });\n                return;\n            }\n            console.log('Initializing chart...');\n            const initializeChart = withChartErrorHandling({\n                \"LightweightChart.useEffect.initializeChart\": ()=>{\n                    var _chartLib_CrosshairMode, _chartLib_LineStyle, _chartLib_LineStyle1, _chartContainerRef_current, _chartContainerRef_current1;\n                    // Create chart using loaded library\n                    console.log('Creating chart with library:', chartLib);\n                    console.log('Available createChart:', typeof chartLib.createChart);\n                    const chartContainer = chartContainerRef.current;\n                    const chart = chartLib.createChart(chartContainer, {\n                        width: chartContainer.clientWidth,\n                        height: height - 4,\n                        layout: {\n                            background: {\n                                color: '#0f172a'\n                            },\n                            textColor: '#94a3b8'\n                        },\n                        grid: {\n                            vertLines: {\n                                color: '#1e293b'\n                            },\n                            horzLines: {\n                                color: '#1e293b'\n                            }\n                        },\n                        crosshair: {\n                            mode: ((_chartLib_CrosshairMode = chartLib.CrosshairMode) === null || _chartLib_CrosshairMode === void 0 ? void 0 : _chartLib_CrosshairMode.Normal) || 1,\n                            vertLine: {\n                                color: '#3b82f6',\n                                width: 1,\n                                style: ((_chartLib_LineStyle = chartLib.LineStyle) === null || _chartLib_LineStyle === void 0 ? void 0 : _chartLib_LineStyle.Dashed) || 2\n                            },\n                            horzLine: {\n                                color: '#3b82f6',\n                                width: 1,\n                                style: ((_chartLib_LineStyle1 = chartLib.LineStyle) === null || _chartLib_LineStyle1 === void 0 ? void 0 : _chartLib_LineStyle1.Dashed) || 2\n                            }\n                        },\n                        rightPriceScale: {\n                            borderColor: '#334155',\n                            textColor: '#94a3b8'\n                        },\n                        timeScale: {\n                            borderColor: '#334155',\n                            textColor: '#94a3b8',\n                            timeVisible: true,\n                            secondsVisible: false\n                        },\n                        handleScroll: {\n                            mouseWheel: true,\n                            pressedMouseMove: true,\n                            horzTouchDrag: true,\n                            vertTouchDrag: true\n                        },\n                        handleScale: {\n                            axisPressedMouseMove: true,\n                            mouseWheel: true,\n                            pinch: true\n                        }\n                    });\n                    // Create candlestick series with error handling\n                    let candlestickSeries;\n                    let volumeSeries;\n                    try {\n                        console.log('Creating candlestick series...');\n                        console.log('Available chart methods:', Object.keys(chart));\n                        console.log('Chart library methods:', Object.keys(chartLib));\n                        // Try newer API first (v5.0+)\n                        if (chartLib.CandlestickSeries) {\n                            console.log('Using newer API: chart.addSeries(CandlestickSeries, options)');\n                            candlestickSeries = chart.addSeries(chartLib.CandlestickSeries, {\n                                upColor: '#10b981',\n                                downColor: '#ef4444',\n                                borderUpColor: '#10b981',\n                                borderDownColor: '#ef4444',\n                                wickUpColor: '#10b981',\n                                wickDownColor: '#ef4444',\n                                borderVisible: false\n                            });\n                        } else if (chart.addCandlestickSeries) {\n                            // Fallback to older API (v4.x)\n                            console.log('Using older API: chart.addCandlestickSeries(options)');\n                            candlestickSeries = chart.addCandlestickSeries({\n                                upColor: '#10b981',\n                                downColor: '#ef4444',\n                                borderUpColor: '#10b981',\n                                borderDownColor: '#ef4444',\n                                wickUpColor: '#10b981',\n                                wickDownColor: '#ef4444',\n                                borderVisible: false\n                            });\n                        } else {\n                            throw new Error('No candlestick series method available');\n                        }\n                        console.log('Candlestick series created successfully');\n                    } catch (error) {\n                        console.error('Error creating candlestick series:', error);\n                        // Fallback to line series if candlestick fails\n                        try {\n                            console.log('Falling back to line series...');\n                            if (chartLib.LineSeries) {\n                                candlestickSeries = chart.addSeries(chartLib.LineSeries, {\n                                    color: '#10b981',\n                                    lineWidth: 2\n                                });\n                            } else {\n                                candlestickSeries = chart.addLineSeries({\n                                    color: '#10b981',\n                                    lineWidth: 2\n                                });\n                            }\n                            console.log('Line series created as fallback');\n                        } catch (lineError) {\n                            console.error('Error creating line series:', lineError);\n                            return; // Exit if both fail\n                        }\n                    }\n                    try {\n                        console.log('Creating volume series...');\n                        // Try newer API first (v5.0+)\n                        if (chartLib.HistogramSeries) {\n                            console.log('Using newer API: chart.addSeries(HistogramSeries, options)');\n                            volumeSeries = chart.addSeries(chartLib.HistogramSeries, {\n                                color: '#64748b',\n                                priceFormat: {\n                                    type: 'volume'\n                                },\n                                priceScaleId: 'volume'\n                            });\n                        } else if (chart.addHistogramSeries) {\n                            // Fallback to older API (v4.x)\n                            console.log('Using older API: chart.addHistogramSeries(options)');\n                            volumeSeries = chart.addHistogramSeries({\n                                color: '#64748b',\n                                priceFormat: {\n                                    type: 'volume'\n                                },\n                                priceScaleId: 'volume'\n                            });\n                        } else {\n                            throw new Error('No histogram series method available');\n                        }\n                        console.log('Volume series created successfully');\n                    } catch (error) {\n                        console.error('Error creating volume series:', error);\n                        // Create a simple histogram series without volume formatting\n                        try {\n                            console.log('Creating simple histogram series...');\n                            if (chartLib.HistogramSeries) {\n                                volumeSeries = chart.addSeries(chartLib.HistogramSeries, {\n                                    color: '#64748b',\n                                    priceScaleId: 'volume'\n                                });\n                            } else {\n                                volumeSeries = chart.addHistogramSeries({\n                                    color: '#64748b',\n                                    priceScaleId: 'volume'\n                                });\n                            }\n                            console.log('Simple histogram series created');\n                        } catch (histError) {\n                            console.error('Error creating histogram series:', histError);\n                            // Continue without volume series\n                            volumeSeries = null;\n                            console.log('Continuing without volume series');\n                        }\n                    }\n                    // Set up volume price scale with error handling\n                    if (volumeSeries) {\n                        try {\n                            chart.priceScale('volume').applyOptions({\n                                scaleMargins: {\n                                    top: 0.8,\n                                    bottom: 0\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error setting up volume price scale:', error);\n                        }\n                    }\n                    // Store references\n                    chartRef.current = chart;\n                    candlestickSeriesRef.current = candlestickSeries;\n                    volumeSeriesRef.current = volumeSeries;\n                    // Set up crosshair move handler\n                    if (onCrosshairMove && candlestickSeries) {\n                        try {\n                            chart.subscribeCrosshairMove({\n                                \"LightweightChart.useEffect.initializeChart\": (param)=>{\n                                    try {\n                                        if (param.point && param.time && candlestickSeries.coordinateToPrice) {\n                                            const price = candlestickSeries.coordinateToPrice(param.point.y);\n                                            onCrosshairMove(price);\n                                        } else {\n                                            onCrosshairMove(null);\n                                        }\n                                    } catch (error) {\n                                        console.error('Error in crosshair move handler:', error);\n                                        onCrosshairMove(null);\n                                    }\n                                }\n                            }[\"LightweightChart.useEffect.initializeChart\"]);\n                        } catch (error) {\n                            console.error('Error setting up crosshair move handler:', error);\n                        }\n                    }\n                    console.log('Chart initialized successfully');\n                    console.log('Chart container dimensions:', {\n                        width: (_chartContainerRef_current = chartContainerRef.current) === null || _chartContainerRef_current === void 0 ? void 0 : _chartContainerRef_current.offsetWidth,\n                        height: (_chartContainerRef_current1 = chartContainerRef.current) === null || _chartContainerRef_current1 === void 0 ? void 0 : _chartContainerRef_current1.offsetHeight\n                    });\n                    setIsChartReady(true);\n                    // Handle resize\n                    const handleResize = withChartErrorHandling({\n                        \"LightweightChart.useEffect.initializeChart.handleResize\": ()=>{\n                            if (chartContainerRef.current && chart) {\n                                chart.applyOptions({\n                                    width: chartContainerRef.current.clientWidth\n                                });\n                            }\n                        }\n                    }[\"LightweightChart.useEffect.initializeChart.handleResize\"], 'resize');\n                    window.addEventListener('resize', handleResize);\n                    // Cleanup\n                    return ({\n                        \"LightweightChart.useEffect.initializeChart\": ()=>{\n                            window.removeEventListener('resize', handleResize);\n                            if (chart) {\n                                withChartErrorHandling({\n                                    \"LightweightChart.useEffect.initializeChart\": ()=>chart.remove()\n                                }[\"LightweightChart.useEffect.initializeChart\"], 'cleanup')();\n                            }\n                            chartRef.current = null;\n                            candlestickSeriesRef.current = null;\n                            volumeSeriesRef.current = null;\n                            setIsChartReady(false);\n                        }\n                    })[\"LightweightChart.useEffect.initializeChart\"];\n                }\n            }[\"LightweightChart.useEffect.initializeChart\"], 'initialization');\n            initializeChart();\n        }\n    }[\"LightweightChart.useEffect\"], [\n        height,\n        onCrosshairMove,\n        isLibraryLoaded,\n        chartLib\n    ]);\n    // Update chart data\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LightweightChart.useEffect\": ()=>{\n            if (!isChartReady || !candlestickSeriesRef.current) {\n                console.log('Chart update blocked:', {\n                    isChartReady,\n                    hasCandlestickSeries: !!candlestickSeriesRef.current\n                });\n                return;\n            }\n            console.log('Chart update: Received', data.length, 'candles');\n            if (data.length === 0) {\n                console.log('No chart data available');\n                return;\n            }\n            try {\n                var _chartData_, _chartData_1;\n                // Convert data to lightweight-charts format\n                // IMPORTANT: Lightweight Charts expects time in SECONDS, not milliseconds\n                const chartData = data.map({\n                    \"LightweightChart.useEffect.chartData\": (candle, index)=>{\n                        const timeInSeconds = Math.floor(candle.time / 1000); // Convert milliseconds to seconds\n                        // Log first few candles for debugging\n                        if (index < 3) {\n                            console.log(\"Converting candle \".concat(index, \":\"), {\n                                originalTime: candle.time,\n                                timeInSeconds,\n                                dateString: new Date(candle.time).toISOString(),\n                                open: candle.open,\n                                high: candle.high,\n                                low: candle.low,\n                                close: candle.close\n                            });\n                        }\n                        return {\n                            time: timeInSeconds,\n                            open: Number(candle.open),\n                            high: Number(candle.high),\n                            low: Number(candle.low),\n                            close: Number(candle.close)\n                        };\n                    }\n                }[\"LightweightChart.useEffect.chartData\"]);\n                const volumeData = data.map({\n                    \"LightweightChart.useEffect.volumeData\": (candle)=>({\n                            time: Math.floor(candle.time / 1000),\n                            value: candle.volume || 0,\n                            color: candle.close >= candle.open ? '#10b98150' : '#ef444450'\n                        })\n                }[\"LightweightChart.useEffect.volumeData\"]);\n                console.log('Setting chart data:', chartData.length, 'candles');\n                console.log('Sample chart data:', chartData[0]);\n                console.log('Time range:', (_chartData_ = chartData[0]) === null || _chartData_ === void 0 ? void 0 : _chartData_.time, 'to', (_chartData_1 = chartData[chartData.length - 1]) === null || _chartData_1 === void 0 ? void 0 : _chartData_1.time);\n                // Set data for candlestick series\n                candlestickSeriesRef.current.setData(chartData);\n                console.log('Candlestick data set successfully');\n                // Set data for volume series\n                if (volumeSeriesRef.current) {\n                    volumeSeriesRef.current.setData(volumeData);\n                    console.log('Volume data set successfully');\n                }\n                // Fit content to show all data\n                if (chartData.length > 0 && chartRef.current) {\n                    chartRef.current.timeScale().fitContent();\n                    console.log('Chart fitted to content');\n                }\n                console.log('Chart data updated successfully');\n            } catch (error) {\n                console.error('Error updating chart data:', error);\n                console.error('Error details:', {\n                    dataLength: data.length,\n                    sampleData: data[0],\n                    error: error instanceof Error ? error.message : String(error)\n                });\n            }\n        }\n    }[\"LightweightChart.useEffect\"], [\n        data,\n        isChartReady\n    ]);\n    // Add position markers\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LightweightChart.useEffect\": ()=>{\n            if (!isChartReady || !candlestickSeriesRef.current || positions.length === 0) return;\n            try {\n                // Create price lines for positions\n                positions.forEach({\n                    \"LightweightChart.useEffect\": (position)=>{\n                        if (position.status === 'open') {\n                            var _chartLib_LineStyle, // Entry price line\n                            _candlestickSeriesRef_current, _chartLib_LineStyle1, // Stop loss line\n                            _candlestickSeriesRef_current1;\n                            (_candlestickSeriesRef_current = candlestickSeriesRef.current) === null || _candlestickSeriesRef_current === void 0 ? void 0 : _candlestickSeriesRef_current.createPriceLine({\n                                price: position.entryPrice,\n                                color: position.side === 'buy' ? '#10b981' : '#ef4444',\n                                lineWidth: 2,\n                                lineStyle: (chartLib === null || chartLib === void 0 ? void 0 : (_chartLib_LineStyle = chartLib.LineStyle) === null || _chartLib_LineStyle === void 0 ? void 0 : _chartLib_LineStyle.Solid) || 0,\n                                axisLabelVisible: true,\n                                title: \"\".concat(position.side.toUpperCase(), \" \").concat(position.size, \" @ \").concat(position.entryPrice)\n                            });\n                            (_candlestickSeriesRef_current1 = candlestickSeriesRef.current) === null || _candlestickSeriesRef_current1 === void 0 ? void 0 : _candlestickSeriesRef_current1.createPriceLine({\n                                price: position.stopLoss,\n                                color: '#ef4444',\n                                lineWidth: 1,\n                                lineStyle: (chartLib === null || chartLib === void 0 ? void 0 : (_chartLib_LineStyle1 = chartLib.LineStyle) === null || _chartLib_LineStyle1 === void 0 ? void 0 : _chartLib_LineStyle1.Dashed) || 2,\n                                axisLabelVisible: true,\n                                title: \"SL: \".concat(position.stopLoss)\n                            });\n                            // Take profit lines\n                            position.takeProfitLevels.forEach({\n                                \"LightweightChart.useEffect\": (tp, index)=>{\n                                    if (!tp.executed) {\n                                        var _chartLib_LineStyle, _candlestickSeriesRef_current;\n                                        (_candlestickSeriesRef_current = candlestickSeriesRef.current) === null || _candlestickSeriesRef_current === void 0 ? void 0 : _candlestickSeriesRef_current.createPriceLine({\n                                            price: tp.price,\n                                            color: '#10b981',\n                                            lineWidth: 1,\n                                            lineStyle: (chartLib === null || chartLib === void 0 ? void 0 : (_chartLib_LineStyle = chartLib.LineStyle) === null || _chartLib_LineStyle === void 0 ? void 0 : _chartLib_LineStyle.Dotted) || 1,\n                                            axisLabelVisible: true,\n                                            title: \"TP\".concat(index + 1, \": \").concat(tp.price)\n                                        });\n                                    }\n                                }\n                            }[\"LightweightChart.useEffect\"]);\n                        }\n                    }\n                }[\"LightweightChart.useEffect\"]);\n            } catch (error) {\n                console.error('Error adding position markers:', error);\n            }\n        }\n    }[\"LightweightChart.useEffect\"], [\n        positions,\n        isChartReady,\n        chartLib\n    ]);\n    if (!isLibraryLoaded) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"w-full h-full relative flex items-center justify-center bg-slate-900/50 rounded\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-slate-400 text-sm\",\n                children: \"Loading chart...\"\n            }, void 0, false, {\n                fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n                lineNumber: 504,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n            lineNumber: 503,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: chartContainerRef,\n                className: \"w-full h-full\",\n                style: {\n                    height: \"\".concat(height, \"px\")\n                }\n            }, void 0, false, {\n                fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n                lineNumber: 511,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-2 left-2 bg-slate-900/80 rounded px-2 py-1 text-xs text-slate-300\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center space-x-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            children: [\n                                \"Candles: \",\n                                data.length\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n                            lineNumber: 520,\n                            columnNumber: 11\n                        }, this),\n                        positions.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-blue-400\",\n                            children: [\n                                \"Positions: \",\n                                positions.filter((p)=>p.status === 'open').length\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n                            lineNumber: 522,\n                            columnNumber: 13\n                        }, this),\n                        !isChartReady && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-yellow-400\",\n                            children: \"Initializing...\"\n                        }, void 0, false, {\n                            fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n                            lineNumber: 527,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n                    lineNumber: 519,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n                lineNumber: 518,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/abhaskumarrr/Documents/GitHub/SmartMarketOOPS/frontend/components/charts/LightweightChart.tsx\",\n        lineNumber: 510,\n        columnNumber: 5\n    }, this);\n}\n_s(LightweightChart, \"Q4oL7ZscUADq67e28LQeQxoHaao=\");\n_c = LightweightChart;\nvar _c;\n$RefreshReg$(_c, \"LightweightChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/charts/LightweightChart.tsx\n"));

/***/ })

}]);