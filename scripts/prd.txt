# Product Requirements Document (PRD)

## 1. Project Specifics

- **Project Name:** Institutional-Grade ML Crypto Trading Bot with Exchange-like Frontend
- **Participants:** Product Owner, ML Engineer, Backend Developer, Frontend Developer, Stakeholders
- **Status:** Planning
- **Target Release:** ASAP (immediately needed)

---

## 2. Team Goals & Business Objectives

- Automate crypto trading using advanced ML models for signal generation and execution on Delta Exchange (testnet and real net).
- Provide a robust, real-time dashboard for monitoring, control, and analytics.
- Optimize for MacBook Air M2, ensuring efficient local operation.
- Enable institutional-grade risk management, transparency, and performance.

---

## 3. Background & Strategic Fit

Manual trading is time-consuming and prone to human error. By leveraging machine learning, we can automate trade decisions, improve consistency, and potentially increase returns. The project targets institutional users who require reliability, transparency, and actionable analytics. The addition of a professional frontend ensures usability and trust.

---

## 4. Assumptions

- Delta Exchange API is stable and accessible for both testnet and real net.
- Users have valid API keys and necessary permissions.
- The system will run on a MacBook Air M2 (Apple Silicon).
- Ollama and Taskmaster are installed and configured locally.
- Users are familiar with basic trading and ML concepts.

---

## 5. User Stories

- **Trader:**  
  - I want to connect my bot to Delta Exchange and execute trades automatically based on ML signals.
  - I want to switch between testnet and real net easily.
- **Quant/ML Engineer:**  
  - I want to train, validate, and deploy ML models for market prediction using PyTorch.
  - I want to optimize models for Apple Silicon.
- **User:**  
  - I want to view live price charts, model predictions, and executed trades in a web dashboard.
  - I want to see performance metrics (accuracy, returns, drawdown, etc.).
- **Admin:**  
  - I want to monitor bot health, logs, and adjust trading strategies as needed.
  - I want to receive alerts for errors or unusual activity.

---

## 6. User Interaction & Design

- **Frontend:**  
  - Next.js dashboard with TradingView-style chart, overlays for predictions and trades.
  - Real-time updates via WebSocket/REST API.
  - Performance metrics and trade logs.
  - Order placement simulation and controls.
- **Backend:**  
  - REST/WebSocket API for data, predictions, trades, and metrics.
  - Secure API endpoints.
  - Modular, testable codebase.

---

## 7. Questions & Open Issues

- Which charting library will best match exchange UX (TradingView, Chart.js, etc.)?
- How to handle API rate limits and error recovery?
- What is the best way to visualize model confidence and trade rationale?
- How to ensure security for API keys and sensitive data?

---

## 8. Out of Scope

- No support for exchanges other than Delta Exchange (initial release).
- No mobile app (web only, but responsive).
- No high-frequency trading (focus on institutional strategies).
- No social/copy trading features.

---

## 9. Success Metrics

- Bot achieves >X% accuracy in backtests and live trading.
- Dashboard updates in real-time with <1s latency.
- Users can switch between testnet and real net without errors.
- System runs efficiently on MacBook Air M2.

---

## 10. References

- https://www.delta.exchange/algo/trading-bot
- https://github.com/delta-exchange/trading-bots
- https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/
- https://www.atlassian.com/agile/product-management/requirements 